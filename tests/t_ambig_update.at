AT_SETUP([update with multiple candidates])
MONOTONE_SETUP

# Make sure that when there are multiple plausible heads, update
# fails, and prints some informative message listing the heads.

ADD_FILE(testfile, [foo
])
COMMIT(testbranch)
ANC=`BASE_REVISION`

ADD_FILE(file1, [bar
])
COMMIT(testbranch)
LEFT=`BASE_REVISION`

REVERT_TO($ANC)

ADD_FILE(file1, [baz
])
COMMIT(testbranch)
RIGHT=`BASE_REVISION`

REVERT_TO($ANC)

# There are two possible candidates, so our update should fail.
AT_CHECK(rm -f file1)
AT_CHECK(MONOTONE update, [1], [ignore], [stderr])
AT_CHECK(test ! -e file1)
# Make sure that the failure message listed the possibilities
AT_CHECK(QGREP($LEFT stderr), [])
AT_CHECK(QGREP($RIGHT stderr), [])
AT_CHECK(QGREP($ANC stderr), [1])

# Check also when one side is deeper than the other...
REVERT_TO($LEFT)
ADD_FILE(file2, [blah blah blah
])
COMMIT(testbranch)
LEFT2=`BASE_REVISION`

REVERT_TO($ANC)
AT_CHECK(rm -f file1)
AT_CHECK(rm -f file2)
AT_CHECK(MONOTONE update, [1], [ignore], [stderr])
AT_CHECK(test ! -e file1)
AT_CHECK(test ! -e file2)
# Make sure that the failure message listed the possibilities
AT_CHECK(QGREP($LEFT stderr), [1])
AT_CHECK(QGREP($LEFT2 stderr), [])
AT_CHECK(QGREP($RIGHT stderr), [])
AT_CHECK(QGREP($ANC stderr), [1])

AT_CLEANUP
