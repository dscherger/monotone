AT_SETUP([(normal) update with multiple candidates])
MONOTONE_SETUP

# This test is a bug report.
AT_XFAIL_IF(true)

# as described by njs on irc, the solution to this should be close to
# the following
#
# 1) set "candidates" to {}, and set "queue" to that subset of the
# heads that are descendents of the current revision
#
#
# 2) while queue is non-empty, pull out a revision, and do
#
# 2.1) if the revision is not a descendent of the current revision,
# discard and go back around the loop
#
# 2.2) if the revision is an acceptable update target according to the
# hook, which checks testresult certs or whatever, then place the
# revision in "candidates" and go back around the loop
#
# 2.3) else, insert all parents of the revision into the queue, and go
# back around the loop 
#
# oh, I guess it might be good to have a check that the revision !=
# the current revision, in step 2.1
#
# 3) run erase_ancestors(candidates)
#
# 4) now "candidates" contains exactly the candidate set; if its size
# is zero print "already up to date", if its size is 1 then update, if
# its size is >1 then print "multiple update candidates" and give the
# list for the user to pick from.

ADD_FILE(testfile, [foo
])
COMMIT(testbranch)
ANC=`BASE_REVISION`

ADD_FILE(file1, [bar
])
COMMIT(testbranch)
LEFT=`BASE_REVISION`

REVERT_TO($ANC)

ADD_FILE(file1, [baz
])
COMMIT(testbranch)
RIGHT=`BASE_REVISION`

REVERT_TO($ANC)

# There are two possible candidates, so our update should fail.
AT_CHECK(rm -f file1)
AT_CHECK(MONOTONE update, [1], [ignore], [stderr])
AT_CHECK(test ! -e file1)
# Make sure that the failure message listed the possibilities
AT_CHECK(grep -q $LEFT stderr, [])
AT_CHECK(grep -q $RIGHT stderr, [])
AT_CHECK(grep -q $ANC stderr, [1])

# Check also when one side is deeper than the other...
REVERT_TO($LEFT)
ADD_FILE(file2, [blah blah blah
])
COMMIT(testbranch)
LEFT2=`BASE_REVISION`

REVERT_TO($ANC)
AT_CHECK(rm -f file1)
AT_CHECK(rm -f file2)
AT_CHECK(MONOTONE update, [1], [ignore], [stderr])
AT_CHECK(test ! -e file1)
AT_CHECK(test ! -e file2)
# Make sure that the failure message listed the possibilities
AT_CHECK(grep -q $LEFT stderr, [1])
AT_CHECK(grep -q $LEFT2 stderr, [])
AT_CHECK(grep -q $RIGHT stderr, [])
AT_CHECK(grep -q $ANC stderr, [1])

AT_CLEANUP
