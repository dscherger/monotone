#  -*- Autoconf -*-

AT_SETUP([database is closed on signal exit])

MONOTONE_SETUP

# this test checks that .db-journal files aren't left lying about if the 
# process is killed with SIGTERM or SIGINT

AT_DATA(testfile, [stuff
])
AT_CHECK(MONOTONE add testfile, [], [ignore], [ignore])

# a hack to make the monotone process hang around with the database locked.

AT_DATA(wait.lua, [
function get_passphrase(key) sleep(1000) end
])


# SIGTERM first
AT_CHECK(MONOTONE --rcfile=wait.lua --branch=testbranch commit --message=blah-blah & echo $! > monotone_commit.pid, [], [ignore], [ignore])
AT_CHECK(sleep 2, [], [ignore], [ignore])
AT_CHECK(test -f test.db-journal, [], [ignore], [ignore])
AT_CHECK(kill -TERM `cat monotone_commit.pid`, [], [ignore], [ignore])
AT_CHECK(test -f test.db-journal, [1], [ignore], [ignore])


# and again for SIGINT
AT_CHECK(MONOTONE --rcfile=wait.lua --branch=testbranch commit --message=blah-blah & echo $! > monotone_commit.pid, [], [ignore], [ignore])
AT_CHECK(sleep 2, [], [ignore], [ignore])
AT_CHECK(test -f test.db-journal, [], [ignore], [ignore])
AT_CHECK(kill -INT `cat monotone_commit.pid`, [], [ignore], [ignore])
AT_CHECK(test -f test.db-journal, [1], [ignore], [ignore])


# should be cleaned up for SIGSEGV
AT_CHECK(MONOTONE --rcfile=wait.lua --branch=testbranch commit --message=blah-blah & echo $! > monotone_commit.pid, [], [ignore], [ignore])
AT_CHECK(sleep 2, [], [ignore], [ignore])
AT_CHECK(test -f test.db-journal, [], [ignore], [ignore])
AT_CHECK(kill -SEGV `cat monotone_commit.pid`, [], [ignore], [ignore])
AT_CHECK(sleep 2, [], [ignore], [ignore])
AT_CHECK(test -f test.db-journal, [], [ignore], [ignore])

AT_CLEANUP
