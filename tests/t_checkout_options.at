AT_SETUP([(minor) checkout creates right MT/options])
MONOTONE_SETUP

ADD_FILE(testfile, [foo
])
COMMIT(testbranch)
REV=`BASE_REVISION`

# We use RAW_MONOTONE because it used to be that passing --db= (as
# MONOTONE does) would hide a bug in this functionality...
AT_CHECK(RAW_MONOTONE checkout test_dir1, [], [ignore], [ignore])
AT_CHECK(RAW_MONOTONE --db=test.db checkout test_dir2, [], [ignore], [ignore])
AT_CHECK(RAW_MONOTONE --db=test.db --branch=testbranch checkout test_dir3, [], [ignore], [ignore])
AT_CHECK(RAW_MONOTONE --branch=testbranch checkout test_dir4, [], [ignore], [ignore])
AT_CHECK(RAW_MONOTONE --db=test.db --branch=testbranch checkout $REV test_dir5, [], [ignore], [ignore])
AT_CHECK(RAW_MONOTONE --branch=testbranch checkout $REV test_dir6, [], [ignore], [ignore])
# These are the only two that shouldn't have a branch set
AT_CHECK(RAW_MONOTONE --db=test.db checkout $REV test_dir7, [], [ignore], [ignore])
AT_CHECK(RAW_MONOTONE checkout $REV test_dir8, [], [ignore], [ignore])

for DIR in test_dir{1,2,3,4,5,6,7,8}; do
  AT_CHECK(echo DIR=$DIR, [], [ignore])
  AT_CHECK(test -f $DIR/MT/options)
  AT_CHECK(grep -q test.db $DIR/MT/options)
done

for DIR in test_dir{1,2,3,4,5,6}; do
  AT_CHECK(echo DIR=$DIR, [], [ignore])
  AT_CHECK(grep -q testbranch $DIR/MT/options)
done

# This test is a bug report.
AT_XFAIL_IF(true)
# This fails because we pick up the branch name from the starting
# directory's MT/options.  To do this really right, non-branch-based
# checkouts should set the branch in MT/options iff the user specified
# the branch on the command line.
AT_CHECK(grep -q testbranch test_dir7/MT/options, [1])
AT_CHECK(grep -q testbranch test_dir8/MT/options, [1])

AT_CLEANUP