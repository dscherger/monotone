#  -*- Autoconf -*-

# Check that update and checkout do the right thing according to the 
# delete_dropped_file and replace_existing_file hooks

AT_SETUP([noclobber update/checkout lua hooks])

MONOTONE_SETUP

AT_DATA(preserve.lua, [
function delete_dropped_file(name)   return false end
function replace_existing_file(name) return false end
])

AT_DATA(clobber.lua, [
function delete_dropped_file(name)   return true end
function replace_existing_file(name) return true end
])

AT_DATA(delete.lua, [
function delete_dropped_file(name)   return true end
function replace_existing_file(name) return false end
])

AT_DATA(replace.lua, [
function delete_dropped_file(name)   return false end
function replace_existing_file(name) return true end
])

# database files

AT_DATA(a, [file a
])
AT_DATA(b, [file b
])
AT_DATA(c, [file c
])

# blocking files 

AT_DATA(xa, [file xa
])
AT_DATA(xb, [file xb
])
AT_DATA(xbb, [file xbb
])
AT_DATA(xc, [file xc
])

# first commit

AT_CHECK(MONOTONE add a, [], [ignore], [ignore])
AT_CHECK(MONOTONE add b, [], [ignore], [ignore])
AT_CHECK(MONOTONE --branch=testbranch commit message, [], [ignore], [ignore])
M_SHA1=`SHA1(MT/manifest)`

# set up add, rename, drop in second commit
 
AT_CHECK(MONOTONE drop a, [], [ignore], [ignore])
AT_CHECK(mv b bb)
AT_CHECK(MONOTONE rename b bb, [], [ignore], [ignore])
AT_CHECK(MONOTONE add c, [], [ignore], [ignore])
AT_CHECK(MONOTONE --branch=testbranch commit message, [], [ignore], [ignore])

# create existing modified files 

AT_CHECK(cp xa a)
AT_CHECK(cp xb b)
AT_CHECK(cp xbb bb)
AT_CHECK(cp xc c)

# preserving checkout
# a and b changes are preserved

AT_CHECK(rm -rf MT)

AT_CHECK(MONOTONE --rcfile=preserve.lua --branch=testbranch checkout $M_SHA1 ., [], [ignore], [stderr])
AT_CHECK(MONOTONE status, [], [stdout], [])
AT_CHECK(grep 'no changes' stdout, [1], [ignore])
AT_CHECK(cmp a xa, [], [ignore])
AT_CHECK(cmp b xb, [], [ignore])

# preserving update
# a is dropped but not deleted
# b is renamed to bb but not deleted from filesystem
# bb changes are preserved
# c is added but changes are preserved

AT_CHECK(MONOTONE --rcfile=preserve.lua update, [], [ignore], [stderr])
AT_CHECK(MONOTONE status, [], [stdout], [])
AT_CHECK(grep 'no changes' stdout, [1], [ignore])
AT_CHECK(cmp a xa, [], [ignore])
AT_CHECK(test -f b, [], [ignore])
AT_CHECK(cmp b xb, [], [ignore])
AT_CHECK(cmp bb xbb, [], [ignore])
AT_CHECK(cmp c xc, [], [ignore])

# clobbering checkout
# a and b changes are replaced

AT_CHECK(rm -rf MT)

AT_CHECK(MONOTONE --rcfile=clobber.lua --branch=testbranch checkout $M_SHA1 ., [], [ignore], [stderr])
AT_CHECK(MONOTONE status, [], [stdout], [])
AT_CHECK(grep 'no changes' stdout, [], [ignore])
AT_CHECK(cmp a xa, [1], [ignore])
AT_CHECK(cmp b xb, [1], [ignore])

# clobbering update
# a is dropped and deletedd
# b is renamed to bb and deleted from filesystem
# bb changes are replaced
# c is been added and changes are replaced

AT_CHECK(MONOTONE --rcfile=clobber.lua update, [], [ignore], [stderr])
AT_CHECK(MONOTONE status, [], [stdout], [])
AT_CHECK(grep 'no changes' stdout, [], [ignore])
AT_CHECK(test -f a, [1], [ignore])
AT_CHECK(test -f b, [1], [ignore])
AT_CHECK(cmp bb xbb, [1], [ignore])
AT_CHECK(cmp c xc, [1], [ignore])

# removing checkout
# a and b changes are preserved

AT_CHECK(cp xa a)
AT_CHECK(cp xb b)
AT_CHECK(cp xbb bb)
AT_CHECK(cp xc c)
AT_CHECK(rm -rf MT)

AT_CHECK(MONOTONE --rcfile=delete.lua --branch=testbranch checkout $M_SHA1 ., [], [ignore], [stderr])
AT_CHECK(MONOTONE status, [], [stdout], [])
AT_CHECK(grep 'no changes' stdout, [1], [ignore])
AT_CHECK(cmp a xa, [], [ignore])
AT_CHECK(cmp b xb, [], [ignore])

# removing update
# a is dropped and deleted
# b is renamed to bb and deleted from filesystem
# bb changes are preserved
# c is added but changes are preserved

AT_CHECK(MONOTONE --rcfile=delete.lua update, [], [ignore], [stderr])
AT_CHECK(MONOTONE status, [], [stdout], [])
AT_CHECK(grep 'no changes' stdout, [1], [ignore])
AT_CHECK(test -f a, [1], [ignore])
AT_CHECK(test -f b, [1], [ignore])
AT_CHECK(cmp bb xbb, [], [ignore])
AT_CHECK(cmp c xc, [], [ignore])

# replacing checkout
# a and b changes are replaced

AT_CHECK(cp xa a)
AT_CHECK(cp xb b)
AT_CHECK(cp xbb bb)
AT_CHECK(cp xc c)
AT_CHECK(rm -rf MT)

AT_CHECK(MONOTONE --rcfile=replace.lua --branch=testbranch checkout $M_SHA1 ., [], [ignore], [stderr])
AT_CHECK(MONOTONE status, [], [stdout], [])
AT_CHECK(grep 'no changes' stdout, [], [ignore])
AT_CHECK(cmp a xa, [1], [ignore])
AT_CHECK(cmp b xb, [1], [ignore])

# replacing update
# a is dropped but not deleted from filesystem
# b is renamed to bb and effectively deleted from filesystem
# bb changes are replaced
# c is added and changes are replaced

AT_CHECK(MONOTONE --rcfile=replace.lua update, [], [ignore], [stderr])
AT_CHECK(MONOTONE status, [], [stdout], [])
AT_CHECK(grep 'no changes' stdout, [], [ignore])
AT_CHECK(test -f a, [], [ignore])
AT_CHECK(cmp bb xb,  [1], [ignore])
AT_CHECK(cmp bb xbb, [1], [ignore])
AT_CHECK(cmp c xc, [1], [ignore])

AT_CLEANUP