#  -*- Autoconf -*-

AT_SETUP([list branches])

# Setup the environment
MONOTONE_SETUP

# ls branches on empty db should return successful and empty
AT_CHECK(MONOTONE ls branches,[0],[stdout],[stderr])
AT_CHECK(cmp /dev/null stdout,[],[ignore])
AT_CHECK(cmp /dev/null stderr,[],[ignore])

# Let's create some branches, so we have stuff to list
AT_DATA(foo.testbranch, [this is the testbranch version
])
AT_DATA(foo.otherbranch, [this version goes in otherbranch
])

AT_CHECK(cp foo.testbranch foo)
AT_CHECK(MONOTONE add foo, [], [ignore], [ignore])
COMMIT(testbranch)

AT_CHECK(cp -f foo.otherbranch foo)
COMMIT(otherbranch)

# ls branches should list 2 branches now
AT_CHECK(MONOTONE ls branches,[0],[stdout],[stderr])
AT_CHECK(CANONICALISE(stdout))
AT_DATA(branches,[otherbranch
testbranch
])
AT_CHECK(cmp branches stdout,[],[ignore])

# Create an ignore_branch hook to pass in
AT_DATA(ignore_branch.lua,[
function ignore_branch(branchname)
    if(branchname == "branch.to.be.ignored") then return true end
    return false
end
])

# if we make a change in the branch.to.be.ignored it should not turn up in the list
AT_CHECK(cp foo.testbranch in_ignored)
AT_CHECK(MONOTONE --rcfile=ignore_branch.lua add in_ignored, [], [ignore], [ignore])
COMMIT(branch.to.be.ignored)
AT_CHECK(MONOTONE --rcfile=ignore_branch.lua ls branches,[0],[stdout],[stderr])
AT_CHECK(CANONICALISE(stdout))
AT_CHECK(cmp branches stdout,[],[ignore])

AT_CLEANUP
