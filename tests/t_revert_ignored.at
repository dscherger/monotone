AT_SETUP([revert ignored files])
MONOTONE_SETUP

# revert, with only ignored files listed on the command line, should not
# revert anything

ADD_FILE(foo, [foo
])
ADD_FILE(bar, [bar
])
ADD_FILE(baz, [baz
])

AT_DATA(foo.ignored, [foo.ignored
])
AT_DATA(bar.ignored, [bar.ignored
])
AT_DATA(baz.ignored, [baz.ignored
])


AT_DATA(ignore.lua, [
function ignore_file(name)
   if (string.find(name, "%.ignored$")) then return true end
   return false
end
])

COMMIT(testbranch)

AT_DATA(foo, [foofoo
])
AT_DATA(bar, [barbar
])
AT_DATA(baz, [bazbaz
])

AT_CHECK(MONOTONE status --rcfile ignore.lua, [], [stdout], [ignore])
AT_CHECK(grep foo stdout, [0], [ignore], [ignore])
AT_CHECK(grep bar stdout, [0], [ignore], [ignore])
AT_CHECK(grep baz stdout, [0], [ignore], [ignore])

AT_CHECK(MONOTONE status --rcfile ignore.lua *.ignored, [], [stdout], [ignore])
AT_CHECK(grep foo stdout, [1], [ignore], [ignore])
AT_CHECK(grep bar stdout, [1], [ignore], [ignore])
AT_CHECK(grep baz stdout, [1], [ignore], [ignore])

# revert with nothing but excluded files should do nothing

AT_CHECK(MONOTONE revert --rcfile ignore.lua *.ignored)

AT_CHECK(MONOTONE status --rcfile ignore.lua, [], [stdout], [ignore])
AT_CHECK(grep foo stdout, [0], [ignore], [ignore])
AT_CHECK(grep bar stdout, [0], [ignore], [ignore])
AT_CHECK(grep baz stdout, [0], [ignore], [ignore])

AT_CLEANUP
