#  -*- Autoconf -*-

AT_SETUP([importing files with non-english names])

MONOTONE_SETUP

EUROPEAN_UTF8=`printf "\xC3\xB6\xC3\xA4\xC3\xBc\xC3\x9F"`
EUROPEAN_8859_1=`printf "\xF6\xE4\xFC\xDF"`

JAPANESE_UTF8=`printf "\xE3\x81\xA6\xE3\x81\x99\xE3\x81\xA8"`
JAPANESE_EUC_JP=`printf "\xA4\xC6\xA4\xB9\xA4\xC8"`

if test "$OSTYPE" == "msys"; then
  FUNNY_FILENAME="file+name-with_funny@symbols%etc"
else
  FUNNY_FILENAME="file+name-with_funny@symbols%etc:"
fi

AT_CHECK(mkdir weird utf8 8859-1 euc)
AT_CHECK(touch "weird/file name with spaces", [], [ignore], [ignore])
AT_CHECK(touch "weird/$FUNNY_FILENAME", [], [ignore], [ignore])
AT_CHECK(touch "utf8/$EUROPEAN_UTF8", [], [ignore], [ignore])
AT_CHECK(touch "utf8/$JAPANESE_UTF8", [], [ignore], [ignore])

if test `uname` != "Darwin"; then
	AT_CHECK(touch "8859-1/$EUROPEAN_8859_1", [], [ignore], [ignore])
	AT_CHECK(touch "euc/$JAPANESE_EUC_JP", [], [ignore], [ignore])
fi

AT_CHECK(MONOTONE add "weird/file name with spaces", [], [ignore], [ignore])
AT_CHECK(MONOTONE add "weird/$FUNNY_FILENAME", [], [ignore], [ignore])

# add some files with UTF8 names
export LANG=en_US.utf-8
export CHARSET=UTF-8
AT_CHECK(MONOTONE add "utf8/$EUROPEAN_UTF8", [], [ignore], [ignore])
AT_CHECK(MONOTONE add "utf8/$JAPANESE_UTF8", [], [ignore], [ignore])

AT_CHECK(MONOTONE --branch=testbranch commit --message 'adding european and japanese names in UTF-8', [], [ignore], [ignore])

# check the names showed up in our manifest

export LANG=en_US.UTF-8
export CHARSET=UTF-8

AT_CHECK(MONOTONE automate get_manifest, [], [stdout])
AT_CHECK(mv stdout manifest)
AT_CHECK(grep funny manifest, [], [ignore], [ignore])
AT_CHECK(grep spaces manifest, [], [ignore], [ignore])
AT_CHECK(grep $JAPANESE_UTF8 manifest, [], [ignore], [ignore])
AT_CHECK(grep $EUROPEAN_UTF8 manifest, [], [ignore], [ignore])

# okay, now we try in two different locales.  monotone is happy to
# have arbirary utf8 filenames in it, but these locales don't support
# arbitrary utf8 -- you have to use a utf8 locale if you want to put
# filenames on your disk in utf8.  if we keep all the utf8 files in
# the tree, then, monotone will attempt to convert them to the current
# locale, and fail miserably.  so get rid of them first.

AT_CHECK(MONOTONE drop "utf8/$EUROPEAN_UTF8" "utf8/$JAPANESE_UTF8", [], [ignore], [ignore])
AT_CHECK(MONOTONE --branch=testbranch commit --message 'cleaning up utf8 files', [], [ignore], [ignore])

# OS X expects data passed to the OS to be utf8, so these tests don't make
# sense.
if test `uname` != "Darwin"; then
	# now try iso-8859-1

	export LANG=de_DE.iso-8859-1
	export CHARSET=iso-8859-1
	AT_CHECK(MONOTONE add "8859-1/$EUROPEAN_8859_1", [], [ignore], [ignore])

	AT_CHECK(MONOTONE --branch=testbranch commit --message 'adding european name in ISO 8859-1', [], [ignore], [ignore])
fi

# check the names showed up in our manifest

AT_CHECK(MONOTONE automate get_manifest, [], [stdout])
AT_CHECK(mv stdout manifest)
AT_CHECK(grep funny manifest, [], [ignore], [ignore])
AT_CHECK(grep spaces manifest, [], [ignore], [ignore])
if test `uname` != "Darwin"; then
  AT_CHECK(grep "8859-1/$EUROPEAN_UTF8" manifest, [], [ignore], [ignore])
fi

# okay, clean up again

if test `uname` != "Darwin"; then
	AT_CHECK(MONOTONE drop "8859-1/$EUROPEAN_8859_1", [], [ignore], [ignore])
	AT_CHECK(MONOTONE --branch=testbranch commit --message 'cleaning up 8859-1 files', [], [ignore], [ignore])
fi

# now try euc

if test `uname` != "Darwin"; then
	export LANG=ja_JP.euc-jp
	export CHARSET=euc-jp
	AT_CHECK(MONOTONE add "euc/$JAPANESE_EUC_JP", [], [ignore], [ignore])

	AT_CHECK(MONOTONE --branch=testbranch commit --message 'adding japanese name in EUC-JP', [], [ignore], [ignore])
fi

# check the names showed up in our manifest

AT_CHECK(MONOTONE automate get_manifest, [], [stdout])
AT_CHECK(mv stdout manifest)
AT_CHECK(grep funny manifest, [], [ignore], [ignore])
AT_CHECK(grep spaces manifest, [], [ignore], [ignore])
if test `uname` != "Darwin"; then
	AT_CHECK(grep "euc/$JAPANESE_UTF8" manifest, [], [ignore], [ignore])
fi

AT_CLEANUP
