AT_SETUP([(imp) persistent netsync server - keys 2])
AT_KEYWORDS(netsync)
MONOTONE_SETUP
NETSYNC_SETUP

# This tests a somewhat subtle version of how public keys are handled
# with netsync.  The rule is, we serve a key if we're serving any cert
# signed by that key.  The question is, if when we boot up the server
# we already have the key in question, but it isn't signing any such
# certs, but _then we get pushed such a cert_, do we push out the key
# on further netsyncs?

# We create a key in database 2, read the public key into database 1,
# then start database 1 serving.  Then we push a cert into database 1
# signed by the key, and we pull into database 3.

AT_CHECK((echo foo@bar; echo foo@bar) | MONOTONE2 genkey foo@bar, [], [ignore], [ignore])
AT_CHECK(MONOTONE2 pubkey foo@bar | MONOTONE read, [], [ignore], [ignore])

ADD_FILE(foo, [data data blah
])
AT_CHECK(MONOTONE2 commit --key=foo@bar --branch=testbranch -m 'commit foo' foo, [], [ignore], [ignore])

NETSYNC_SERVE_START(testbranch)
NETSYNC_CLIENT_N_RUN(2, push, testbranch)
NETSYNC_CLIENT_N_RUN(3, pull, testbranch)
NETSYNC_SERVE_STOP

AT_CHECK(MONOTONE3 ls keys, [], [stdout], [ignore])
AT_CHECK(QGREP(foo@bar stdout), [])

AT_CLEANUP
