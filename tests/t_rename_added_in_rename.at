AT_SETUP([merge with add, rename file, and rename dir])
MONOTONE_SETUP

# This one's kind of complicated.
# 
#    BASE_R                 - contains directory foo
#     |    \
#     |     \
#     |      RENAME_DIR_R   - rename_dir foo bar
#     |            |
#     ADDED_R      |        - add_file foo/a
#     |      \     |
#     |       \    |
#     |        \   |
#     |         merge 1
#     |             |
#     RENAME_FILE_R |       - rename_file foo/a foo/b
#               \   |
#                \  |
#                 TEST_R
#                 
# we want to make sure that both merges happen without tree conflicts
# being triggered

AT_CHECK(mkdir foo)
ADD_FILE(foo/bystander, [data data
])
COMMIT(testbranch)
BASE_R=`BASE_REVISION`

AT_CHECK(MONOTONE rename foo/ bar/, [], [ignore], [ignore])
AT_CHECK(mv foo bar)
COMMIT(testbranch)
RENAME_DIR_R=`BASE_REVISION`

AT_CHECK(mv bar foo)
REVERT_TO($BASE_R)

ADD_FILE(foo/a, [more data
])
COMMIT(testbranch)
ADDED_R=`BASE_REVISION`

AT_CHECK(MONOTONE merge, [], [ignore], [ignore])

AT_CHECK(mv foo/a foo/b)
AT_CHECK(MONOTONE rename foo/a foo/b, [], [ignore], [ignore])
COMMIT(testbranch)
RENAME_FILE_R=`BASE_REVISION`

AT_CHECK(MONOTONE merge, [], [ignore], [ignore])

AT_CHECK(MONOTONE checkout --revision=$BASE_R test_dir, [], [ignore], [ignore])
AT_CHECK( (cd test_dir && MONOTONE update --branch=testbranch), [], [ignore], [ignore])
TEST_R=`cd test_dir; BASE_REVISION`

AT_CHECK(test $TEST_R != $BASE_R)
AT_CHECK(test $TEST_R != $RENAME_DIR_R)
AT_CHECK(test $TEST_R != $ADDED_R)
AT_CHECK(test $TEST_R != $RENAME_FILE_R)

AT_CHECK(test ! -f test_dir/foo/bystander)
AT_CHECK(test -f test_dir/bar/bystander)
AT_CHECK(test ! -f test_dir/foo/a)
AT_CHECK(test ! -f test_dir/bar/a)
AT_CHECK(test ! -f test_dir/foo/b)
AT_CHECK(test -f test_dir/bar/b)

AT_CLEANUP
