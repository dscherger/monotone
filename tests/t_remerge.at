#  -*- Autoconf -*-

AT_SETUP([merging a rename twice])

MONOTONE_SETUP

# x_branch   y_branch
#  
#   A
#   |\   this edge says rename(x, y)
#   | ----------
#   |           \
#   B            E--------\
#   |            |         |
#   |            F         |
#   C            |         |
#   |\propagate1 |         |
#   | -----------G         |
#   |            |         J
#   |            H         |
#   D            |         |
#    \propagate2 |         |
#     -----------I---------K

AT_DATA(x, [data of state A
])
AT_DATA(foo, [extra blah blah foo
])
AT_DATA(bar, [extra blah blah bar
])
AT_DATA(baz, [extra blah blah baz
])
AT_DATA(quux, [extra blah blah quux
])

# produce state A
AT_CHECK(MONOTONE add x, [], [ignore], [ignore])
AT_CHECK(MONOTONE --branch=branch.x commit --message 'state A', [], [ignore], [ignore])
A_REVISION_SHA=`BASE_REVISION`

# produce state B
echo "data of state B" >x
AT_CHECK(MONOTONE --branch=branch.x commit --message 'state B', [], [ignore], [ignore])

# produce state C
echo "data of state C" >x
AT_CHECK(MONOTONE --branch=branch.x commit --message 'state C', [], [ignore], [ignore])
C_REVISION_SHA=`BASE_REVISION`

# produce state E
REVERT_TO($A_REVISION_SHA)
AT_CHECK(MONOTONE rename x y, [], [ignore], [ignore])
mv x y
AT_CHECK(MONOTONE --branch=branch.y commit --message 'state E', [], [ignore], [ignore])
E_REVISION_SHA=`BASE_REVISION`

# produce state F
AT_CHECK(MONOTONE add foo, [], [ignore], [ignore])
AT_CHECK(MONOTONE --branch=branch.y commit --message 'state F', [], [ignore], [ignore])

# produce state G
AT_CHECK(MONOTONE propagate branch.x branch.y, [], [ignore], [ignore])
AT_CHECK(MONOTONE --branch=branch.y update, [], [ignore], [ignore])
G_REVISION_SHA=`BASE_REVISION`
AT_CHECK(grep 'state C' y, [], [ignore], [ignore])

# produce state D
REVERT_TO($C_REVISION_SHA)
echo "data of state D" >x
AT_CHECK(MONOTONE add bar, [], [ignore], [ignore])
AT_CHECK(MONOTONE --branch=branch.x commit --message 'state D', [], [ignore], [ignore])

# produce state H
REVERT_TO($G_REVISION_SHA)
AT_CHECK(MONOTONE add baz, [], [ignore], [ignore])
AT_CHECK(MONOTONE --branch=branch.y commit --message 'state H', [], [ignore], [ignore])

# produce state I
AT_CHECK(MONOTONE propagate branch.x branch.y, [], [ignore], [ignore])
AT_CHECK(MONOTONE --branch=branch.y update, [], [ignore], [ignore])
AT_CHECK(grep 'state D' y, [], [ignore], [ignore])

# produce state J
REVERT_TO($E_REVISION_SHA)
AT_CHECK(MONOTONE add quux, [], [ignore], [ignore])
AT_CHECK(MONOTONE --branch=branch.y commit --message 'state J', [], [ignore], [ignore])

# produce state K
AT_CHECK(MONOTONE --branch=branch.y merge, [], [ignore], [ignore])
AT_CHECK(MONOTONE --branch=branch.y update, [], [ignore], [ignore])

AT_CHECK(MONOTONE cat manifest, [], [stdout])
AT_CHECK(mv stdout manifest)
AT_CHECK(grep y manifest, [], [ignore], [ignore])
AT_CHECK(grep -v x manifest, [], [ignore], [ignore])
AT_CHECK(test -f y)
AT_CHECK(grep 'state D' y, [], [ignore], [ignore])

AT_CLEANUP


