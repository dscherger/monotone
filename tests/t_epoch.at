AT_SETUP([prohibit cross-epoch netsync])
AT_KEYWORDS([netsync])

MONOTONE_SETUP
NETSYNC_SETUP

ADD_FILE(testfile, [version 0 data
])
COMMIT(testbranch)
VER0=`BASE_REVISION`

RUN_NETSYNC(pull, testbranch)

# check that the second db got our epoch
CHECK_SAME_STDOUT(MONOTONE list epochs, MONOTONE2 list epochs)

# check that epochs are only sent for netsync'ed branches
AT_CHECK(MONOTONE2 list epochs, [], [stdout], [ignore])
AT_CHECK(mv stdout orig-epochs)
ADD_FILE(testfile2, [other data
])
COMMIT(otherbranch)
RUN_NETSYNC(pull, testbranch)
AT_CHECK(MONOTONE2 list epochs, [], [stdout], [ignore])
AT_CHECK(mv stdout new-epochs)
AT_CHECK(cmp orig-epochs new-epochs)

ADD_FILE(testfile3, [some data
])
COMMIT(testbranch)
VER1=`BASE_REVISION`

# change the epochs in the first db
AT_CHECK(MONOTONE db rebuild, [], [ignore], [ignore])

# this should *fail* to sync 
NETSYNC_SERVE_START(testbranch)
NETSYNC_CLIENT_RUN(pull, testbranch, 1)
NETSYNC_SERVE_STOP

AT_CHECK(MONOTONE list epochs, [], [stdout])
AT_CHECK(grep testbranch stdout, [0], [ignore])
AT_CHECK(MONOTONE2 list epochs, [], [stdout])
AT_CHECK(grep testbranch stdout, [0], [ignore])
CHECK_DIFFERENT_STDOUT(MONOTONE list epochs, MONOTONE2 list epochs)

# double-check that the revisions didn't change (because otherwise our
# next test is unreliable):
AT_CHECK(MONOTONE cat revision $VER1, [], [ignore], [ignore])
# confirm, we did not get the new revision
AT_CHECK(MONOTONE2 cat revision $VER1, [1], [ignore], [ignore])

AT_CLEANUP
