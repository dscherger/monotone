AT_SETUP([use get_linesep_conv hook])
MONOTONE_SETUP

# This test excercises the common case of wanting to do newline 
# character conversion so that win32 users can have native line endings
# in their working copies.

AT_CHECK(printf "foo\r\n", [], [stdout])
AT_CHECK(mv stdout foo.crlf)

AT_CHECK(printf "foo\r\nfoo\r\n", [], [stdout])
AT_CHECK(mv stdout foofoo.crlf)

AT_DATA(linesep.conv.lua, [
function get_linesep_conv(name)
        return {"LF", "CRLF"}
end
])

AT_DATA(linesep.null.lua, [])

AT_CHECK(cp linesep.conv.lua linesep.lua)

AT_CHECK(cp foo.crlf foo, [], [ignore], [ignore])
AT_CHECK(MONOTONE --debug --rcfile=linesep.lua add foo, [], [], [stderr])
AT_CHECK(mv stderr log.0)
AT_CHECK(MONOTONE --debug --rcfile=linesep.lua --branch=foo commit -m foo, [], [ignore], [stderr])
AT_CHECK(mv stderr log.1)
FOO_REV=`BASE_REVISION`

AT_CHECK(cp foofoo.crlf foo, [], [ignore], [ignore])
AT_CHECK(MONOTONE --debug --rcfile=linesep.lua commit -m foofoo, [], [ignore], [stderr])
AT_CHECK(mv stderr log.2)
FOO_FOO_REV=`BASE_REVISION`

AT_CHECK(MONOTONE --debug --rcfile=linesep.lua update $FOO_REV, [], [ignore], [stderr])
AT_CHECK(mv stderr log.3)
AT_CHECK(cmp foo foo.crlf, [], [ignore], [ignore])

AT_CLEANUP
