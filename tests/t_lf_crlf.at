AT_SETUP([use get_linesep_conv hook])
MONOTONE_SETUP

# This test excercises the common case of wanting to do newline 
# character conversion so that win32 users can have native line endings
# in their working copies.

AT_CHECK(printf "foo\r\n", [], [stdout])
AT_CHECK(mv stdout foo.crlf)
AT_CHECK(printf "foo\n", [], [stdout])
AT_CHECK(mv stdout foo.lf)

AT_CHECK(printf "foo\r\nfoo\r\n", [], [stdout])
AT_CHECK(mv stdout foofoo.crlf)
AT_CHECK(printf "foo\nfoo\n", [], [stdout])
AT_CHECK(mv stdout foofoo.lf)

AT_DATA(linesep.lua, [
function get_linesep_conv(name)
        return {"LF", "CRLF"}
end
])

AT_CHECK(cp foo.crlf foo, [], [ignore], [ignore])
AT_CHECK(MONOTONE --rcfile=linesep.lua add foo, [], [ignore], [ignore])
AT_CHECK(MONOTONE --rcfile=linesep.lua --branch=foo commit -m foo, [], [ignore], [ignore])
FOO_REV=`BASE_REVISION`

AT_CHECK(cp foofoo.crlf foo, [], [ignore], [ignore])
AT_CHECK(MONOTONE --rcfile=linesep.lua commit -m foofoo, [], [ignore], [ignore])
FOO_FOO_REV=`BASE_REVISION`

AT_CHECK(MONOTONE --rcfile=linesep.lua update --revision=$FOO_REV, [], [ignore], [ignore])
AT_CHECK(cmp foo foo.crlf, [], [ignore], [ignore])

AT_CHECK(MONOTONE --rcfile=linesep.lua checkout --revision=$FOO_REV foo_crlf, [], [ignore], [ignore])
AT_CHECK(cmp foo.crlf foo_crlf/foo)

AT_CHECK(MONOTONE --rcfile=linesep.lua checkout --revision=$FOO_FOO_REV foo_foo_crlf, [], [ignore], [ignore])
AT_CHECK(cmp foofoo.crlf foo_foo_crlf/foo)

# no rcfile here
AT_CHECK(MONOTONE checkout --revision=$FOO_REV foo_lf, [], [ignore], [ignore])
AT_CHECK(cmp foo.lf foo_lf/foo)

AT_CHECK(MONOTONE checkout --revision=$FOO_FOO_REV foo_foo_lf, [], [ignore], [ignore])
AT_CHECK(cmp foofoo.lf foo_foo_lf/foo)

AT_CLEANUP
