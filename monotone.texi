\input texinfo   @c -*-texinfo-*-
@c %**start of header
@setfilename monotone.info
@settitle monotone documentation
@setchapternewpage odd
@c %**end of header

@syncodeindex fn cp
@include version.texi

@ifinfo
This manual is for the ``monotone'' distributed version control system.
This edition documents version @value{VERSION}.

Copyright 2003, 2004 Graydon Hoare
Copyright 2004, 2005 Nathaniel Smith
Copyright 2005 Derek Scherger
Copyright 2005 Christof Petig
Copyright 2005 Daniel Carosone
All rights reserved
Licensed to the public under the terms of the GNU FDL (>= 1.1).
See the file COPYING for details
@end ifinfo

@dircategory Programming
@direntry
* monotone: (monotone).         Monotone version control system
@end direntry

@titlepage
@title Monotone
@subtitle A distributed version control system
@author Graydon Hoare

@page
@vskip 0pt plus 1filll
Copyright @copyright{} 2003, 2004 Graydon Hoare
Copyright @copyright{} 2004, 2005, 2006 Nathaniel Smith
Copyright @copyright{} 2005 Derek Scherger
Copyright @copyright{} 2005 Daniel Carosone
All rights reserved
Licensed to the public under the terms of the GNU FDL (>= 1.1).
See the file COPYING for details
@end titlepage

@ifnottex
@node Top
@top Top

Monotone Documentation

Monotone is a distributed version control tool. It can help automate
many tedious and error-prone tasks in group software development.
@itemize
@item
Store multiple versions of files you are working on efficiently.
@item
Transmit changes to files between you and your colleagues.
@item
Merge changes you make with those your colleagues make.
@item
Make notes about your opinion of the quality of versions of files.
@item
Make decisions about using or ignoring versions, depending on the notes
you receive from others.
@end itemize

Please be aware that monotone is a slightly unorthodox version control
tool, and many of its concepts are similar --- but subtly or 
significantly different --- from concepts with similar names in other
version control tools.

@end ifnottex

@menu
* Concepts::            Taxonomy of monotone
* Tutorial::            A detailed example of using monotone
* Advanced Uses::       Going beyond the basics
* CVS Phrasebook::      Transitional guide for CVS users
* Command Reference::   Details of each monotone command
* Hook Reference::      Functions which extend monotone
* Special Topics::      Extra explanations and details
* Man Page::            That other document
* Default hooks::       The standard hook definitions
* Index::               Index of concepts and functions
@end menu


Complete table of contents

@contents

@node    Concepts
@chapter Concepts

This chapter should familiarize you with the concepts, terminology,
and behavior described in the remainder of the user manual.  Please
take a moment to read it, as later sections will assume familiarity
with these terms.

@menu
* Versions of files::         Tracking changes to single files
* Versions of trees::         Tracking changes to collections of files
* Historical records::        Tracking the history of changes
* Certificates::              Tracking extended information
* Storage and workflow::      Saving, sending, and receiving changes
* Forks and merges::          Managing divergence of code
* Branches::                  Intentional divergence and automatic merging
@end menu

@page
@node    Versions of files
@section Versions of files

Suppose you wish to modify a file @file{file.txt} on your
computer. You begin with one @i{version} of the file, load it into
an editor, make some changes, and save the file again. Doing so
produces a new @i{version} of the file. We will say that the older
version of the file was a @dfn{parent}, and the new version is a
@dfn{child}, and that you have performed an @dfn{edit} between the
parent and the child. We may draw the relationship between parent and
child using a graph, where the arrow in the graph indicates the
direction of the edit, from parent to child.

@ifinfo
@smallexample
@group
     +----------------+
     |                |
     | parent version |
     | of file.txt    |
     |                |
     +----------------+
              |
              |
             \|/
              V
     +----------------+
     |                |
     | child version  |
     | of file.txt    |
     |                |
     +----------------+
@end group
@end smallexample
@end ifinfo
@ifnotinfo
@image{figures/parent-child}
@end ifnotinfo

We may want to identify the parent and the child precisely, for sake
of reference. To do so, we will compute a @i{cryptographic hash
function}, called @sc{sha1}, of each version. The details of this
function are beyond the scope of this document; in summary, the @sc{sha1}
function takes a version of a file and produces a short string of 20
bytes, which we will use to uniquely identify the version@footnote{We
say @sc{sha1} values are ``unique'' here, when in fact there is a
small probability of two different versions having the same @sc{sha1}
value. This probability is very small, so we discount it.}.  Now our
graph does not refer to some ``abstract'' parent and child, but rather
to the exact edit we performed between a specific parent and a
specific child.

@ifinfo
@smallexample
@group
     +---------------------------------------------------+
     | parent version                                    |
     | of file.txt                                       |
     |                                                   |
     | SHA1 = 65f1bde1f38262034e7c3457301e8f736ba6381b   |
     +---------------------------------------------------+
              |
              |
             \|/
              V
     +---------------------------------------------------+
     | child version                                     |
     | of file.txt                                       |
     |                                                   |
     | SHA1 = a91566316d208dc405795904f8d67ae3a0e765cb   |
     +---------------------------------------------------+
@end group
@end smallexample
@end ifinfo
@ifnotinfo
@image{figures/parent-child-names-hashes}
@end ifnotinfo

When dealing with versions of files, we will dispense with writing out
``file names'', and identify versions @i{purely} by their @sc{sha1}
value, which we will also refer to as their @dfn{file ID}. Using IDs
alone will often help us accommodate the fact that people often wish
to call files by different names. So now our graph of parent and child
is just a relationship between two versions, only identified by ID.

@ifinfo
@smallexample
@group
     +---------------------------------------------------+
     | parent version                                    |
     | SHA1 = 65f1bde1f38262034e7c3457301e8f736ba6381b   |
     +---------------------------------------------------+
              |
              |
             \|/
              V
     +---------------------------------------------------+
     | child version                                     |
     | SHA1 = a91566316d208dc405795904f8d67ae3a0e765cb   |
     +---------------------------------------------------+
@end group
@end smallexample
@end ifinfo
@ifnotinfo
@image{figures/parent-child-hashes}
@end ifnotinfo

Version control systems, such as monotone, are principally concerned
with the storage and management of @i{multiple} versions of some files.
One way to store multiple versions of a file is, literally, to save a
separate @i{complete} copy of the file, every time you make a
change. When necessary, monotone will save complete copies of your
files, compressed with the @command{zlib} compression format.

@ifinfo
@smallexample
@group
   +--------------+  +--------------+  +--------------+
   |              |  |              |  |              |
   | Hello        |  | Hello,       |  | Why, Hello   |
   |              |  | world!       |  | there world, |    . . .
   |              |  |              |  | how do you   |
   |              |  |              |  | do?          |
   |              |  |              |  |              |
   +--------------+  +--------------+  +--------------+

   \______  ______/  \______  ______/  \______  ______/
          \/                \/                \/
      1st version       2nd version      3rd version
@end group
@end smallexample
@end ifinfo
@ifnotinfo
@image{figures/three-versions}
@end ifnotinfo

Often we find that successive versions of a file are very similar to
one another, so storing multiple complete copies is a waste of
space. In these cases, rather than store @i{complete} copies of each
version of a file, we store a compact description of only the
@i{changes} which are made between versions. Such a description of
changes is called a @dfn{delta}. 

Storing deltas between files is, practically speaking, as good as
storing complete versions of files. It lets you undo changes from a
new version, by applying the delta backwards, and lets your friends
change their old version of the file into the new version, by applying
the delta forwards. Deltas are usually smaller than full files, so
when possible monotone stores deltas, using a modified @command{xdelta}
format. The details of this format are beyond the scope of this
document.

@ifinfo
@smallexample
@group
                        difference
                     between versions
                       _____/\____
   +--------------+   /           \    +--------------+
   |              |                    |              |
   | Hello        |    +[, world!]     | Hello,       |
   |              |                    | world!       |
   |              |                    |              |
   |              |                    |              |
   |              |                    |              |
   +--------------+                    +--------------+

   \______  ______/                    \______  ______/
          \/                                  \/
     1st version                         2nd version
@end group
@end smallexample
@end ifinfo
@ifnotinfo
@image{figures/difference-between-versions}
@end ifnotinfo

@page
@node    Versions of trees
@section Versions of trees

After you have made many different files, you may wish to capture a
``snapshot'' of the versions of all the files in a particular collection.
Since files are typically collected into @i{trees} in a file system,
we say that you want to capture a @i{version of your tree}. Doing
so will permit you to undo changes to multiple files at once, or send
your friend a @i{set} of changes to many files at once.

To make a snapshot of a tree, we begin by writing a special file
called a @dfn{manifest}. In fact, monotone will write this file for
us, but we could write it ourselves too. It is just a plain text
file. Each line of a manifest file contains two columns. In the first
column we write the ID of a file in your tree, and in the second
column we write the path to the file, from the root of our tree to the
filename.

@ifinfo
@smallexample
@group
+--------------------------------------------------------------+
|                                                              |
|  f2e5719b975e319c2371c98ed2c7231313fac9b5  fs/readdir.c      |
|  81f0c9a0df254bc8d51bb785713a9f6d0b020b22  fs/read_write.c   |
|  943851e7da46014cb07473b90d55dd5145f24de0  fs/pipe.c         |
|  ddc2686e000e97f670180c60a3066989e56a11a3  fs/open.c         |
|  295d276e6c9ce64846d309a8e39507bcb0a14248  fs/namespace.c    |
|  71e0274f16cd68bdf9a2bf5743b86fcc1e597cdc  fs/namei.c        |
|  1112c0f8054cebc9978aa77384e3e45c0f3b6472  fs/iobuf.c        |
|  8ddcfcc568f33db6205316d072825d2e5c123275  fs/inode.c        |
|                                                              |
+--------------------------------------------------------------+

\_____________________________  _______________________________/
                              \/
                          an example
                         manifest file
@end group
@end smallexample
@end ifinfo
@ifnotinfo
@image{figures/manifest}
@end ifnotinfo

Now we note that a manifest is itself a file. Therefore a manifest can
serve as input to the @sc{sha1} function, and thus every manifest has
an ID of its own. By calculating the @sc{sha1} value of a manifest, we
capture the @i{state of our tree} in a single @dfn{manifest ID}. In
other words, the ID of the manifest essentially captures all the IDs
and file names of every file in our tree, combined. So we may treat
manifests and their IDs as @i{snapshots} of a tree of files, though
lacking the actual contents of the files themselves.

@ifinfo
@smallexample
@group
  +--------------------------+
  |   int readdir(...) @{     |
  |     ...                  |
  |   @}                      |
  +--------------------------+

  \____________  ___________/
               \/
              SHA1
               ||
+--------------||----------------------------------------------+
|              \/                                              |
|  f2e5719b975e319c2371c98ed2c7231313fac9b5  fs/readdir.c      |
|  81f0c9a0df254bc8d51bb785713a9f6d0b020b22  fs/read_write.c   |
|  943851e7da46014cb07473b90d55dd5145f24de0  fs/pipe.c         |
|                   . . .                       . . .          |
+--------------------------------------------------------------+

\_____________________________  _______________________________/
                              \/
                             SHA1
                              ||
                              ||
                              \/
                         manifest ID:
           a2eeaa28574141a7d48fa1cc2802070150b93ec4
@end group
@end smallexample
@end ifinfo
@ifnotinfo
@image{figures/file-id-manifest-id}
@end ifnotinfo

As with versions of files, we may decide to store manifests in their
entirety, or else we may store only a compact description of changes
which occur between different versions of manifests. As with files,
when possible monotone stores compact descriptions of changes between
manifests; when necessary it stores complete versions of manifests.

@page
@node    Historical records
@section Historical records

Suppose you sit down to edit some files. Before you start working, you
may record a manifest of the files, for reference sake. When you
finish working, you may record another manifest. These ``before and
after'' snapshots of the tree of files you worked on can serve as
historical records of the set of changes, or @dfn{changeset}, that you
made. In order to capture a ``complete'' view of history -- both the
changes made and the state of your file tree on either side of those
changes -- monotone builds a special composite file called a
@dfn{revision} each time you make changes. Like manifests, revisions
are ordinary text files which can be passed through the @sc{sha1}
function and thus assigned a @dfn{revision ID}.

@ifinfo
@smallexample
@group
+--------------------------------------------------------------+
|                                                              |
|                 ... content of revision ...                  |
|                                                              |
+--------------------------------------------------------------+

\_____________________________  _______________________________/
                              \/
                             SHA1
                              ||
                              \/
                         revision ID:
           1c83997e7ab40c0df47554c81b7d4e7ee691eb0d
@end group
@end smallexample
@end ifinfo
@ifnotinfo
@image{figures/revision}
@end ifnotinfo

The content of a revision includes one or more changesets.  These
changesets make reference to file IDs, to describe how the tree changed.
The revision also contains manifest IDs, as another way of describing
the tree ``before and after'' the changeset --- storing this information
in two forms allows monotone to detect any bugs or corrupted data before
they can enter your history.  Finally and crucially, revisions also make
reference to @i{other revision IDs}. This fact -- that revisions include
the IDs of other revisions -- causes the set of revisions to join
together into a historical @i{chain of events}, somewhat like a ``linked
list''.  Each revision in the chain has a unique ID, which includes
@i{by reference} all the revisions preceding it. Even if you undo a
changeset, and return to a previously-visited manifest ID during the
course of your edits, each revision will incorporate the ID of its
predecessor, thus forming a new unique ID for each point in history.

@ifinfo
@smallexample
@group
                              ||
+-----------------------------||-------------------------------+
|                             \/                               |
|  old_revision: 86d06a095529dca003ad62715dc2be7873edade0      |
|    change_set:           .  .  .                             |
|  old_manifest: 1b24ba8b8dc3ff9c87b5198315eced1b279dc74e  <----- manifest ID 
|  new_manifest: dbd022dc423fd7f473e0fa79842cd9901cc2dd69  <----- manifest ID 
|                                                              |
+--------------------------------------------------------------+

\_____________________________  _______________________________/
                              \/
                             SHA1
                              ||
+-----------------------------||-------------------------------+
|                             \/                               |
|  old_revision: f45add3bfb21cb459d99b6a9c0111df75f6d9f85      |
|    change_set:           .  .  .                             |
|  old_manifest: dbd022dc423fd7f473e0fa79842cd9901cc2dd69  <----- manifest ID 
|  new_manifest: 8a05c60422770bbf49a3192c2367ddaa066538ca  <----- manifest ID 
|                                                              |
+--------------------------------------------------------------+

\_____________________________  _______________________________/
                              \/
                             SHA1
                              ||
                              \/
                         revision ID:
           1c83997e7ab40c0df47554c81b7d4e7ee691eb0d
@end group
@end smallexample
@end ifinfo
@ifnotinfo
@image{figures/revision-chaining}
@end ifnotinfo

@page
@node    Certificates
@section Certificates

Often, you will wish to make a @i{statement} about a revision, such as
stating the reason that you made some changes, or stating the time at
which you made the changes, or stating that the revision passes a test
suite. Statements such as these can be thought of, generally, as a
bundle of information with three parts:

@itemize
@item
an @i{ID}, indicating which revision you are making a statement about
@item
a @i{name} indicating the type of statement you are making, such as
``changelog'', ``date'' or ``testresult''
@item
a @i{value} indicating the remaining detail of the statement, such as
``fixed a bug'', ``March 9th'' or ``1''
@end itemize


For example, if you want to say that a particular revision was
composed on April 4, 2003, you might make a statement like this:

@ifinfo
@smallexample
@group
      +------------------------------------------------------+
      |  revision ID                                         |
      |  a2eeaa28574141a7d48fa1cc2802070150b93ec4            |
      +--------------------------+---------------------------+
      |  statement name          |  statement value          |
      |  "date"                  |  "2003-04-04T07:39:51"    |
      +--------------------------+---------------------------+
@end group
@end smallexample
@end ifinfo
@ifnotinfo
@image{figures/statement}
@end ifnotinfo

In an ideal world, these are all the parts of a statement we would
need in order to go about our work. In the real world, however, there
are sometimes malicious people who would make false or misleading
statements; so we need a way to verify that a particular person made a
particular statement about a revision. We therefore will add two more
pieces of information to our bundle:

@itemize
@item
a @i{key} which identifies the person making a statement
@item
a @i{signature} --- just a large number with particular properties ---
certifying the fact that the person made the statement
@end itemize

When these 2 items accompany a statement, we call the total bundle of
5 items a @dfn{certificate}, or @i{cert}. A cert makes a statement in
a secure fashion. The security of the signature in a cert is derived
from the @sc{rsa} cryptography system, the details of which are beyond
the scope of this document.

@ifinfo
@smallexample
@group
      +------------------------------------------------------+
      |  revision ID                                         |
      |  a2eeaa28574141a7d48fa1cc2802070150b93ec4            |
      +--------------------------+---------------------------+
      |  cert name               |  cert value               |
      |  "date"                  |  "2003-04-04T07:39:51"    |
      +--------------------------+---------------------------+
      |  signed by key           |  signature                |
      |  "jrh@@example.com"       |  "a02380def....0983fe90"  |
      +--------------------------+---------------------------+
@end group
@end smallexample
@end ifinfo
@ifnotinfo
@image{figures/cert}
@end ifnotinfo

Monotone uses certs extensively. Any ``extra'' information which needs
to be stored, transmitted or retrieved --- above and beyond files,
manifests, and revisions --- is kept in the form of certs. This
includes change logs, time and date records, branch membership,
authorship, test results, and more. When monotone makes a decision
about storing, transmitting, or extracting files, manifests, or
revisions, the decision is often based on certs it has seen, and the
trustworthiness you assign to those certs.

The @sc{rsa} cryptography system --- and therefore monotone itself ---
requires that you exchange special ``public'' numbers with your
friends, before they will trust certificates signed by you. These
numbers are called @dfn{public keys}. Giving someone your public key
does not give them the power to @i{impersonate} you, only to verify
signatures made by you. Exchanging public keys should be done over a
trusted medium, in person, or via a trusted third party. Advanced
secure key exchange techniques are beyond the scope of this document.

@page
@node    Storage and workflow
@section Storage and workflow

Monotone moves information in and out of four different types of
storage:

@itemize
@item
a @i{keystore} in your home directory
@item
a @i{workspace} in the local file system
@item
a @i{local database} in the local file system
@item
a @i{remote database} elsewhere on the internet
@end itemize

The @dfn{keystore} is a directory @file{.monotone/keys} in your home directory
which contains copies of all your private keys. Each key is stored in a file
whose name is the key identifier with some characters converted to underscores.
When you use a key to sign a cert, the public half of that key is copied into
your local database along with the cert.

All information passes @emph{through} your local database, en route to
some other destination. For example, when changes are made in a
workspace, you may save those changes to your database, and later
you may synchronize your database with someone else's. Monotone will
not move information directly between a workspace and a remote
database, or between workspaces. Your local database is always
the ``switching point'' for communication.

@ifinfo
@smallexample
@group
             pull, push, sync
       (untrusted network exchanges)
            _________/\________
           /                   \

    +-------------+      +------------+      +-------------+
    |             |      |            |      |             |
    |  remote db  | <==> |  local db  | <==> |  workspace  |
    |             |      |            |      |             |
    +-------------+      +------------+      +-------------+

                                \________  _______/
                                         \/
                                  commit, update
                            (certified local exchanges)
@end group
@end smallexample
@end ifinfo
@ifnotinfo
@image{figures/general-workflow}
@end ifnotinfo

A @dfn{workspace} is a tree of files in your file system, arranged
according to the list of file paths and IDs in a particular
manifest. A special directory called @file{MT} exists in the root of
any workspace. Monotone keeps some special files in the @file{MT}
directory, in order to track changes you make to your workspace.

Aside from the special @file{MT} directory, a workspace is just a
normal tree of files. You can directly edit the files in a working
copy using a plain text editor or other program; monotone will
automatically notice when you make any changes. If you wish to add
files, remove files, or move files within your workspace, you must
tell monotone explicitly what you are doing, as these actions cannot
be deduced.

If you do not yet have a workspace, you can @dfn{check out} a
workspace from a database, or construct one from scratch and
@dfn{add} it into a database. As you work, you will occasionally
@dfn{commit} changes you have made in a workspace to a database,
and @dfn{update} a workspace to receive changes that have arrived
in a database. Committing and updating take place purely between a
database and a workspace; the network is not involved.

@ifinfo
@smallexample
@group
   -----------------     check out,      workspace
  (                 )    or update      +----------------
   -----------------     ---------->    |
  |                 |                   |  src/func.c
  |      local      |   <----------     |  src/func.h
  |     database    |    add,           |  src/main.c
  |                 |    or commit      |  Makefile
  \_________________/                   |  MT/
                                        |
@end group
@end smallexample
@end ifinfo
@ifnotinfo
@image{figures/local-workflow}
@end ifnotinfo

A @dfn{database} is a single, regular file. You can copy or back it up
using standard methods. Typically you keep a database in your home
directory. Databases are portable between different machine types. You
can have multiple databases and divide your work between them, or keep
everything in a single database if you prefer. You can dump portions of
your database out as text, and read them back into other databases, or
send them to your friends.  Underneath, databases are accessed using a
standard, robust data manager, which makes using even very large
databases efficient.  In dire emergencies, you can directly examine and
manipulate a database using a simple SQL interface.

A database contains many files, manifests, revisions, and
certificates, some of which are not immediately of interest, some of
which may be unwanted or even false. It is a collection of information
received from network servers, workspaces, and other
databases. You can inspect and modify your databases without affecting
your workspaces, and vice-versa.

Monotone knows how to exchange information in your database with other
remote databases, using an interactive protocol called @dfn{netsync}.
It supports three modes of exchange: pushing, pulling, and
synchronizing. A @dfn{pull} operation copies data from a remote
database to your local database. A @dfn{push} operation copies data
from your local database to a remote database. A @dfn{sync} operation
copies data both directions. In each case, only the data missing from
the destination is copied. The netsync protocol calculates the data to
send ``on the fly'' by exchanging partial hash values of each
database.

@ifinfo
@smallexample
@group
  -----------------                    ----------------- 
 (                 )                  (                 )
  -----------------    --- pull --->   -----------------       
 |                 |                  |                 |
 |      remote     |  <--- sync --->  |      local      |
 |     database    |                  |     database    |
 |                 |  <--- push ---   |                 |
 \_________________/                  \_________________/
@end group
@end smallexample
@end ifinfo
@ifnotinfo
@image{figures/network-workflow}
@end ifnotinfo

In general, work flow with monotone involves 3 distinct stages:

@itemize
@item
When you @i{commit} changes from your workspace to your database,
your database stores the changes but does not communicate with the
network. Your commits happen immediately, without consulting any other
party, and do not require network connectivity.

@item
When you are ready to @i{exchange} work with someone else, you can
push, pull, or sync with other databases on the network. When you talk
to other servers on the network, your database may change, but your
workspace will not. In fact, you do not need a workspace at all
when exchanging work.

@item
When you @i{update} your workspace, some (but not all) of the
changes which your database received from the network are applied to
your workspace. The network is not consulted during updates.
@end itemize

The last stage of workflow is worth clarifying: monotone does
@emph{not} blindly apply all changes it receives from a remote
database to your workspace.  Doing so would be very dangerous,
because remote databases are not always trustworthy systems. Rather,
monotone evaluates the certificates it has received along with the
changes, and decides which particular changes are safe and desirable
to apply to your workspace.

You can always adjust the criteria monotone uses to judge the
trustworthiness and desirability of changes in your database. But keep
in mind that it always uses @emph{some} criteria; receiving changes
from a remote server is a @emph{different} activity than applying
changes to a workspace. Sometimes you may receive changes which
monotone judges to be untrusted or bad; such changes may stay in your
database but will @emph{not} be applied to your workspace.

Remote databases, in other words, are just untrusted ``buckets'' of
data, which you can trade with promiscuously. There is no trust
implied in communication.

@page
@node    Forks and merges
@section Forks and merges

So far we have been talking about revisions as though each logically
follows exactly one revision before it, in a simple sequence of
revisions.

@ifinfo
@smallexample
@group
       +-----------------------+
       |  parent revision      |
       +-----------------------+
                |
                |
       +-----------------------+
       |  child revision       |
       +-----------------------+
                |
                |
       +-----------------------+
       |  grandchild revision  |
       +-----------------------+
@end group
@end smallexample
@end ifinfo
@ifnotinfo
@image{figures/linear-history}
@end ifnotinfo

This is a rosy picture, but sometimes it does not work out this
way. Sometimes when you make new revisions, other people are
@i{simultaneously} making new revisions as well, and their revisions
might be derived from the same parent as yours, or contain different
changesets. Without loss of generality, we will assume simultaneous
edits only happen two-at-a-time; in fact many more edits may happen at
once but our reasoning will be the same.

We call this situation of simultaneous edits a @dfn{fork}, and will
refer to the two children of a fork as the @i{left child} and @i{right
child}. In a large collection of revisions with many people editing
files, especially on many different computers spread all around the
world, forks are a common occurrence.

@ifinfo
@smallexample
@group
             +-----------------+
             | parent revision |
             +-----------------+
                    |   |
           +--------+   +---------+
           |                      |
     +-------------+     +--------------+
     | left child  |     | right child  |
     +-------------+     +--------------+
@end group
@end smallexample
@end ifinfo
@ifnotinfo
@image{figures/fork}
@end ifnotinfo

If we analyze the changes in each child revision, we will often find
that the changeset between the parent and the left child are unrelated
to the changeset between the parent and the right child. When this
happens, we can usually @dfn{merge} the fork, producing a common
grandchild revision which contains both changesets.

@ifinfo
@smallexample
@group
             +-----------------+
             | parent revision |
             +-----------------+
                    |   |
           +--------+   +---------+
           |                      |
     +-------------+     +--------------+
     | left child  |     | right child  |
     +-------------+     +--------------+
           |                      |
           +--------+   +---------+
                    |   |
             +-----------------+
             | merged revision |
             +-----------------+
@end group
@end smallexample
@end ifinfo
@ifnotinfo
@image{figures/merge}
@end ifnotinfo

@page
@node    Branches
@section Branches

Sometimes, people intentionally produce forks which are @emph{not
supposed to be merged}; perhaps they have agreed to work independently
for a time, or wish to change their files in ways which are not
logically compatible with each other. When someone produces a fork
which is supposed to last for a while (or perhaps permanently) we say
that the fork has produced a new @dfn{branch}. Branches tell monotone
which revisions you would like to merge, and which you would like to
keep separate.

You can see all the available branches using @code{monotone list branches}.

Branches are indicated with certs.  The cert name @code{branch} is
reserved for use by monotone, for the purpose of identifying the
revisions which are members of a branch. A @code{branch} cert has a
symbolic ``branch name'' as its value. When we refer to ``a branch'',
we mean all revisions with a common branch name in their @code{branch}
certs.

For example, suppose you are working on a program called ``wobbler''.
You might develop many revisions of wobbler and then decide to split
your revisions into a ``stable branch'' and an ``unstable branch'', to
help organize your work. In this case, you might call the new branches
``wobbler-stable'' and ``wobbler-unstable''. From then on, all
revisions in the stable branch would get a cert with name @code{branch}
and value @code{wobbler-stable}; all revisions in the unstable branch
would get a cert with name @code{branch} and value
@code{wobbler-unstable}. When a @code{wobbler-stable} revision forks,
the children of the fork will be merged. When a
@code{wobbler-unstable} revision forks, the children of the fork will
be merged. However, the @code{wobbler-stable} and
@code{wobbler-unstable} branches will not be merged together, despite
having a common ancestor.

@ifinfo
@smallexample
@group
                   +--------------------------+
                   | common ancestor revision |
                   +--------------------------+
                          |          |
                +---------+          +---------+
                |                              |
       +-----------------+            +-------------------+           
       | stable revision |            | unstable revision |           
       +-----------------+            +-------------------+           
              | |                               | |                   
      +-------+ +-------+               +-------+ +-------+           
      |                 |               |                 |           
+-------------+ +--------------+  +---------------+ +----------------+
| left stable | | right stable |  | left unstable | | right unstable |
|   child     | |     child    |  |   child       | |     child      |
+-------------+ +--------------+  +---------------+ +----------------+
      |                  |              |                  |          
      +-------+ +--------+              +-------+ +--------+          
              | |                               | |                   
       +----------------+                +------------------+         
       | merged stable  |                | merged unstable  |         
       |   revision     |                |     revision     |         
       +----------------+                +------------------+ 

\_____________  _______________/  \_______________  _________________/
              \/                                  \/
         stable branch                     unstable branch
@end group
@end smallexample
@end ifinfo
@ifnotinfo
@image{figures/two-branches}
@end ifnotinfo

For each branch, the set of revisions with @emph{no children} is
called the @dfn{heads} of the branch. Monotone can automatically
locate, and attempt to merge, the heads of a branch. If it fails to
automatically merge the heads, it may ask you for assistance or else
fail cleanly, leaving the branch alone.

For example, if a fork's left child has a child of its own (a ``left
grandchild''), monotone will merge the fork's right child with the
left grandchild, since those revisions are the heads of the branch. It
will not merge the left child with the right child, because the left
child is not a member of the heads.

@ifinfo
@smallexample
@group
               +-----------------+
               | parent revision |
               +-----------------+
                      |       |
             +--------+       |
             |                |
       +-------------+        |
       | left child  |        |
       +-------------+        |
             |                |         
*************|****************|************
*            |                |           *
*  +-----------------+  +-------------+   *
*  | left grandchild |  | right child |   *  the heads of the branch
*  +-----------------+  +-------------+   *    (before the merge)
*            |                |           *
*************|****************|************
             |                |         
             +--------+   +---+
                      |   |
               +-----------------+
               | merged revision |
               +-----------------+
@end group
@end smallexample
@end ifinfo
@ifnotinfo
@image{figures/branch-heads}
@end ifnotinfo

When there is only one revision in the heads of a branch, we say that
@i{the heads are merged}, or more generally that @i{the branch is
merged}, since the heads is the logical set of candidates for any
merging activity. If there are two or more revisions in the heads of a
branch, and you ask to merge the branch, monotone will merge them
two-at-a-time until there is only one.

@subsection Branch Names

The branch names used in the above section are fine for an example, but
they would be bad to use in a real project.  The reason is, monotone
branch names must be @emph{globally} unique, over all branches in the
world.  Otherwise, bad things can happen.  Fortunately, we have a handy
source of globally unique names --- the DNS system.

When naming a branch, always prepend the reversed name of a host that
you control or are otherwise authorized to use.  For example, monotone
development happens on the branch @code{net.venge.monotone}, because
@code{venge.net} belongs to monotone's primary author.  The idea is that
this way, you can coordinate with other people using a host to make sure
there are no conflicts --- in the example, monotone's primary author can
be certain that no-one else using @code{venge.net} will start up a
different program named @code{monotone}.  If you work for Yoyodyne,
Inc. (owners of yoyodyne.com), then all your branch names should look
like @code{com.yoyodyne.@emph{something}}.

What the @code{@emph{something}} part looks like is up to you, but
usually the first part is the project name (the @code{monotone} in
@code{net.venge.monotone}), and then possibly more stuff after that to
describe a particular branch.  For example, monotone's win32 support
was initially developed on the branch @code{net.venge.monotone.win32}.

(For more information, see @ref{Naming Conventions}.)

@page
@node    Tutorial
@chapter Tutorial

This chapter illustrates the basic uses of monotone by means of an
example, fictional software project.

@section Issues
Before we walk through the tutorial, there are two minor issues to
address: standard options and revision selectors.

@subsection Standard Options
Before operating monotone, two important command-line options should
be explained.

@itemize
@item
Most commands operate on a @i{database}, which is selected with
the @option{--db} option.
@item
Many commands operate on a subset of the database, called a
@i{branch}, which is selected with the @option{--branch} option.
@end itemize

Monotone will cache the settings for these options in your working
copy, so ordinarily once you have checked out a project, you will not
need to specify them again.  We will therefore only mention these
arguments in the first example.

@subsection Revision Selectors
Many commands require you to supply 40-character @sc{sha1} values as
arguments, which identify revisions. These ``revision IDs'' are
tedious to type, so monotone permits you to supply ``revision
selectors'' rather than complete revision IDs. Selectors are a more
``human friendly'' way of specifying revisions by combining certificate
values into unique identifiers. This ``selector'' mechanism can be
used anywhere a revision ID would normally be used. For details on
selector syntax, see @ref{Selectors}.

We are now ready to explore our fictional project.

@page
@section The Fictional Project

Our fictional project involves 3 programmers cooperating to write
firmware for a robot, the JuiceBot 7, which dispenses fruit juice. The
programmers are named Jim, Abe and Beth.

@itemize
@item
Jim lives in Japan, and owns JuiceBot Inc. You will know when we're talking
about Jim, because everything he does involves the letter ``j''.
@item
Abe lives in Australia and writes code related to apple juice. You will
know when we're talking about Abe, because everything he does involves
the letter ``a''.
@item
Beth lives in Brazil and writes code related to banana juice. You will
know when we're talking about Beth, because everything she does involves
the letter ``b''.
@end itemize

In our example the programmers work privately on laptops, and are
usually @emph{disconnected} from the network. They share no storage
system. Thus when each programmer enters a command, it affects only
his or her own computer, unless otherwise stated.

In the following, our fictional project team will work through several
version control tasks. Some tasks must be done by each member of our
example team; other tasks involve only one member.

@menu
* Creating a Database::
* Generating Keys::
* Starting a New Project::
* Adding Files::
* Committing Work::
* Basic Network Service::
* Synchronising Databases::
* Making Changes::
* Dealing with a Fork::
* Branching and Merging::
* Network Service Revisited::
@end menu


@page
@node    Creating a Database
@section Creating a Database

The first step Jim, Abe and Beth each need to perform is to create a
new database. This is done with the @code{monotone db init} command,
providing a @option{--db} option to specify the location of the new
database. Each programmer creates their own database, which will
reside in their home directory and store all the revisions, files and
manifests they work on. Monotone requires this step as an explicit
command, to prevent spurious creation of databases when an invalid
@option{--db} option is given.

In real life, most people prefer to keep one database for each project
they work on.  If we followed that convention here in the tutorial,
though, then all the databases would be called @code{juicebot.db}, and
that would make things more confusing to read.  So instead, we'll have
them each name their database after themselves.

Thus Jim issues the command:

@smallexample
@group
$ monotone db init --db=~/jim.db
@end group
@end smallexample

Abe issues the command:

@smallexample
@group
$ monotone db init --db=~/abe.db
@end group
@end smallexample

And Beth issues the command:

@smallexample
@group
$ monotone db init --db=~/beth.db
@end group
@end smallexample

@page
@node    Generating Keys
@section Generating Keys

Now Jim, Abe and Beth must each generate an @sc{rsa} key pair for
themselves. This step requires choosing a key identifier. Typical key
identifiers are similar to email addresses, possibly modified with
some prefix or suffix to distinguish multiple keys held by the same
owner. Our example programmers will use their email addresses at the
fictional ``juicebot.co.jp'' domain name. When we ask for a key to be
generated, monotone will ask us for a passphrase. This phrase is used
to encrypt the key when storing it on disk, as a security measure.

Jim does the following:

@smallexample
@group
$ monotone genkey jim@@juicebot.co.jp
monotone: generating key-pair 'jim@@juicebot.co.jp'
enter passphrase for key ID [jim@@juicebot.co.jp] : @i{<Jim enters his passphrase>}
confirm passphrase for key ID [jim@@juicebot.co.jp]: @i{<Jim confirms his passphrase>}
monotone: storing key-pair 'jim@@juicebot.co.jp' in /home/jim/.monotone/keys
@end group
@end smallexample

Abe does something similar:

@smallexample
@group
$ monotone genkey abe@@juicebot.co.jp
monotone: generating key-pair 'abe@@juicebot.co.jp'
enter passphrase for key ID [abe@@juicebot.co.jp] : @i{<Abe enters his passphrase>}
confirm passphrase for key ID [abe@@juicebot.co.jp]: @i{<Abe confirms his passphrase>}
monotone: storing key-pair 'abe@@juicebot.co.jp' in /home/abe/.monotone/keys
@end group
@end smallexample

as does Beth:

@smallexample
@group
$ monotone genkey beth@@juicebot.co.jp
monotone: generating key-pair 'beth@@juicebot.co.jp'
enter passphrase for key ID [beth@@juicebot.co.jp] : @i{<Beth enters her passphrase>}
confirm passphrase for key ID [beth@@juicebot.co.jp]: @i{<Beth confirms her passphrase>}
monotone: storing key-pair 'beth@@juicebot.co.jp' in /home/beth/.monotone/keys
@end group
@end smallexample

Each programmer has now generated a key pair and placed it in their
keystore. Each can list the keys in their keystore, to ensure
the correct key was generated. For example, Jim might see this:

@smallexample
@group
$ monotone list keys

[public keys]
9e9e9ef1d515ad58bfaa5cf282b4a872d8fda00c jim@@juicebot.co.jp   (*)
(*) - only in /home/jim/.monotone/keys/


[private keys]
771ace046c27770a99e5fddfa99c9247260b5401 jim@@juicebot.co.jp

@end group
@end smallexample

The hexadecimal string printed out before each key name is a
@emph{fingerprint} of the key, and can be used to verify that the key
you have stored under a given name is the one you intended to
store. Monotone will never permit one keystore to store two keys with
the same name or the same fingerprint.

This output shows one private and one public key stored under the name
@code{jim@@juicebot.co.jp}, so it indicates that Jim's key-pair has been
successfully generated and stored. On subsequent commands, Jim will need
to re-enter his passphrase in order to perform security-sensitive
tasks. Jim isn't very worried about security (and, more importantly, it
simplifies the tutorial text to skip the passphrase prompts) so he
decides to store his passphrase in his @code{monotonerc} file.  He does
this by writing a @emph{hook function} which returns the passphrase:

@smallexample
@group
$ mkdir ~/.monotone
$ cat >>~/.monotone/monotonerc
function get_passphrase(keypair_id)
  return "jimsekret"
end
^D
@end group
@end smallexample

Now whenever monotone needs his passphrase, it will call this function
instead of prompting him to type it.  Note that we are appending the new
hook to the (possibly existing) file.  We do this to avoid losing other
changes by mistake; therefore, be sure to check that no other
@code{get_passphrase} function appears in the configuration file.

Abe and Beth do the same, with their secret passphrases.

@page
@node    Starting a New Project
@section Starting a New Project

Before he can begin work on the project, Jim needs to create a
@i{workspace} --- a directory whose contents monotone will keep track
of.  Often, one works on projects that someone else has started, and
creates workspaces with the @code{checkout} command, which you'll
learn about later.  Jim is starting a new project, though, so he does
something a little bit different.  He uses the @code{monotone setup}
command to create a new workspace.

This command creates the named directory (if it doesn't already exist),
and creates the @file{MT} directory within it.  The @file{MT} directory
is how monotone recognizes that a directory is a workspace, and
monotone stores some bookkeeping files within it.  For instance, command
line values for the @option{--db}, @option{--branch} or @option{--key}
options to the @code{setup} command will be cached in a file called
@file{MT/options}, so you don't have to keep passing them to monotone
all the time.

He chooses @code{jp.co.juicebot.jb7} as a branch name. (See
@ref{Naming Conventions} for more information about appropriate branch
names.)  Jim then creates his workspace:

@smallexample
@group
/home/jim$ monotone --db=jim.db --branch=jp.co.juicebot.jb7 setup juice
/home/jim$ cd juice
/home/jim/juice$
@end group
@end smallexample

Notice that Jim has changed his current directory to his newly created
workspace. For the rest of this example we will assume that everyone
issues all further monotone commands from their workspace 
directories.

@page
@node    Adding Files
@section Adding Files

Next Jim decides to add some files to the project. He writes up 
a file containing the prototypes for the JuiceBot 7:

@smallexample
@group
$ mkdir include
$ cat >include/jb.h
/* Standard JuiceBot hw interface */

#define FLOW_JUICE 0x1
#define POLL_JUICE 0x2
int spoutctl(int port, int cmd, void *x);

/* JuiceBot 7 API */

#define APPLE_SPOUT 0x7e
#define BANANA_SPOUT 0x7f
void dispense_apple_juice ();
void dispense_banana_juice ();
^D
@end group
@end smallexample

Then adds a couple skeleton source files which he wants Abe and Beth
to fill in:

@smallexample
@group
$ mkdir src
$ cat >src/apple.c
#include "jb.h"

void 
dispense_apple_juice()
@{
  /* Fill this in please, Abe. */
@}
^D
$ cat >src/banana.c
#include "jb.h"

void 
dispense_banana_juice()
@{
  /* Fill this in please, Beth. */
@}
^D
@end group
@end smallexample

Now Jim tells monotone to add these files to its record of his working
copy. He specifies one filename and one directory; monotone
recursively scans the directory and adds all its files.

@smallexample
@group
$ monotone add include/jb.h src
monotone: adding include/jb.h to workspace add set
monotone: adding src/apple.c to workspace add set
monotone: adding src/banana.c to workspace add set
@end group
@end smallexample

This command produces a record of Jim's intentions in a special file
called @file{MT/work}, stored in the workspace. The file is plain
text:

@smallexample
@group
$ cat MT/work
add_file "include/jb.h"

add_file "src/apple.c"

add_file "src/banana.c"
@end group
@end smallexample

Jim then gets up from his machine to get a coffee. When he returns
he has forgotten what he was doing. He asks monotone:

@smallexample
@group
$ monotone status

new_manifest [2098eddbe833046174de28172a813150a6cbda7b]

old_revision []
old_manifest []

add_file "include/jb.h"

add_file "src/apple.c"

add_file "src/banana.c"

patch "include/jb.h"
 from []
   to [3b12b2d0b31439bd50976633db1895cff8b19da0]

patch "src/apple.c"
 from []
   to [2650ffc660dd00a08b659b883b65a060cac7e560]

patch "src/banana.c"
 from []
   to [e8f147e5b4d5667f3228b7bba1c5c1e639f5db9f]

@end group
@end smallexample

The output of this command tells Jim that his edits, so far,
constitute only the addition of some files. In the output we can see
one peculiarity of monotone's changeset format. The peculiarity is that
when monotone records a ``new file'', it actually records two separate
events: the addition of an empty file to the workspace, and a patch
of that file from empty to its intended contents. 

Jim wants to see the actual details of the files he added, however, so
he runs a command which prints out the status @emph{and} a GNU
``unified diff'' of the patches involved in the changeset:

@smallexample
@group
$ monotone diff
# 
# add_file "include/jb.h"
# 
# add_file "src/apple.c"
# 
# add_file "src/banana.c"
# 
# patch "include/jb.h"
#  from []
#    to [3b12b2d0b31439bd50976633db1895cff8b19da0]
# 
# patch "src/apple.c"
#  from []
#    to [2650ffc660dd00a08b659b883b65a060cac7e560]
# 
# patch "src/banana.c"
#  from []
#    to [e8f147e5b4d5667f3228b7bba1c5c1e639f5db9f]
# 
============================================================================
--- include/jb.h
+++ include/jb.h 3b12b2d0b31439bd50976633db1895cff8b19da0
@@ -0,0 +1,13 @@
+/* Standard JuiceBot hw interface */
+
+#define FLOW_JUICE 0x1
+#define POLL_JUICE 0x2
+#define SET_INTR 0x3
+int spoutctl(int port, int cmd, void *x);
+
+/* JuiceBot 7 API */
+
+#define APPLE_SPOUT 0x7e
+#define BANANA_SPOUT 0x7f
+void dispense_apple_juice ();
+void dispense_banana_juice ();
============================================================================
--- src/apple.c
+++ src/apple.c 2650ffc660dd00a08b659b883b65a060cac7e560
@@ -0,0 +1,7 @@
+#include "jb.h"
+
+void 
+dispense_apple_juice()
+@{
+  /* Fill this in please, Abe. */
+@}
============================================================================
--- src/banana.c
+++ src/banana.c e8f147e5b4d5667f3228b7bba1c5c1e639f5db9f
@@ -0,0 +1,7 @@
+#include "jb.h"
+
+void 
+dispense_banana_juice()
+@{
+  /* Fill this in please, Beth. */
+@}
@end group
@end smallexample

@page
@node    Committing Work
@section Committing Work

Satisfied with the work he's done, Jim wants to save his changes.  He
then commits his workspace, which causes monotone to process the
@file{MT/work} file and record the file contents, manifest, and
revision into the database. Since he provided a branch name when he
ran @command{setup}, monotone will use this as the default branch name
when he commits.


@smallexample
@group
$ monotone commit --message="initial checkin of project"
monotone: beginning commit on branch 'jp.co.juicebot.jb7'
monotone: committed revision 2e24d49a48adf9acf3a1b6391a080008cbef9c21
@end group
@end smallexample

When monotone committed Jim's revision, erased the @file{MT/work} file,
and wrote a new file called @file{MT/revision}, which contains the
workspace's new base revision ID. Jim can use this revision ID in the
future, as an argument to the @command{checkout} command, if he wishes
to return to this revision:

@smallexample
@group
$ cat MT/revision
2e24d49a48adf9acf3a1b6391a080008cbef9c21
@end group
@end smallexample

Monotone also generated a number of certificates attached to
the new revision, and made sure that the database contained a copy of Jim's
public key. These certs store metadata about the commit. Jim can
ask monotone for a list of certs on this revision.

@smallexample
@group
$ monotone ls certs 2e24d49a48adf9acf3a1b6391a080008cbef9c21
-----------------------------------------------------------------
Key   : jim@@juicebot.co.jp
Sig   : ok
Name  : branch
Value : jp.co.juicebot.jb7
-----------------------------------------------------------------
Key   : jim@@juicebot.co.jp
Sig   : ok
Name  : date
Value : 2004-10-26T02:53:08
-----------------------------------------------------------------
Key   : jim@@juicebot.co.jp
Sig   : ok
Name  : author
Value : jim@@juicebot.co.jp
-----------------------------------------------------------------
Key   : jim@@juicebot.co.jp
Sig   : ok
Name  : changelog
Value : initial checkin of project
@end group
@end smallexample

The output of this command has a block for each cert found. Each block
has 4 significant pieces of information. The first indicates the
signer of the cert, in this case @code{jim@@juicebot.co.jp}. The
second indicates whether this cert is ``ok'', meaning whether the
@sc{rsa} signature provided is correct for the cert data. The third is
the cert name, and the fourth is the cert value. This list shows us
that monotone has confirmed that, according to
@code{jim@@juicebot.co.jp}, the revision
@code{2e24d49a48adf9acf3a1b6391a080008cbef9c21} is a member of the
branch @code{jp.co.juicebot.jb7}, written by
@code{jim@@juicebot.co.jp}, with the given date and changelog.

It is important to keep in mind that revisions are not ``in'' or
``out'' of a branch in any global sense, nor are any of these cert
values @i{true} or @i{false} in any global sense. Each cert indicates
that @i{some person} -- in this case Jim -- would like to associate a
revision with some value; it is up to you to decide if you want to
accept that association.

Jim can now check the status of his branch using the ``heads''
command, which lists all the head revisions in the branch:

@smallexample
@group
$ monotone heads
branch 'jp.co.juicebot.jb7' is currently merged:
2e24d49a48adf9acf3a1b6391a080008cbef9c21 jim@@juicebot.co.jp 2004-10-26T02:53:08
@end group
@end smallexample

The output of this command tells us that there is only one current
``head'' revision in the branch @code{jp.co.juicebot.jb7}, and it is
the revision Jim just committed. A head revision is one without any
descendents. Since Jim has not committed any changes to this revision
yet, it has no descendents.

@page
@node    Basic Network Service
@section Basic Network Service

Jim now decides he will make his base revision available to his
employees.  To do this, he arranges for Abe and Beth to synchronise
their databases with his, over the network.  There are two
pre-requisites for this: first, he has to get a copy of each of their
public keys; then, he has to tell monotone that the holders of those
keys are permitted to access his database. Finally, with these
pre-requisites in place, he needs to tell monotone to provide network
access to his database.

First, Abe exports his public key:

@smallexample
@group
$ monotone --db=~/abe.db pubkey abe@@juicebot.co.jp >~/abe.pubkey
@end group
@end smallexample

His public key is just a plain block of ASCII text:

@smallexample
@group
$ cat ~/abe.pubkey
[pubkey abe@@juicebot.co.jp]
MIGdMA0GCSqGSIb3DQEBAQUAA4GLADCBhwKBgQCbaVff9SF78FiB/1nUdmjbU/TtPyQqe/fW
CDg7hSg1yY/hWgClXE9FI0bHtjPMIx1kBOig09AkCT7tBXM9z6iGWxTBhSR7D/qsJQGPorOD
DO7xovIHthMbZZ9FnvyB/BCyiibdWgGT0Gtq94OKdvCRNuT59e5v9L4pBkvajb+IzQIBEQ==
[end]
@end group
@end smallexample

Beth also exports her public key:

@smallexample
@group
$ monotone --db=~/beth.db pubkey beth@@juicebot.co.jp >~/beth.pubkey
@end group
@end smallexample

Then Abe and Beth both send their keys to Jim.  The keys are not secret,
but the team members must be relatively certain that they are exchanging
keys with the person they intend to trust, and not some malicious person
pretending to be a team member. Key exchange may involve sending keys
over an encrypted medium, or meeting in person to exchange physical
copies, or any number of techniques. All that matters, ultimately, is
that Jim receives both Abe's and Beth's key in a way that he can be sure
of.

So eventually, after key exchange, Jim has the public key files in his
home directory. He tells monotone to read the associated key packets
into his database:

@smallexample
@group
$ cat ~/abe.pubkey ~/beth.pubkey | monotone --db=~/jim.db read
monotone: read 2 packets
@end group
@end smallexample

Now Jim's monotone is able to identify Beth and Abe, and he is ready to
give them permission to access his database.  He does this by editing a
pair of small files in his @file{~/.monotone} directory:

@smallexample
@group
$ cat >>~/.monotone/read-permissions
pattern "*"
allow "abe@@juicebot.co.jp"
allow "beth@@juicebot.co.jp"
^D

$ cat >>~/.monotone/write-permissions
abe@@juicebot.co.jp
beth@@juicebot.co.jp
^D
@end group
@end smallexample

These files are read by the default monotone hooks that will decide
whether remote monotone users will be allowed access to Jim's database,
identified by the named keys.

Jim then makes sure that his TCP port 4691 is open to incoming
connections, adjusting his firewall settings as necessary, and runs
the monotone @command{serve} command:

@smallexample
@group
$ monotone --db=jim.db serve "jp.co.juicebot.jb7*"
@end group
@end smallexample

This command starts monotone listening on all network interfaces of 
his laptop on the default port 4691, serving any branch matching
@code{jp.co.juicebot.jb7*}. This will naturally include the
@code{jp.co.juicebot.jb7} branch, and any sub-branches.  The quotes
around @code{"jp.co.juicebot.jb7*"} are there to protect the @code{*}
from expansion by the shell; they have no meaning to monotone.

@page
@node    Synchronising Databases
@section Synchronising Databases

With Jim's server preparations done, now Abe is ready to fetch Jim's
code. To do this he issues the monotone @code{sync} command:

@smallexample
@group
$ monotone --db=abe.db sync jim-laptop.juicebot.co.jp "jp.co.juicebot.jb7*"
monotone: setting default server to jim-laptop.juicebot.co.jp
monotone: setting default branch include pattern to 'jp.co.juicebot.jb7*'
monotone: setting default branch exclude pattern to ''
monotone: connecting to jim-laptop.juicebot.co.jp
monotone: first time connecting to server jim-laptop.juicebot.co.jp:4691
monotone: I'll assume it's really them, but you might want to double-check
monotone: their key's fingerprint: 9e9e9ef1d515ad58bfaa5cf282b4a872d8fda00c
monotone: warning: saving public key for jim@@juicebot.co.jp to database
monotone: finding items to synchronize:
monotone: bytes in | bytes out | revs in | revs out | revs written
monotone:     2587 |      1025 |       1 |        0 |            1
monotone: successful exchange with jim-laptop.juicebot.co.jp
@end group
@end smallexample

Abe now has, in his database, a copy of everything Jim put in the
branch. Therefore Abe can disconnect from the expensive network
connection he's on and work locally for a while. Remember that, in
monotone, work is done between workspaces in the filesystem and
the local database; network connectivity is necessary only when that
work is to be shared with others.

As we follow the juicebot team through the next several steps, we'll see
them run the @command{sync} command again with Jim, and work will flow
both ways. The first time you @command{sync} a new database, monotone
remembers the server and branch patterns you use, and makes them the
default for future operations.

At the end of each exchange, information about all changes in the branch
known to each database have been sent to the other party - including the
work of the third team member that had previously been exchanged. As
well as allowing each team member to learn about the others' work, this
also means that each party's laptop contains a @emph{backup} of the
others' work too.

Jim, Abe and Beth will continue working like this while they're getting
started, and we'll revisit the issue of network service with them a
little later as the project grows.

@page
@node    Making Changes
@section Making Changes

Abe decides to do some work on his part of the code. He has a copy of
Jim's database contents, but cannot edit any of that data yet.  He
begins his editing by checking out the head of the
@code{jp.co.juicebot.jb7} branch into a workspace, so he can edit
it:

@smallexample
@group
$ monotone --db=abe.db --branch=jp.co.juicebot.jb7 checkout .
@end group
@end smallexample

Monotone unpacks the set of files in the head revision's manifest
directly into Abe's current directory.  (If he had specified something
other than @file{.} at the end, monotone would have created that
directory and unpacked the files into it.)  Abe then opens up one of the
files, @file{src/apple.c}, and edits it:

@smallexample
@group
$ vi src/apple.c
@i{<Abe writes some apple-juice dispensing code>}
@end group
@end smallexample

The file @file{src/apple.c} has now been @emph{changed}. Abe gets
up to answer a phone call, and when he returns to his work he has
forgotten what he changed. He can ask monotone for details:

@smallexample
@group
$ monotone diff
# 
# patch "src/apple.c"
#  from [2650ffc660dd00a08b659b883b65a060cac7e560]
#    to [e2c418703c863eabe70f9bde988765406f885fd0]
# 
============================================================================
--- src/apple.c 2650ffc660dd00a08b659b883b65a060cac7e560
+++ src/apple.c e2c418703c863eabe70f9bde988765406f885fd0
@@ -1,7 +1,10 @@
 #include "jb.h"
 
 void 
 dispense_apple_juice()
 @{
-  /* Fill this in please, Abe. */
+  spoutctl(APPLE_SPOUT, FLOW_JUICE, 1);
+  while (spoutctl(APPLE_SPOUT, POLL_JUICE, 1) == 0)
+    usleep (1000);
+  spoutctl(APPLE_SPOUT, FLOW_JUICE, 0);
 @}
@end group
@end smallexample

Satisfied with his day's work, Abe decides to commit. 

@smallexample
@group
$ monotone commit 
monotone: beginning commit on branch 'jp.co.juicebot.jb7'
@end group
@end smallexample

Abe neglected to provide a @option{--message} option specifying the
change log on the command line and the file @file{MT/log} is empty
because he did not document his changes there.  Monotone therefore
invokes an external ``log message editor'' --- typically an editor
like @command{vi} --- with an explanation of the changes being
committed and the opportunity to enter a log message.

@smallexample
@group
polling implementation of src/apple.c
MT:
MT: ----------------------------------------------------------------------
MT: Enter Log.  Lines beginning with `MT:' are removed automatically
MT:
MT: new_manifest [b33cb337dccf21d6673f462d677a6010b60699d1]
MT:
MT: old_revision [2e24d49a48adf9acf3a1b6391a080008cbef9c21]
MT: old_manifest [2098eddbe833046174de28172a813150a6cbda7b]
MT: 
MT: patch "src/apple.c"
MT: from [2650ffc660dd00a08b659b883b65a060cac7e560]
MT:   to [e2c418703c863eabe70f9bde988765406f885fd0]
MT:
MT: ----------------------------------------------------------------------
MT:
@end group
@end smallexample

Abe enters a single line above the explanatory message, saying
``polling implementation of src/apple.c''. He then saves the file and
quits the editor. Monotone deletes all the lines beginning with
``MT:'' and leaves only Abe's short message. Returning to the shell,
Abe's commit completes:

@smallexample
@group
monotone: committed revision 70decb4b31a8227a629c0e364495286c5c75f979
@end group
@end smallexample

Abe then sends his new revision back to Jim:

@smallexample
@group
$ monotone sync
monotone: connecting to jim-laptop.juicebot.co.jp
monotone: finding items to synchronize:
monotone:   certs |    keys | revisions
monotone:       8 |       2 |         2
monotone: bytes in | bytes out | revs in | revs out | revs written
monotone:      615 |      2822 |       0 |        1 |            0
monotone: successful exchange with jim-laptop.juicebot.co.jp
@end group
@end smallexample

Beth does a similar sequence. First she syncs her database with
Jim's:

@smallexample
@group
$ monotone --db=beth.db sync jim-laptop.juicebot.co.jp "jp.co.juicebot.jb7*"
monotone: setting default server to jim-laptop.juicebot.co.jp
monotone: setting default branch include pattern to 'jp.co.juicebot.jb7*'
monotone: setting default branch exclude pattern to ''
monotone: connecting to jim-laptop.juicebot.co.jp
monotone: first time connecting to server jim-laptop.juicebot.co.jp:4691
monotone: I'll assume it's really them, but you might want to double-check
monotone: their key's fingerprint: 9e9e9ef1d515ad58bfaa5cf282b4a872d8fda00c
monotone: warning: saving public key for jim@@juicebot.co.jp to database
monotone: finding items to synchronize:
monotone: bytes in | bytes out | revs in | revs out | revs written
monotone:     4601 |      1239 |       2 |        0 |            1
monotone: verifying new revisions (this may take a while)
monotone: bytes in | bytes out | revs in | revs out | revs written
monotone:     4601 |      1285 |       2 |        0 |            2
monotone: successful exchange with jim-laptop.juicebot.co.jp
@end group
@end smallexample

She checks out a copy of the tree from her database:

@smallexample
@group
$ monotone --db=beth.db --branch=jp.co.juicebot.jb7 checkout .
@end group
@end smallexample

She edits the file @file{src/banana.c}:

@smallexample
@group
$ vi src/banana.c
@i{<Beth writes some banana-juice dispensing code>}
@end group
@end smallexample

and logs her changes in @file{MT/log} right away so she does not
forget what she has done like Abe.

@smallexample
@group
$ vi MT/log
* src/banana.c: Added polling implementation
@end group
@end smallexample

Later, she commits her work.  Monotone again invokes an external editor
for her to edit her log message, but this time it fills in the messages
she's written so far, and she simply checks them over one last time
before finishing her commit:

@smallexample
@group
$ monotone commit
monotone: beginning commit on branch 'jp.co.juicebot.jb7'
monotone: committed revision 80ef9c9d251d39074d37e72abf4897e0bbae1cfb
@end group
@end smallexample

And she syncs with Jim again:

@smallexample
@group
$ monotone sync
monotone: connecting to jim-laptop.juicebot.co.jp
monotone: finding items to synchronize:
monotone:   certs |    keys | revisions
monotone:      12 |       3 |         3
monotone: bytes in | bytes out | revs in | revs out | revs written
monotone:      709 |      2879 |       0 |        1 |            0
monotone: successful exchange with jim-laptop.juicebot.co.jp
@end group
@end smallexample

@page
@node    Dealing with a Fork
@section Dealing with a Fork

Careful readers will note that, in the previous section, the JuiceBot
company's work was perfectly serialized:

@enumerate
@item Jim did some work
@item Abe synced with Jim
@item Abe did some work
@item Abe synced with Jim
@item Beth synced with Jim
@item Beth did some work
@item Beth synced with Jim
@end enumerate

The result of this ordering is that Jim's work entirely preceded
Abe's work, which entirely preceded Beth's work. Moreover, each
worker was fully informed of the ``up-stream'' worker's actions, and
produced purely derivative, ``down-stream'' work:

@enumerate
@item Jim made revision 2e24d...
@item Abe changed revision 2e24d... into revision 70dec...
@item Beth derived revision 70dec... into revision 80ef9...
@end enumerate

This is a simple, but sadly unrealistic, ordering of events. In real
companies or work groups, people often work in parallel,
@emph{diverging} from commonly known revisions and @emph{merging}
their work together, sometime after each unit of work is complete.

Monotone supports this diverge/merge style of operation naturally; any
time two revisions diverge from a common parent revision, we say that
the revision graph has a @dfn{fork} in it. Forks can happen at any
time, and require no coordination between workers. In fact any
interleaving of the previous events would work equally well; with one
exception: if forks were produced, someone would eventually have to
run the @command{merge} command, and possibly resolve any conflicts
in the fork.

To illustrate this, we return to our workers Beth and Abe. Suppose Jim
sends out an email saying that the current polling juice dispensers
use too much CPU time, and must be rewritten to use the JuiceBot's
interrupt system. Beth wakes up first and begins working immediately,
basing her work off the revision 80ef9... which is currently in her
workspace:

@smallexample
@group
$ vi src/banana.c
@i{<Beth changes her banana-juice dispenser to use interrupts>}
@end group
@end smallexample

Beth finishes and examines her changes:

@smallexample
@group
$ monotone diff
# 
# patch "src/banana.c"
#  from [7381d6b3adfddaf16dc0fdb05e0f2d1873e3132a]
#    to [5e6622cf5c8805bcbd50921ce7db86dad40f2ec6]
# 
============================================================================
--- src/banana.c 7381d6b3adfddaf16dc0fdb05e0f2d1873e3132a
+++ src/banana.c 5e6622cf5c8805bcbd50921ce7db86dad40f2ec6
@@ -1,10 +1,15 @@
 #include "jb.h"
 
+static void 
+shut_off_banana()
+@{
+  spoutctl(BANANA_SPOUT, SET_INTR, 0);
+  spoutctl(BANANA_SPOUT, FLOW_JUICE, 0);
+@}
+
 void 
-dispense_banana_juice()
+dispense_banana_juice() 
 @{
+  spoutctl(BANANA_SPOUT, SET_INTR, &shut_off_banana);
   spoutctl(BANANA_SPOUT, FLOW_JUICE, 1);
-  while (spoutctl(BANANA_SPOUT, POLL_JUICE, 1) == 0)
-    usleep (1000);
-  spoutctl(BANANA_SPOUT, FLOW_JUICE, 0);
 @}
@end group
@end smallexample

She commits her work:

@smallexample
@group
$ monotone commit --message="interrupt implementation of src/banana.c"
monotone: beginning commit on branch 'jp.co.juicebot.jb7'
monotone: committed revision 8b41b5399a564494993063287a737d26ede3dee4
@end group
@end smallexample

And she syncs with Jim:

@smallexample
@group
$ monotone sync
@end group
@end smallexample


Unfortunately, before Beth managed to sync with Jim, Abe had woken up
and implemented a similar interrupt-based apple juice dispenser, but
his workspace is 70dec..., which is still ``upstream'' of
Beth's. 

@smallexample
@group
$ vi apple.c
@i{<Abe changes his apple-juice dispenser to use interrupts>}
@end group
@end smallexample

Thus when Abe commits, he unknowingly creates a fork:

@smallexample
@group
$ monotone commit --message="interrupt implementation of src/apple.c"
@end group
@end smallexample

Abe does not see the fork yet; Abe has not actually seen @emph{any} of
Beth's work yet, because he has not synchronized with Jim. Since
he has new work to contribute, however, he now syncs:

@smallexample
@group
$ monotone sync
@end group
@end smallexample

Now Jim and Abe will be aware of the fork. Jim sees it when he sits
down at his desk and asks monotone for the current set of heads of
the branch:

@smallexample
@group
$ monotone heads
monotone: branch 'jp.co.juicebot.jb7' is currently unmerged:
39969614e5a14316c7ffefc588771f491c709152 abe@@juicebot.co.jp 2004-10-26T02:53:16
8b41b5399a564494993063287a737d26ede3dee4 beth@@juicebot.co.jp 2004-10-26T02:53:15
@end group
@end smallexample


Clearly there are two heads to the branch: it contains an un-merged
fork. Beth will not yet know about the fork, but in this case it
doesn't matter: anyone can merge the fork, and since there are no
conflicts Jim does so himself:

@smallexample
@group
$ monotone merge
monotone: starting with revision 1 / 2
monotone: merging with revision 2 / 2
monotone: [source] 39969614e5a14316c7ffefc588771f491c709152
monotone: [source] 8b41b5399a564494993063287a737d26ede3dee4
monotone: common ancestor 70decb4b31a8227a629c0e364495286c5c75f979 abe@@juicebot.co.jp  2004-10-26T:02:50:01 found
monotone: trying 3-way merge
monotone: [merged] da499b9d9465a0e003a4c6b2909102ef98bf4e6d
monotone: your workspaces have not been updated
@end group
@end smallexample

The output of this command shows Jim that two heads were found,
combined via a 3-way merge with their ancestor, and saved to a new
revision. This happened automatically, because the changes between the
common ancestor and heads did not conflict. If there had been a
conflict, monotone would have invoked an external merging tool to help
resolve it.

After merging, the branch has a single head again, and Jim updates
his workspace. 

@smallexample
@group
$ monotone update
monotone: selected update target da499b9d9465a0e003a4c6b2909102ef98bf4e6d
monotone: updating src/apple.c to f088e24beb43ab1468d7243e36ce214a559bdc96
monotone: updating src/banana.c to 5e6622cf5c8805bcbd50921ce7db86dad40f2ec6
monotone: updated to base revision da499b9d9465a0e003a4c6b2909102ef98bf4e6d
@end group
@end smallexample

The update command selected an update target --- in this case the newly merged
head --- and performed an in-memory merge between Jim's workspace
and the chosen target. The result was then written to Jim's workspace. If
Jim's workspace had any uncommitted changes in it, they would have been
merged with the update in exactly the same manner as the merge of multiple
committed heads. 

Monotone makes very little distinction between a ``pre-commit'' merge
(an update) and a ``post-commit'' merge. Both sorts of merge use the
exact same algorithm. The major difference concerns the recoverability
of the pre-merge state: if you commit your work first, and merge after
committing, then even if the merge somehow fails (due to difficulty in a
manual merge step, for instance), your committed state is still safe.
If you update, on the other hand, you are requesting that monotone
directly modify your workspace, and while monotone will try hard not
to break anything, this process is inherently more open to error.  It is
therefore recommended that you commit your work @emph{first}, before
merging.

If you have previously used another version control system, this may at
first seem surprising; there are some systems where you are
@emph{required} to update, and risk the above problems, before you can
commit.  Monotone, however, was designed with this problem in mind, and
thus @emph{always} allows you to commit before merging.  A good rule of
thumb is to only use @command{update} in workspaces with no local
modifications, or when you actually want to work against a different
base revision (perhaps because finishing your change turns out to
require some fixes made in another revision, or because you discover
that you have accidentally started working against a revision that
contains unrelated bugs, and need to back out to a working revision for
testing).

@page
@node    Branching and Merging
@section Branching and Merging

So by now you're familiar with making changes, sharing them with other
people, and integrating your changes with their changes.  Sometimes,
though, you may want to make some changes, and @emph{not} integrate them
with other people's --- or at least not right away.  One way to do this
would be to simply never run @command{monotone merge}; but it would
quickly become confusing to try and keep track of which changes were in
which revisions.  This is where @emph{branches} are useful.

Continuing our example, suppose that Jim is so impressed by Beth's work
on banana juice support that he assigns her to work on the JuiceBot 7's
surprise new feature: muffins.  In the mean time, Abe will continue
working on the JuiceBot's basic juice-related functions.

The changes required to support muffins are somewhat complicated, and
Beth is worried that her work might destabilize the program, and
interfere with Abe's work.  In fact, she isn't even sure her first
attempt will turn out to be the right approach; she might work on it for
a while and then decide it was a bad idea, and should be discarded.  For
all these reasons, she decides that she will work on a branch, and then
once she is satisfied with the new code, she will merge back onto the
mainline.

She decides that since main development is in branch
@code{jp.co.juicebot.jb7}, she will use branch
@code{jp.co.juicebot.jb7.muffins}.  So, she makes the first few edits to
the new muffins code, and commits it on a new branch by simply passing
@option{--branch} to commit:

@smallexample
@group
$ monotone commit --branch=jp.co.juicebot.jb7.muffins --message='autobake framework'
monotone: beginning commit on branch 'jp.co.juicebot.jb7.muffins'
monotone: committed revision d33caefd61823ecbb605c39ffb84705dec449857
@end group
@end smallexample

That's all there is to it --- there is now a
@code{jp.co.juicebot.jb7.muffins} branch, with her initial checkin on
it.  She can make further checkins from the same workspace, and they
will automatically go to the muffins branch; if anyone else wants to
help her work on muffins, they can check out that branch as usual.

Of course, while Beth is working on the new muffins code, Abe is still
making fixes to the main line.  Occasionally, Beth wants to integrate
his latest work into the muffins branch, so that her version doesn't
fall too far behind.  She does this by using the @command{propagate}
command:

@smallexample
@group
$ monotone propagate jp.co.juicebot.jb7 jp.co.juicebot.jb7.muffins
monotone: propagating jp.co.juicebot.jb7 -> jp.co.juicebot.jb7.muffins
monotone: [source] da003f115752ac6e4750b89aaca9dbba178ac80c
monotone: [target] d0e5c93bb61e5fd25a0dadf41426f209b73f40af
monotone: common ancestor 853b8c7ac5689181d4b958504adfb5d07fd959ab jim@@juicebot.co.jp 2004-10-26T:12:44:23 found
monotone: trying 3-way merge
monotone: [merged] 89585b3c5e51a5a75f5d1a05dda859c5b7dde52f
@end group
@end smallexample

The @command{propagate} merges all of the new changes on one branch onto
another.

When the muffins code is eventually stable and ready to be integrated
into the main line of development, she simply propagates the other way:

@smallexample
@group
$ monotone propagate jp.co.juicebot.jb7.muffins jp.co.juicebot.jb7
monotone: propagating jp.co.juicebot.jb7.muffins -> jp.co.juicebot.jb7
monotone: [source] 4e48e2c9a3d2ca8a708cb0cc545700544efb5021
monotone: [target] bd29b2bfd07644ab370f50e0d68f26dcfd3bb4af
monotone: common ancestor 652b1035343281a0d2a5de79919f9a31a30c9028 jim@@juicebot.co.jp 2004-10-26T:15:25:05 found
monotone: [merged] 03f7495b51cc70b76872ed019d19dee1b73e89b6
@end group
@end smallexample

Monotone always records the full history of all merges, and is designed
to handle an arbitrarily complicated graph of changes.  You can make a
branch, then branch off from that branch, propagate changes between
arbitrary branches, and so on; monotone will track all of it, and do
something sensible for each merge.  Of course, it is still probably a
good idea to come up with some organization of branches and a plan for
which should be merged to which other ones.  Monotone may keep track of
graphs of arbitrary complexity --- but you will have more trouble.
Whatever arrangement of branches you come up with, though, monotone
should be able to handle it.

@page
@node    Network Service Revisited
@section Network Service Revisited

Up until now, Jim has been using his laptop and database as a sort of
``central server'' for the company; Abe and Beth have been syncing with
Jim, and learning of each other's work via Jim's database.  This has
worked fine while the product has been in early development; Jim has
good network connectivity in Japan, and has been staying home
concentrating on programming.  He has been able to leave his laptop
connected and running all the time, while his employees in different
time-zones work and sync their databases.  This is now starting to
change, and two problems are starting to cause occasional difficulties.

@itemize
@item
Firstly, Jim is finding that he has to spend more of his time
travelling, demonstrating the new juicebot features to customers; thus
his laptop is spending more time disconnected from the network, or
connected at dynamic addresses where it's not convenient for Abe and
Beth to find him and sync. 

This doesn't prevent them doing any work, but it does have some
uncomfortable consequences: they're more likely to have to manually
merge conflicting changes when they finally sync up and discover they've
both come up with slightly different fixes for the same bug in the
meantime, and they're more exposed to loss of work if one of them
suffers a disk failure before they've had a chance to sync that work
with another database.

@item
Secondly, because Jim has been using the one database file both
for his own local work, and for serving to the others in the team, he
occasionally finds that the monotone serve process (busy syncing with
Abe or Beth) has a lock on the database, while he's trying to do local
work like updates or commits.  

The level of project activity is picking up, and there are more and more
changes to be synced in the narrower window of time while Jim is
connected. He finds he sometimes needs to take down the server process
to do this local work, further exacerbating the first problem.
@end itemize

The juicebot team are resourceful, and by now quite used to working
independently.  While Jim has been away travelling, Abe and Beth have
come up with their own solution to the first problem: they'll run
servers from their databases, setting them up just like Jim did
previously.  That way, if Jim's database is offline, either Beth or Abe
can run the @command{serve} command and provide access for the other to
@command{sync} with.  Beth also has the idea to create a second database
for the @command{serve} process, and to @command{sync} her development
database with that server locally, avoiding locking contention between
multiple monotone processes on the one database file.

When Jim reappears, the next person to @command{sync} with him will
often pass him information about both employees' work that they've
sync'ed with eachother in the meantime, just as he used to do. In fact,
Jim now finds it more convenient to initiate the sync with one of the
other servers when he has a spare moment and dynamic connectivity from a
hotel room or airport.  Changes will flow between servers automatically
as clients access them and trade with one another.

This gets them by for a while, but there are still occasional
inconveniences.  Abe and Beth live in very different time-zones, and
don't always have reliable network connectivity, so sometimes Jim finds
that neither of them is online to sync with when he has the chance.  Jim
now also has several customers interested in beta-testing the new code,
and following changes as the bugs and issues they report are addressed.

Jim decides it's time for a permanent server they can all sync with;
this way, everyone always knows where to go to get the latest changes,
and people can push their changes out without first calling their
friends and making sure that they have their servers running.  

Jim has rented some web server space on a service provider's shared
system for the JuiceBot Inc. public website, @code{www.juicebot.co.jp};
he thinks this server will be a good place to host the central monotone
server too. He sets up a new monotone database on the server,
generates a new key specially for the server (so he doesn't have to
expose his own development private key on the shared system), and loads
in the team-members' keys:  

@smallexample
@group
$ monotone --db=server.db db init
$ monotone genkey monotone-server@@www.juicebot.co.jp
monotone: generating key-pair 'monotone-server@@www.juicebot.co.jp'
enter passphrase for key ID [monotone-server@@www.juicebot.co.jp] : @i{<Jim enters a new passphrase>}
confirm passphrase for key ID [monotone-server@@www.juicebot.co.jp]: @i{<Jim confirms the passphrase>}
monotone: storing key-pair 'monotone-server@@www.juicebot.co.jp' in /home/jim/.monotone/keys
$ cat abe.pubkey beth.pubkey jim.pubkey | monotone --db=server.db read
monotone: read 3 packets
@end group
@end smallexample

For the team members, he sets up the permissions files on the server
much like before --- except that of course he needs to also grant his
@code{jim@@juicebot.co.jp} key permission to access the new server.  For
the beta-testers, Jim wants to allow them read-only access just to the
main JuiceBot 7 development line, but not to any of the sub-branches
where other experimental development is going on. He adds some lines at
the top of the @file{~/.monotone/read-permissions} on the server, above
the broader permissions given to team-members. See the @ref{Hook
Reference} for @code{get_netsync_read_permitted} for more details; the
resulting file looks like this:

@smallexample
@group
comment "Provide beta-testers with specific read-only access"
pattern "jp.co.juicebot.jb7"
allow "beta1@@juicebot.co.jp"
allow "beta2@@juicebot.co.jp"
continue "true"

comment "Fall-through, and allow staff access to all branches"
pattern "*"
allow "abe@@juicebot.co.jp"
allow "beth@@juicebot.co.jp"
allow "jim@@juicebot.co.jp"
@end group
@end smallexample


Jim could log in and start the monotone process manually from his shell
account on the server, perhaps under a program like screen to let it
stay running while he's away. This would be one way of giving it the
server-key's passphrase each startup, but he wants to make sure that the
server is up all the time; if the host reboots while he's travelling and
the monotone server is down until he next logs in, things aren't much
better than before.  For the server to start automatically each time,
he'll need to use the @code{get_passphrase} hook in the server's
@file{.monotonerc} file again.

Because he's running on a shared server, Jim needs to be a little more
restrictive about which interfaces and addresses his new server process
will listen on. He should only accept connections at the address used
for his website, because some of the provider's other customers might
also want to publish their own monotone projects on this host.  Jim uses
the @code{--bind=address:port} argument like so:

@smallexample
@group
$ monotone --db=server.db --bind=www.juicebot.co.jp serve "jp.co.juicebot.jb7*"
@end group
@end smallexample

This will start monotone listening on the default port (4691), but only
on the IP address associated with @code{www.juicebot.co.jp}.  Jim can do
this because his hosting provider has given him a dedicated IP address
for his website.  If the hosting provider offered only a single shared
IP address belonging to the server, each customer could bind a different
port number on that address.

While he's first testing the setup, Jim uses
@code{--bind=localhost:1234}. This causes the monotone process to listen
only to port 1234 on the loopback interface 127.0.0.1, which is not
accessible from the network, so Jim doesn't expose an open port to the
rest of the world until he's satisfied with the permissions
configuration.  You can cause monotone to listen on all interfaces on
port 1234 by leaving out the address part like @code{--bind=:1234}.

When he's satisfied the server is set up correctly, Jim does an initial
@command{sync} with the new database, filling it with all the revision
history currently on his laptop. While Jim has been busy setting up the
server, Abe and Beth have kept working; the server will catch up with
their latest changes when they next sync, too.

All of the team members now want to sync with the new monotone server by
default.  Previously, they had been syncing with Jim's laptop by
default, even if they occasionally specified another team-member's
server on the command line when Jim was away, because monotone had
remembered the first server and branch patterns used in database
@ref{Vars}.  These vars can be seen as follows:

@smallexample
@group
$ monotone list vars
database: default-exclude-pattern 
database: default-include-pattern jp.co.juicebot.jb7*
database: default-server jim-laptop.juicebot.co.jp
known-servers: jim-laptop.juicebot.co.jp 9e9e9ef1d515ad58bfaa5cf282b4a872d8fda00c
known-servers: abe-laptop.juicebot.co.jp a2bb16a183247af4133621f7f5aefb21a9d13855
known-servers: www.juicebot.co.jp 120a99ch93b4f174432c13d3e3e9f2234aa92612
@end group
@end smallexample

The team members can reset their local database vars accordingly:

@smallexample
@group
$ monotone set database default-server www.juicebot.co.jp
@end group
@end smallexample

With their new server, the juicebot team have gained the convenience of
a readily available common point of reference for syncs.  However, they
also know that this is there only as a convenience, and doesn't prevent
them working as they did before:
@itemize
@item
The team members can still sync with each other if needed. 

Hopefully, their new server won't ever be down, but sometimes they might
be working together while away from ready network access --- fixing up
the last few issues and finalising presentation materials while
travelling to a sales conference, for example.  The server will learn of
these changes on the next sync.
@item
The team members continue to discover multiple heads and changes that
need merging, as before. Each team member can merge the heads, and will
produce the same revision id if they merge to the same result. 

They now develop a new habit out of courtesy, though --- they try not to
leave multiple heads and unmerged changes on the server, at least not
for long. This saves them from repeating work, and also helps prevent
confusion for the beta-testers.  When each team member is ready to
@command{sync}, they develop the habit of doing a @command{pull} from
the server first.  If new revisions were received from the server, they
first @command{merge} their new revisions with the head(s) from the
server, and finally @command{sync} to publish their merged changes as
one.  If the last @command{sync} happens to pull in new revisions again
from the server, it means someone else has deposited new work at the
same time, and another @command{merge} and @command{sync} would probably
be polite.
@item
Jim knows he doesn't have to keep a special backup of the new server's
contents; if the server should fail, all the contents of its database
can be found amongst the other team members (especially because no
commits are done on the server itself).

He does, however, take a copy of the server's private key, so he can
restore that if necessary.
@item
In fact, Jim realises that he can now commit a copy of the web site's
current contents into monotone on a new branch,
@code{jp.co.juicebot.www}, and keep a backup of that content too. 

Now he can use monotone to work on the website offline, and let other
team members add and edit the content; he can also preview changes
locally before updating the production content.  He keeps a working
directory checkout of this content in the webroot on the server, and
runs a monotone @command{update} in there when he wants to bring the
public web site up to date. Later, he'll think about using monotone's
@ref{Quality Assurance} mechanisms and Event Notification @ref{Hooks},
so that the web server can update itself automatically when appropriate
new revisions are received.
@item
Jim also knows that even if someone should break into the shared hosting
server and tamper with the database, they won't be able to inject
malicious code into the project, because all revisions are signed by the
team members, and he has set his @ref{Trust Evaluation Hooks} so he
doesn't trust the server key for signing revisions.  

In monotone, the important trust consideration is on the @emph{signed
content}, rather than on the @emph{replication path} by which that
content arrived in your database.
@end itemize

@node    Advanced Uses
@chapter Advanced Uses

This chapter covers slightly less common aspects of using
monotone. Some users of monotone will find these helpful, though
possibly not all. We assume that you have read through the taxonomy
and tutorial, and possibly spent some time playing with the program to
familiarize yourself with its operation.

@menu
* Selectors::              Selecting revisions by certificate.
* Restrictions::           Limit workspace changes to specified files.
* Scripting::              Running monotone from other programs.
* Inodeprints::            Trading off safety for speed in your workspace.
* Quality Assurance::      Integrating testing and review with development.
* Vars::                   Simple per-database configuration information.
* Reserved Files::         File names with special meanings.
* Reserved Certs::         Certificate names with special meanings.
* Naming Conventions::     Choosing appropriate names for keys and branches.
* File Attributes::        Marking files as executable, or other attributes.
* Merging::                Merging with external tools, handling binary files.
* Migrating and Dumping::  Changing the underlying storage system.
* Importing from CVS::     Building a monotone database from a CVS repository.
* Monotone as CVS client:: Using monotone to access a CVS server.
@end menu


@page
@node    Selectors
@section Selectors

Revisions can be specified on the monotone command line, precisely, by
entering the entire 40-character hexadecimal @sc{sha1} code. This can
be cumbersome, so monotone also allows a more general syntax called
``selectors'' which is less precise but more ``human friendly''. Any
command which expects a precise revision ID can also accept a selector
in its place; in fact a revision ID is just a special type of selector
which is very precise.

@heading Simple examples

Some selector examples are helpful in clarifying the idea:

@table @code
@item a432
Revision IDs beginning with the string @code{a432}
@item graydon@@pobox.com/2004-04
Revisions written by @code{graydon@@pobox.com} in April 2004.
@item "jrh@@example.org/2 weeks ago"
Revisions written by @code{jrh@@example.org} 2 weeks ago.
@item graydon/net.venge.monotone.win32/yesterday
Revisions in the @code{net.venge.monotone.win32} branch, written by
@code{graydon}, yesterday.
@end table

A moment's examination reveals that these specifications are ``fuzzy''
and indeed may return multiple values, or may be ambiguous. When
ambiguity arises, monotone will inform you that more detail is
required, and list various possibilities. The precise specification
of selectors follows.


@heading Selectors in detail

A selector is a combination of a selector type, which is a single
xoASCII character, followed by a @code{:} character and a selector
string. All selectors strings except for selector type @code{c}
are just values. The value is matched against identifiers or certs,
depending on its type, in an attempt to match a single revision.
Selectors are matched as prefixes. The current set of selection
types are:

@table @asis
@item Generic cert selector
Uses selector type @code{c}.  The selector string has the syntax
@var{name} or @var{name}@code{=}@var{value}.  The former syntax will
select any revision that has a cert with that name, regardless of
value; the latter will match any revision that has a cert with that
name and value.  Values to match for can have shell wildcards.
@item Author selection
Uses selector type @code{a}. For example, @code{a:graydon} matches
@code{author} certs where the cert value contains @code{graydon}.
@item Branch selection
Uses selector type @code{b}. For example, @code{b:net.venge.monotone} matches
@code{branch} certs where the cert value is @code{net.venge.monotone}.
Values to match for can have shell wildcards.  If you give a bare @code{b:}
monotone will require you to be in a workspace, and will use the branch
value recorded in your MT/options file.
@item Heads selection
Uses selector type @code{h}. For example, @code{h:net.venge.monotone} matches
@code{branch} certs where the cert value is @code{net.venge.monotone} and 
the associated revision is a head revision on that branch.  Values to match
for can have shell wildcards like the branch selector.  If you give a bare 
@code{h:} monotone will require you to be in a workspace, and use the branch
recorded in your MT/options file.
@item Date selection
Uses selector type @code{d}. For example, @code{d:2004-04} matches
@code{date} certs where the cert value begins with
@code{2004-04}. This selector also accepts expanded date syntax (see below).
@item "Earlier or equal than" selection
Uses selector type @code{e}. For example, @code{e:2004-04-25} matches
@code{date} certs where the cert value is less or equal than
@code{2004-04-25T00:00:00}. If the time component is unspecified,
monotone will assume 00:00:00. This selector also accepts expanded date
syntax (see below)
@item "Later than" selection
Uses selector type @code{l}. For example, @code{l:2004-04-25} matches
@code{date} certs where the cert value is strictly less than
@code{2004-04-25T00:00:00}. If the time component is unspecified,
monotone will assume 00:00:00. This selector also accepts expanded date
syntax (see below)
@item Identifier selection
Uses selector type @code{i}. For example, @code{i:0f3a} matches
revision IDs which begin with @code{0f3a}.
@item Tag selection
Uses selector type @code{t}. For example, @code{t:monotone-0.11} matches
@code{tag} certs where the cert value begins with @code{monotone-0.11}.
Values to match for can have shell wildcards.
@end table

Further selector types may be added in the future. 

@heading Composite selectors

Selectors may be combined with the @code{/} character. The combination
acts as database intersection (or logical @code{and}). For example,
the selector @code{a:graydon/d:2004-04} can be used to select a
revision which has an @code{author} cert beginning with @code{graydon}
@emph{as well as} a @code{date} cert beginning with @code{2004-04}.

@heading Selector expansion

Before selectors are passed to the database, they are expanded using a
lua hook: @code{expand_selector}. The default definition of this hook
attempts to guess a number of common forms for selection, allowing you
to omit selector types in many cases. For example, the hook guesses
that the typeless selector @code{jrh@@example.org} is an author
selector, due to its syntactic form, so modifies it to read
@code{a:jrh@@example.org}. This hook will generally assign a selector
type to values which ``look like'' partial hex strings, email
addresses, branch names, or date specifications. For the complete
source code of the hook, see @ref{Hook Reference}.

@heading Expanding dates

All date-related selectors (@code{d}, @code{e}, @code{l}) support an
english-like syntax similar to CVS.  This syntax is expanded to the
numeric format by a lua hook: @code{expand_date}.
The allowed date formats are:
@table @asis

@item now
Expands to the current date and time.
@item today
Expands to today's date. @code{e} and @code{l} selectors assume time 00:00:00
@item yesterday
Expands to yesterday's date. @code{e} and @code{l} selectors assume
time 00:00:00
@item <number> @{minute|hour@} <ago>
Expands to today date and time, minus the specified @code{number} of
minutes|hours. 
@item <number> @{day|week|month|year@} <ago>
Expands to today date, minus the specified @code{number} of
days|weeks|months|years. @code{e} and @code{l} selectors assume time
00:00:00
@item <year>-<month>[-day[Thour:minute:second]]
Expands to the supplied year/month. The day and time component are
optional. If missing, @code{e} and @code{l} selectors assume the first
day of month and time 00:00:00.
The time component, if supplied, must be complete to the second.
@end table

For the complete source code of the hook, see @ref{Hook Reference}.

@heading Typeless selection

If, after expansion, a selector still has no type, it is matched as a
special ``unknown'' selector type, which will match either a tag, an
author, or a branch. This costs slightly more database access, but
often permits simple selection using an author's login name and a
date. For example, the selector
@code{graydon/net.venge.monotone.win32/yesterday} would pass through
the selector @code{graydon} as an unknown selector; so long as there
are no branches or tags beginning with the string @code{graydon} this
is just as effective as specifying @code{a:graydon}.

@page
@node    Restrictions
@section Restrictions

Several monotone commands accept optional @var{pathname...} arguments in
order to establish a ``restriction''.  Restrictions are used to limit
the files and directories these commands examine for changes when
comparing the workspace to the revision it is based on. Restricting a
command to a specified set of files or directories simply ignores
changes to files or directories not included by the restriction.

The following commands all support restrictions using optional
@var{pathname...} arguments:

@itemize
@item @command{status}
@item @command{diff}
@item @command{revert}
@item @command{commit}
@item @command{list known}
@item @command{list unknown}
@item @command{list ignored}
@item @command{list missing}
@item @command{list changed}
@end itemize

Including either the old or new name of a renamed file or directory will
cause both names to be included in a restriction. If in doubt, the
@command{status} command can be used to ``test'' a set of pathnames to
ensure that the expected files are included or excluded by a
restriction.

Commands which support restrictions also support the
@option{--depth=@var{n} } option, where @var{n} specifies the maximum
number of directories to descend. For example, @var{n}=0 disables
recursion, @var{n}=1 means descend at most one directory, and so on.

The @command{update} command does not allow for updates to a
restricted set of files, which may be slightly different than other
version control systems. Partial updates don't really make sense in
monotone, as they would leave the workspace based on a revision that
doesn't exist in the database, starting an entirely new line of
development.

@heading Subdirectory restrictions

The restrictions facility also allows commands to operate from within a
subdirectory of the workspace.  By default, the @i{entire working
copy} is always examined for changes. However, specifying an explicit
"."  pathname to a command will restrict it to the current subdirectory.
Note that this is quite different from other version control systems and
may seem somewhat surprising.

The expectation is that requiring a single "." to restrict to the
current subdirectory should be simple to use. While the alternative,
defaulting to restricting to the current subdirectory, would require a
somewhat complicated ../../.. sequence to remove the restriction and
operate on the whole tree.

This default was chosen because monotone versions whole project trees
and generally expects to commit all changes in the workspace as a
single atomic unit. Other version control systems often version
individual files or directories and may not support atomic commits at
all.

When working from within a subdirectory of the workspace all
paths specified to monotone commands must be relative to the current
subdirectory.

@heading Finding a workspace

Monotone only stores a single @file{MT} directory at the root of a
workspace. Because of this, a search is done to find the @file{MT}
directory in case a command is executed from within a subdirectory of a
workspace. Before a command is executed, the search for a working
copy directory is done by traversing parent directories until an
@file{MT} directory is found or the filesystem root is reached. Upon
finding an @file{MT} directory, the @file{MT/options} file is read for
default options. The @option{--root} option may be used to stop the 
search early, before reaching the root of the physical filesystem.

Many monotone commands don't require a workspace and will simply
proceed with no default options if no @file{MT} directory is found.
However, some monotone commands do require a workspace and will fail
if no @file{MT} directory can be found.

The @command{checkout} and @command{setup} commands create a @i{new
workspace} and initialize a new @file{MT/options} file based on their
current option settings.


@page
@node    Scripting
@section Scripting

People often want to write programs that call monotone --- for example,
to create a graphical interface to monotone's functionality, or to
automate some task.  For most programs, if you want to do this sort of
thing, you just call the command line interface, and do some sort of
parsing of the output.  Monotone's output, however, is designed for
humans: it's localized, it tries to prompt the user with helpful
information depending on their request, if it detects that something
unusual is happening it may give different output in an attempt to make
this clear to the user, and so on.  As a result, it is not particularly
suitable for programs to parse.

Rather than trying to design output to work for both humans and
computers, and serving neither audience well, we elected to create a
separate interface to make programmatically extracting information from
monotone easier.  The command line interface has a command
@code{automate}; this command has subcommands that print various sorts
of information on standard output, in simple, consistent, and easily
parseable form.

For details of this interface, see @ref{Automation}.

@page
@node    Inodeprints
@section Inodeprints

Fairly often, in order to accomplish its job, monotone has to look at
your workspace and figure out what has been changed in it since your
last commit.  Commands that do this include @command{status},
@command{diff}, @command{update}, @command{commit}, and others.  There
are two different techniques it can use to do this.  The default, which
is sufficient for most projects, is to simply read every file in the
workspace, compute their @sc{sha1} hash, and compare them to the
hashes monotone has stored.  This is very safe and reliable, and turns
out to be fast enough for most projects.  However, on very large
projects, ones whose source trees are many megabytes in size, it can
become unacceptably slow.

The other technique, known as @emph{inodeprints}, is designed for this
situation.  When running in inodeprints mode, monotone does not read the
whole workspace; rather, it keeps a cache of interesting information
about each file (its size, its last modification time, and so on), and
skips reading any file for which these values have not changed.  This is
inherently somewhat less safe, and, as mentioned above, unnecessary for
most projects, so it is disabled by default.

If you do determine that it is necessary to use inodeprints with your
project, it is simple to enable them.  Simply run @command{monotone
refresh_inodeprints}; this will enable inodeprints mode and generate an
initial cache.  If you ever wish to turn them off again, simply delete
the file @file{MT/inodeprints}.  You can at any time delete or truncate
the @file{MT/inodeprints} file; monotone uses it only as a cache and
will continue to operate correctly.

Normally, instead of enabling this up on a per-workspace basis, you
will want to simply define the @code{use_inodeprints} hook to return
@code{true}; this will automatically enable inodeprints mode in any new
workspaces you create.  See @ref{Hook Reference} for details.

@page
@node    Quality Assurance
@section Quality Assurance

Monotone was constructed to serve both as a version control tool and
as a quality assurance tool. The quality assurance features permit
users to ignore, or ``filter out'', versions which do not meet their
criteria for quality. This section describes the way monotone
represents and reasons about quality information.

Monotone often views the collection of revisions as a directed graph,
in which revisions are the nodes and changes between revisions are the
edges. We call this the @dfn{revision graph}. The revision graph has a
number of important subgraphs, many of which overlap. For example,
each branch is a subgraph of the revision graph, containing only the
nodes carrying a particular @code{branch} cert.

Many of monotone's operations involve searching the revision graph for
the ancestors or descendents of a particular revision, or extracting
the ``heads'' of a subgraph, which is the subgraph's set of nodes with
no descendents. For example, when you run the @code{update} command,
monotone searches the subgraph consisting of descendents of the base
revision of the current workspace, trying to locate a unique head to
update the base revision to.

Monotone's quality assurance mechanisms are mostly based on
restricting the subgraph each command operates on. There are two
methods used to restrict the subgraph:

@itemize
@item
By restricting the set of trusted @code{branch} certificates, you
can require that specific code reviewers have approved of each edge in
the subgraph you focus on.
@item
By restricting the set of trusted @code{testresult} certificates, you
can require that the @emph{endpoints} of an update operation have a
certificate asserting that the revision in question passed a certain
test, or testsuite.
@end itemize

The evaluation of trust is done on a cert-by-cert basis by calling a
set of lua hooks: @code{get_revision_cert_trust},
@code{get_manifest_cert_trust} and @code{get_file_cert_trust}. These
hooks are only called when a cert has at least one good signature from
a known key, and are passed @emph{all} the keys which have signed the
cert, as well as the cert's ID, name and value. The hook can then
evaluate the set of signers, as a group, and decide whether to grant
or deny trust to the assertion made by the cert.

The evaluation of testresults is controlled by the
@code{accept_testresult_change} hook. This hook is called when
selecting update candidates, and is passed a pair of tables describing
the @code{testresult} certs present on the source and proposed
destination of an update. Only if the change in test results are
deemed ``acceptable'' does monotone actually select an update target
to merge into your workspace. 

For details on these hooks, see the @ref{Hook Reference}.

@page
@node    Vars
@section Vars

Every monotone database has a set of @emph{vars} associated with it.
Vars are simple configuration variables that monotone refers to in some
circumstances; they are used for configuration that monotone needs to be
able to modify itself, and that should be per-database (rather than
per-user or per-workspace, both of which are supported by
@file{monotonerc} scripts).  Vars are local to a database, and never
transferred by netsync.

A var is a @emph{name} = @emph{value} pairing inside a @emph{domain}.
Domains define what the vars inside it are used for; for instance, one
domain might contain database-global settings, and particular vars
inside it would define things like that database's default netsync
server.  Another domain might contain key fingerprints for servers that
monotone has interacted with in the past, to detect man-in-the-middle
attacks; the vars inside this domain would map server names to their
fingerprints.

You can set vars with the @command{set} command, delete them with the
@command{unset} command, and see them with the @command{ls vars}
command.  See the documentation for these specific commands for more
details.

@heading Existing vars

There are several pre-defined domains that monotone knows about:

@table @code

@item database
Contains database-global configuration information.  Defined names are:
@table @code
@item default-exclude-pattern
The default branch exclusion glob pattern for netsync operations to
use. Automatically set by first use of netsync.
@item default-include-pattern
The default branch glob pattern for netsync operations to use.
Automatically set by first use of netsync.
@item default-server
The default server for netsync operations to use.  Automatically set
by first use of netsync.
@end table

@item known-servers
Contains key hashes for servers that we have netsynced with in the
past.  Analogous to @command{ssh}'s @file{known_hosts} file, this is
needed to detect man-in-the-middle attacks.  Automatically set the first
time you netsync with any given server.  If that server's key later
changes, monotone will notice, and refuse to connect until you have run
@command{monotone unset known-servers @var{server-name}}.

@end table

@page
@node    Reserved Files
@section Reserved Files

A monotone workspace consists of control files and non-control
files. Each type of file can be versioned or non-versioned. These
classifications lead to four groups of files:

@itemize
@item versioned control files
@item non-versioned control files
@item versioned non-control files
@item non-versioned non-control files
@end itemize

Control files contain special content formatted for use by
monotone. Versioned files are recorded in a monotone database and have
their state tracked as they are modified. 

If a control file is versioned, it is considered @emph{part of} the
state of the workspace, and will be recorded as a manifest
entry. If a control file is not versioned, it is used to @emph{manage}
the state of the workspace, but it not considered an intrinsic part
of it.

Most files you manage with monotone will be versioned non-control
files. For example, if you keep source code or documents in a monotone
database, they are versioned non-control files. Non-versioned,
non-control files in your workspace are generally temporary or junk
files, such as backups made by editors or object files made by
compilers. Such files are ignored by monotone.

@heading Identifying control files

Control files are identified by their names. Non-control files can
have any name @emph{except} the names reserved for control files. The
names of control files follow a regular pattern:

@table @asis
@item Versioned control files
Any file name beginning with @file{.mt-}
@item Non-versioned control files
Any file in the directory @file{MT/}
@end table

@heading Existing control files

The following control files are currently used. More control files may be added
in the future, but they will follow the patterns given above.

@table @file
@item .mt-attrs
Contains versioned attributes of files, associated with the files'
pathnames.
@item .mt-ignore
Contains a list of regular expression patterns, one per line. If it exists,
any file with a name matching one of these patterns is ignored.
@item MT/wanted-testresults
Contains a list of testresult key names, one per line. If it exists, update
will only select revisions that do not have regressions according to the given
testresult keys.
@item MT/revision
Contains the identity of the ``base'' revision of the workspace.
Each workspace has a base revision. When the workspace is
committed, the base revision is considered to be the ancestor of the
committed revision.
@item MT/options
Contains ``sticky'' command-line options such as @option{--db} or 
@option{--branch}, such that you do not need to enter them repeatedly
after checking out a particular workspace.
@item MT/work
Contains a list of additions, deletions, and renames which have occurred
in the current workspace, relative to the base version.
@item MT/log
Contains log messages to append to the ``changelog'' cert upon
commit. The user may add content to this file while they work.  Upon a
successful commit monotone will empty the file making it ready for the
next edit/commit cycle.
@item MT/inodeprints
If this file exists, monotone considers the directory to be in
@ref{Inodeprints} mode, and uses this file to cache the inodeprints.
@item MT/debug
If monotone detects a bug in itself or crashes, then before exiting it
dumps a log of its recent activity to this file, to aid in debugging.
@end table


@page
@node    Reserved Certs
@section Reserved Certs

Every certificate has a name. Some names have meaning which is built
in to monotone, others may be used for customization by a particular
user, site, or community. If you wish to define custom certificates,
you should prefix such certificate names with @code{x-}. For example,
if you want to make a certificate describing the existence of security
vulnerabilities in a revision, you might wish to create a certificate
called @code{x-vulnerability}.  Monotone reserves all names which do
not begin with @code{x-} for possible internal use. If an @code{x-}
certificate becomes widely used, monotone will likely adopt it as a
reserved cert name and standardize its semantics.

Most reserved certificate names have no meaning yet; some do. Usually
monotone is also responsible for @emph{generating} these certificates,
so you should generally have no cause to make them yourself. They are
described here to help you understand monotone's operation.

The pre-defined, reserved certificate names are:

@table @code

@item author
This cert's value is the name of a person who committed the revision
the cert is attached to. The cert is generated when you commit a
revision. It is displayed by the @code{log} command.

@item branch
This cert's value is the name of a branch. A @code{branch} cert
associates a revision with a branch. The revision is said to be ``in
the branch'' named by the cert. The cert is generated when you commit
a revision, either directly with the @code{commit} command or
indirectly with the @code{merge} or @code{propagate} commands. The
@code{branch} certs are read and directly interpreted by @emph{many}
monotone commands, and play a fundamental role in organizing work in
any monotone database.

@item changelog
This cert's value is the change log message you provide when you
commit a revision. It is displayed by the @code{log} command.

@item comment
This cert's value is an additional comment, usually provided after
committing, about a revision. Certs with the name @code{comment} can
be applied to files as well, and will be shown by the @code{log}
command.

@item date
This cert's value is an ISO date string indicating the time at which a
revision was committed. It is displayed by the @code{log} command, and
may be used as an additional heuristic or selection criterion in other
commands in the future.

@item tag
This cert's value is a symbolic name given to a revision, which may be
used in the future as a way of selecting versions for @code{checkout}.

@item testresult
This cert's value is interpreted as a boolean string, either @code{0}
or @code{1}. It is generated by the @code{testresult} command and
represents the results of running a particular test on the underlying
revision. Typically you will make a separate signing key for each test
you intend to run on revisions. This cert influences the
@command{update} algorithm.

@end table

@page
@node    Naming Conventions
@section Naming Conventions

Some names in monotone are private to your work, such as
filenames. Other names are potentially visible outside your project,
such as @sc{rsa} key identifiers or branch names. It is possible that if
you choose such names carelessly, you will choose a name which someone
else in the world is using, and subsequently you may cause confusion
when your work and theirs is received simultaneously by some third
party.

We therefore recommend two naming conventions:

@itemize
@item 
For @sc{rsa} keys, use the name of an active email address you
own. This will minimize conflicts, and also serves as a mnemonic to
associate your personal @emph{identity} with signatures made with your
key. For example, monotone's primary author uses the key identifier
@code{graydon@@pobox.com}.

@item
For branch names, select any name you like but prefix it with the
``inverted domain name'' of a DNS domain you control or are otherwise
authorized to use. This behavior mimics the package naming convention
in the java programming language. For example, monotone itself is
developed within the @code{net.venge.monotone} branch, because the
author owns the DNS domain @code{venge.net}.
@end itemize

@page
@node    File Attributes
@section File Attributes

Monotone contains a mechanism for storing @dfn{persistent file
attributes}.  These differ from file certificates in an important way:
attributes are associated with a path name in your workspace,
rather than a particular version of a file. Otherwise they are
similar: a file attribute associates a simple name/value pair with a
file in your workspace.

The attribute mechanism is motivated by the fact that some people like
to store executable programs in version control systems, and would like
the programs to remain executable when they check out a workspace.
For example, the @code{configure} shell script commonly shipped with
many programs should be executable. 

Similarly, some people would like to store devices, symbolic links,
read-only files, and all manner of extra attributes of a file, not
directly related to a file's data content. 

Rather than try to extend the manifest file format to accommodate
attributes, monotone requires that you place your attributes in a
specially named file in the root of your workspace. The file is
called @file{.mt-attrs}, and it has a simple stanza-based format, for
example:

@smallexample
@group
file "analyze_coverage"
execute "true"

file "autogen.sh"
execute "true"
otherattr "bob"
@end group
@end smallexample

Each stanza of the @file{.mt-attrs} file assigns attributes to a file in
your workspace.  The first line of each stanza is @code{file}
followed by the quoted name of the file you want to assign attributes
to.  Each subsequent line is the name of an attribute, followed by a
quoted value for that attribute.  Stanzas are separated by blank lines.

As a convenience, you can use the @code{monotone attr} command to set
and view the values of these attributes; see @ref{Workspace}.

You can tell monotone to automatically take actions based on these
attributes by defining hooks; see the @code{attr_functions} entry in
@ref{Hook Reference}.

Every time your workspace is written to, monotone will look for the
@file{.mt-attrs} file, and if it exists, run the corresponding hooks
registered for each attribute found in the file. This way, you can
extend the vocabulary of attributes understood by monotone simply by
writing new hooks.

Aside from its special interpretation, the @file{.mt-attrs} file is a
normal text file. If you want other people to see your attributes, you
should @code{add} and @code{commit} the @file{.mt-attrs} file in your
workspace. If you make changes to it which conflict with changes
other people make, you will have to resolve those conflicts, as plain
text, just as with any other text file in your workspace.

@page
@node    Merging
@section Merging

Monotone has two merging modes, controlled by the @code{manual_merge}
attribute.
By default all files are merged in automatic mode, unless the
@code{manual_merge} attribute for that file is present and
@code{true}.
In automatic mode files are merged without user intervention, using
monotone internal three-way merging algorithm. 
Only if there are conflicts or an ancestor is not available monotone
switches to manual mode, essentially escalating the merging to the user.
When working in manual mode, monotone invokes the merge2 (for two-way
merging) or merge3 (three-way) hooks to start an user defined external
merge tool.  
If the tool terminates without writing the merged file, monotone aborts the
merging, reverting any changes made.
By redefining the aforementioned hooks the user can not only choose a
preferred merge tool, but even select different programs for different
file types.  For example, gimp for .png files, OpenOffice.org for
.doc, and so on. 
Starting with monotone 0.20, the @code{manual_merge} attribute is
automatically set at add time for all ``binary'' files, i.e. all files
for which the @code{binary_file} hook returns true. 
Currently, this means all files with extension gif, jpeg, png, bz2, gz
and zip, plus files containing at least one of the following
bytes:
 
@smallexample
@group
0x00 thru 0x06
0x0E thru 0x1a
0x1c thru 0x1f
@end group
@end smallexample

The attribute could also be manually forced or removed using the
appropriate monotone commands.
Remember that monotone switches to manual merging even if only one of
the files to be merged has the @code{manual_merge} attribute set. 

@page
@node    Migrating and Dumping
@section Migrating and Dumping

While the state of your database is logically captured in terms of a
packet stream, it is sometimes necessary or desirable (especially
while monotone is still in active development) to modify the SQL table
layout or storage parameters of your version database, or to make
backup copies of your database in plain text. These issues are not
properly addressed by generating packet streams: instead, you must use
@dfn{migration} or @dfn{dumping} commands.

The @command{monotone db migrate} command is used to alter the SQL
schema of a database. The schema of a monotone database is identified
by a special hash of its generating SQL, which is stored in the
database's auxiliary tables. Each version of monotone knows which
schema version it is able to work with, and it will refuse to operate
on databases with different schemas. When you run the
@command{migrate} command, monotone looks in an internal list of SQL
logic which can be used to perform in-place upgrades. It applies
entries from this list, in order, attempting to change the database it
@emph{has} into the database it @emph{wants}. Each step of this
migration is checked to ensure no errors occurred and the resulting
schema hashes to the intended value. The migration is attempted inside
a transaction, so if it fails --- for example if the result of
migration hashes to an unexpected value --- the migration is aborted.

If more drastic changes to the underlying database are made, such as
changing the page size of sqlite, or if you simply want to keep a
plain text version of your database on hand, the @command{monotone db
dump} command can produce a plain ASCII SQL statement which generates
the state of your database. This dump can later be reloaded using the
@command{monotone db load} command. 

Note that when reloading a dumped database, the schema of the dumped
database is @emph{included} in the dump, so you should not try to
@command{init} your database before a @command{load}.

@page
@node    Importing from CVS
@section Importing from CVS

Monotone is capable of reading CVS files directly and importing them
into a database. This feature is still somewhat immature, but
moderately large ``real world'' CVS trees on the order of 1GB have
successfully been imported. 

Note however that the machine requirements for CVS trees of this size
are not trivial: it can take several hours on a modern system to
reconstruct the history of such a tree and calculate the millions of
cryptographic certificates involved. We recommend experimenting with
smaller trees first, to get a feel for the import process.

We will assume certain values for this example which will differ in your case:
@itemize
@item
Your domain name, @code{example.net} in this example.
@item 
Your key name, @code{import@@example.net} in this example.
@item
Your project name, @code{wobbler} in this example.
@item
Your database name, @file{test.db} in this example.
@item
Your CVS repository path, @file{/usr/local/cvsroot} in this example.
@item
The CVS module name for your project, @code{wobbler} in this example.
@end itemize

Accounting for these differences at your site, the following is an
example procedure for importing a CVS repository ``from scratch'', and
checking the resulting head version of the import out into a working
copy:

@smallexample
@group
$ monotone --db=test.db db init
$ monotone --db=test.db genkey import@@example.net
$ monotone --db=test.db --branch=net.example.wobbler cvs_import /usr/local/cvsroot/wobbler
$ monotone --db=test.db --branch=net.example.wobbler checkout wobber-checkout
@end group
@end smallexample

@page
@node    Monotone as CVS client
@section Monotone as a CVS client

Importing your project into monotone is the way to go if you want to migrate
from CVS to monotone but does not help much if you can not stop using CVS on
the server. Either because you don't have full control over the server (e.g.
sourceforge) or because some developers continue to use CVS.

Why should you prefer monotone as a cvs client over the original?
@itemize
@item
You want to work offline (without contacting the server). E.g. to revert
changes, diff between versions, commit new changes or browse commit logs.
@item
You want to use monotone-viz (graph visualization) against the repository.
Unfortunately a CVS graph is rather boring since it's linear.
@item
You like to use kdiff3 for easy three way merging.
@item
You prefer monotone's features for repeated merging and propagation between
branches over CVS hand-operated tagging and merging.
@item
You can experiment with bigger reworkings without putting them on the server.
@end itemize

@subsection How to use it:
@anchor{cvssync}

Change your working directory to the topmost directory of a CVS project and
enter

@smallexample
@group
$ monotone --branch=org.gnome.cvs.glade-- cvs_takeover glade--
@end group
@end smallexample

This imports your working directory into monotone under the branch name
@code{org.gnome.cvs.glade--}. You can delete the CVS directories and
continue to work on this project with monotone.

If the CVS module name @code{glade--} is identical to the name of the
toplevel directory (common use) you can omit it, sometimes it is a path
(e.g. @code{glade--/src/SourceWriter}) and you have to specify it.

Side note: If you have changed files since your last checkin monotone creates
two nodes: The unknown contents but known revision number of your last update
and the known contents of your future checkin yet unknown to the server and 
without a revision number.


Alternatively you can import (a part of) the history of the project from the
server:

@smallexample
@group
$ monotone --branch=org.gnome.cvs.glade-- --since=2005-01-01T00:00:00 cvs_pull :pserver:anonymous@@anoncvs.gnome.org:/cvs/gnome glade--
@end group
@end smallexample

This command retrieves the full history since Jan 1st 2005 of the
@code{glade--} project from @code{anoncvs.gnome.org} via the @code{pserver}
protocol. If you omit @code{--since} you get full history. 

Beware! The CVS server is not designed to efficiently access really old
revisions, so generating the full history is really stressing the server.

If you want to pull new revisions on the server into your monotone database
(like @code{cvs update}) simply enter @code{monotone cvs_pull}.

So how to get your changes back into the server:

@smallexample
@group
$ monotone --branch=org.gnome.cvs.glade-- cvs_push
@end group
@end smallexample

This pushes all commits back to the CVS server. Monotone will pass your
changelog along with commit time and author certificate to the CVS server.
If you merged two branches, monotone will gather all changelogs unknown to
the server and attach it to the merge.

If you change into your working directory you can omit specifying the branch
as usual.

@page
@subsection Design Goals

@itemize
@item
Cvssync (as this feature is called) should be nearly as bandwith efficient
as this functionality can get (at least it should never be more expansive
than using CVS itself).
@item
Synchronizing between multiple CVS servers for the same project should be
possible (though this might get confusing and inconvenient).
@end itemize

@subsection Shortcomings

@itemize
@item
creating new subdirectories on the CVS server is yet unimplemented
@item
a patch (MD5) failure is not handled gracefully
@item
full history import stresses the server (CVS' fault)
@item
not designed with memory efficiency in mind (like the cvs import feature)
@item
relies on checkin time to reconstruct the graph instead of RCS revisions
@item
no project creation on a CVS server (initial import)
@end itemize

@subsection Advanced Use:

@itemize
@item
If a fork occurs during @code{cvs_push} you are instructed to select a 
direction using the @code{--revision} option. Simply choose the branch you
want to see in details in CVS and specify its revision.
@item
Working with CVS branches and tags. To be written once I gathered 
my own experience with this feature.
@end itemize

@subsection Future directions:

Perhaps multiple repository pull (mass update) in one command.

@page
@node    CVS Phrasebook
@chapter CVS Phrasebook

This chapter translates common CVS commands into monotone commands. It
is an easy alternative to reading through the complete command
reference.

@heading Checking Out a Tree

@multitable @columnfractions .4 .4
@item
@smallexample
@group
$ CVSROOT=:pserver:cvs.foo.com/wobbler
$ cvs -d $CVSROOT checkout -r 1.2
@end group
@end smallexample
@tab
@smallexample
@group
$ monotone pull www.foo.com com.foo.wobbler*
$ monotone checkout --revision=fe37 wobbler
@end group
@end smallexample
@end multitable

The CVS command contacts a network server, retrieves a revision, and
stores it in your workspace. There are two cosmetic differences
with the monotone command: remote databases are specified by hostnames
and globs, and revisions are denoted by @sc{sha1} values (or
selectors).

There is also one deep difference: pulling revisions into your
database is a separate step from checking out a single revision; after
you have pulled from a network server, your database will contain
@emph{several} revisions, possibly the entire history of a
project. Checking out is a separate step, after communication, which
only copies a particular revision out of your database and into a named
directory.

@heading Committing Changes

@multitable @columnfractions .4 .4
@item
@smallexample
@group
$ cvs commit -m "log message"
@end group
@end smallexample
@tab
@smallexample
@group
$ monotone commit --message="log message"
$ monotone push www.foo.com com.foo.wobbler*
@end group
@end smallexample
@end multitable

As with other networking commands, the communication step with
monotone is explicit: committing changes only saves them to the local
database. A separate command, @command{push}, sends the changes to a
remote database.

@heading Incorporating New Changes

@multitable @columnfractions .4 .4
@item
@smallexample
@group
$ cvs update -d
@end group
@end smallexample
@tab
@smallexample
@group
$ monotone pull www.foo.com com.foo.wobbler*
$ monotone merge
$ monotone update
@end group
@end smallexample
@end multitable

This command, like other networking commands, involves a separate
communication step with monotone. The extra command, @command{merge},
ensures that the branch your are working on has a unique head. You can
omit the @command{merge} step if you only want @command{update} to
examine descendents of your base revision, and ignore other heads on
your branch.

@heading Moving Workspace to Another Revision

@multitable @columnfractions .4 .4
@item
@smallexample
@group
$ cvs update -r FOO_TAG -d
@end group
@end smallexample
@tab
@smallexample
@group
$ monotone update -r 830ac1a5f033825ab364f911608ec294fe37f7bc
$ monotone update -r t:FOO_TAG
@end group
@end smallexample
@end multitable

With a revision parameter, the @command{update} command operates
similarly in monotone and CVS. One difference is that a subsequent
@command{commit} will be based off the chosen revision in monotone,
while a @command{commit} in the CVS case is not possible without going
back to the branch head again.  This version of @command{update} can
thus be very useful if, for example, you discover that the tree you are
working against is somehow broken --- you can @command{update} to an
older non-broken version, and continue to work normally while waiting
for the tree to be fixed.

@heading Viewing Differences

@multitable @columnfractions .4 .4
@item
@smallexample
@group
$ cvs diff
@end group
@end smallexample
@tab
@smallexample
@group
$ monotone diff
@end group
@end smallexample
@item
@smallexample
@group
$ cvs diff -r 1.2 -r 1.4 myfile
@end group
@end smallexample
@tab
@smallexample
@group
$ monotone diff -r 3e7db -r 278df myfile
@end group
@end smallexample
@end multitable

Monotone's @command{diff} command is modeled on that of CVS, so the
main features are the same: @command{diff} alone prints the
differences between your workspace and its base revision, whereas
@command{diff} accompanied by two revision numbers prints the
difference between those two revisions. The major difference between
CVS and monotone here is that monotone's revision numbers are
@emph{revision IDs}, rather than file IDs.  If one leaves off the file
argument, then diff can print the difference between two entire trees.

@heading Showing Workspace Status

@multitable @columnfractions .4 .4
@item
@smallexample
@group
$ cvs status
@end group
@end smallexample
@tab
@smallexample
@group
$ monotone status
@end group
@end smallexample
@end multitable

This command operates similarly in monotone and CVS. The only major
difference is that monotone's @command{status} command always gives a
status of the whole tree, and outputs a more compact summary than CVS.

@heading Adding Directories and Files to Workspace

@multitable @columnfractions .4 .4
@item
@smallexample
@group
$ cvs add dir
$ cvs add dir/subdir
$ cvs add dir/subdir/file.txt
@end group
@end smallexample
@tab
@smallexample
@group
$ monotone add dir/subdir/file.txt
@end group
@end smallexample
@end multitable

Monotone does not explicitly store directories, so adding a file only
involves adding the file's complete path, including any directories.
Directories are created as needed, and empty directories are ignored.


@heading Removing Directories and Files from Workspace

@multitable @columnfractions .4 .4
@item
@smallexample
@group
$ rm file.txt
$ cvs remove file.txt
@end group
@end smallexample
@tab
@smallexample
@group
$ monotone drop file.txt
@end group
@end smallexample
@end multitable

Monotone does not require that you erase a file from the workspace
before you drop it. Dropping a file merely removes its entry in the
manifest of the current revision unless you give it the @command{--execute}
flag, which tells monotone to go ahead and also remove it from the filesystem.


@heading Viewing History

@multitable @columnfractions .4 .4
@item
@smallexample
@group
$ cvs log [file]
@end group
@end smallexample
@tab
@smallexample
@group
$ monotone log [file]
@end group
@end smallexample
@end multitable

Unlike CVS log, monotone log can also be used without a working
directory; but in this case you must pass a @option{--revision} argument
to tell monotone where to start displaying the log from.

@heading Importing a New Project

@multitable @columnfractions .4 .4
@item
@smallexample
@group
$ cvs import wobbler vendor start
@end group
@end smallexample
@tab
@smallexample
@group
$ monotone --db=/path/to/database.db --branch=com.foo.wobbler setup .
$ monotone add .
$ monotone commit
@end group
@end smallexample
@end multitable

The @command{setup} command turns an ordinary directory into a
monotone workspace.  After that, you can add your files and commit
them as usual.

@heading Initializing a Repository

@multitable @columnfractions .4 .4
@item
@smallexample
@group
$ cvs init -d /path/to/repository
@end group
@end smallexample
@tab
@smallexample
@group
$ monotone db init --db=/path/to/database.db 
@end group
@end smallexample
@end multitable

Monotone's ``repository'' is a single-file database, which is created
and initialized by this command. This file is only ever used by you,
and does not need to be in any special location, or readable by other
users.


@node    Command Reference
@chapter Command Reference

Monotone has a large number of commands. To help navigate through them
all, commands are grouped into logical categories.

@menu
* Tree::             Operations on tree states in your database
* Workspace::        Operations on your workspace
* Network::          Communication with the network
* Informative::      Production of descriptive reports
* Key and Cert::     General operations on keys or certificates
* Certificate::      Special operations on certificates
* Packet I/O::       Production or consumption of packets
* Database::         Manipulation of your database as a whole
* Automation::       Running monotone from other programs
* RCS::              Importing legacy version control files
@end menu


@page
@node    Tree
@section Tree

@ftable @command
@itemx monotone cat @var{path}
@itemx monotone cat --revision=@var{id} @var{path}

Write the contents of a specific file @var{path} to standard output.

Without a @option{--revision} argument, the command outputs the 
contents of @var{path} as found in the current revision. This requires 
the command be executed from within a workspace.

With an explicit @option{--revision} argument, the command outputs
contents of @var{path} at that revision.

@item monotone checkout --revision=@var{id} @var{directory}
@itemx monotone co --revision=@var{id} @var{directory}
@itemx monotone --branch=@var{branchname} checkout @var{directory}
@itemx monotone --branch=@var{branchname} co @var{directory}

These commands copy a revision @var{id} out of your database, writing
the string @var{id} into the file
@file{@var{directory}/MT/revision}. These commands then copy every
file version listed in the revision's manifest to paths under
@var{directory}. For example, if the revision's manifest contains
these entries:

@smallexample
@group
84e2c30a2571bd627918deee1e6613d34e64a29e  Makefile
c61af2e67eb9b81e46357bb3c409a9a53a7cdfc6  include/hello.h
97dfc6fd4f486df95868d85b4b81197014ae2a84  src/hello.c
@end group
@end smallexample

Then the following files are created:
@smallexample
@group
@var{directory}/Makefile
@var{directory}/include/hello.h
@var{directory}/src/hello.c
@end group
@end smallexample

If you wish to @command{checkout} in the current directory, you can
supply the special name @file{.} (a single period) for
@var{directory}.

If no @var{id} is provided, as in the latter two commands, you
@emph{must} provide a @var{branchname}; monotone will attempt to infer
@var{id} as the unique head of @var{branchname} if it exists.


@item monotone disapprove @var{id}

This command records a disapproval of the changes between @var{id}'s
ancestor and @var{id}. It does this by committing the @i{inverse}
changes as a new revision descending from @var{id}. The new revision
will show up as a new head and thus a subsequent @command{merge} will
incorporate the inverse of the disapproved changes in the other head(s).

Conceptually, @code{disapprove}s contract is that disapprove(A) gives a 
revision B such that whenever B is merged with a descendent D of A the merge 
will result in what D ``would have looked like'' if A had never happened.

Note that as a consequence of this contract the @code{disapprove} command 
only works if @var{id} has exactly one ancestor, since it hasn't been 
worked out how to generate such a descendent in the multi-ancestor case.


@item monotone heads --branch=@var{branchname}
This command lists the ``heads'' of @var{branchname}. 

The ``heads'' of a branch is the set of revisions which are members of
the branch, but which have no descendents. These revisions are
generally the ``newest'' revisions committed by you or your
colleagues, at least in terms of ancestry. The heads of a branch may
not be the newest revisions, in terms of time, but synchronization of
computer clocks is not reliable, so monotone usually ignores time.


@item monotone merge [--branch=@var{branchname}]
@item monotone merge --lca [--branch=@var{branchname}]
This command merges the ``heads'' of @var{branchname}, if there are
multiple heads, and commits the results to the database, marking the
resulting merged revision as a member of @var{branchname}. The merged
revision will contain each of the head revision IDs as ancestors.

Merging is performed by repeated pairwise merges: two heads are
selected, then their least common ancestor is located in the ancestry
graph and these 3 revisions are provided to the built-in 3-way merge
algorithm. The process then repeats for each additional head, using
the result of each previous merge as an input to the next.

The @option{--lca} option is provided as a temporary workaround for some
inherent problems with 3-way merging; if you encounter a huge number of
spurious conflicts, or get an invariant failure, then you may wish to
try using @option{--lca}.  Using it @emph{can}, in certain
circumstances, cause some edits that should be conflicts to merge
cleanly instead, which is why it is not the default; but these cases are
rare, and until we can find something better than 3-way merging to use,
you may find this option more convenient than @command{explicit_merge}

@item monotone propagate @var{sourcebranch} @var{destbranch}
@item monotone propagate --lca @var{sourcebranch} @var{destbranch}
This command takes a unique head from @var{sourcebranch} and merges it
with a unique head of @var{destbranch}, using the least common
ancestor of the two heads for a 3-way merge. The resulting revision is
committed to @var{destbranch}. If
either @var{sourcebranch} or @var{destbranch} has multiple heads,
@command{propagate} aborts, doing nothing.

The purpose of @command{propagate} is to copy all the changes on
@var{sourcebranch}, since the last @command{propagate}, to
@var{destbranch}. This command supports the idea of making separate
branches for medium-length development activities, such as
maintenance branches for stable software releases, trivial bug fix
branches, public contribution branches, or branches devoted to the
development of a single module within a larger project.

The @option{--lca} option is provided as a temporary workaround for some
inherent problems with 3-way merging; if you encounter a huge number of
spurious conflicts, or get an invariant failure, then you may wish to
try using @option{--lca}.  Using it @emph{can}, in certain
circumstances, cause some edits that should be conflicts to merge
cleanly instead, which is why it is not the default; but these cases are
rare, and until we can find something better than 3-way merging to use,
you may find this option more convenient than @command{explicit_merge}

@item monotone explicit_merge @var{id} @var{id} @var{destbranch}
@itemx monotone explicit_merge @var{id} @var{id} @var{ancestor} @var{destbranch}
This command merges exactly the two @var{id}s you give it, and places
the result in branch @var{destbranch}.  It is useful when you need more
control over the merging process than @code{propagate} or @code{merge}
give you.  For instance, if you have a branch with three heads, and you
only want to merge two of them, you can use this command.  Or if you
have a branch with two heads, and you want to propagate one of them to
another branch, again, you can use this command. If the optional
@var{ancestor} argument is given, the merge uses that revision as the
common ancestor instead of the default ancestor.

@item monotone merge_into_dir @var{sourcebranch} @var{destbranch} @var{dir}
This command takes a unique head from @var{sourcebranch} and merges it
into a unique head of @var{destbranch}, as a directory. The resulting
revision is committed to @var{destbranch}. If either @var{sourcebranch} or
@var{destbranch} has multiple heads, @command{merge_into_dir} aborts, doing
nothing.

The purpose of @command{merge_into_dir} is to permit a project to contain
another project in such a way that @command{propagate} can be used to keep
the contained project up-to-date. It is meant to replace the use of nested
checkouts in many circumstances.

Note that @command{merge_into_dir} @emph{does not} permit changes made to the
contained project in @var{destbranch} to be propagated back to
@var{sourcebranch}. Attempting this would lead to @var{sourcebranch} containing
both projects nested as in @var{destbranch} instead of only the project
originally in @var{sourcebranch}, which is almost certainly not what would be
intended.
@end ftable



@page
@node    Workspace
@section Workspace

@ftable @command
@item monotone setup [@var{directory}]
This command prepares @var{directory} as a monotone workspace,
by creating and populating the @file{MT} directory with basic
information.  This information must include at least the branch and the
database to be used, both of which will be placed in the
@file{MT/options} file.

This can be used with an empty directory to start a new blank project,
or within an existing directory full of files, prior to using
@command{monotone commit}. If no directory is specified, the current
directory is used.


@item monotone add @var{pathname...}
@item monotone add --unknown
This command places ``add'' entries for the paths specified in
@var{pathname...} in the workspace's ``work list''. The work list
of your workspace is located at @file{MT/work}, and is a list of
explicit pathname changes you wish to commit at some future time, such
as addition, removal or renaming of files.

As a convenience, the @option{--unknown} option can be used; this
option will cause all of the files listed by @command{monotone list
unknown} to be added.

While this command places an ``add'' entry on your work list, it does
not immediately affect your database. When you @command{commit} your
workspace, monotone will use the work list to build a new revision,
which it will then commit to the database. The new revision will have
any added entries inserted in its manifest.


@item monotone [--execute] drop @var{pathname...}
@itemx monotone drop --missing
This command places ``drop'' entries for the paths specified in
@var{pathname...} in the workspace's ``work list''. The work list of
your workspace is located at @file{MT/work}, and is a list of
explicit pathname changes you wish to commit at some future time, such
as addition, removal, or renaming of files.  This command also removes
any attributes on @var{pathname}; see @ref{File Attributes} for more
details.  If you use the @option{--missing} flag it will add drop
entries for any paths that monotone is tracking for which you have
already removed the files from the filesystem, in addition to all those
specified in @var{pathname...}.

While this command places a ``drop'' entry on your work list, it does
not immediately affect your database. When you @command{commit} your
workspace, monotone will use the work list to build a new revision,
which it will then commit to the database. The new revision will have
any dropped entries removed from its manifest.

Currently this command does @emph{not} actually delete the file
@var{src} in your filesystem; if you want to actually delete the file,
you should run @command{drop}, and then perform the actual delete using
whatever mechanism you normally use to delete files.

The option @option{--execute} will make ``drop'' perform the actual
deletion operations in the filesystem.  It will ignore files or
directories which have already been deleted.

@item monotone [--execute] rename @var{src} @var{dst}
@itemx monotone [--execute] rename @var{src1} @var{...} @var{dst/}
This command places ``rename'' entries for the paths specified in
@var{src} and @var{dst} in the workspace's ``work list''. The second form
renames a number of source paths to the given destination. The work
list of your workspace is located at @file{MT/work}, and is a list of
explicit pathname changes you wish to commit at some future time, such
as addition, removal, or renaming of files.  This command also moves any
attributes on @var{src} to @var{dst}; see @ref{File Attributes} for more
details.

While this command places a ``rename'' entry on your work list, it
does not immediately affect your database. When you @command{commit}
your workspace, monotone will use the work list to build a new
revision, which it will then commit to the database. The new revision
will have any renamed entries in its manifest adjusted to their new
names.

The option @option{--execute} will make ``rename'' perform the actual
rename operations in the filesystem. It will ignore missing source files
and will not overwrite existing destination files.

@item monotone commit
@itemx monotone commit --message=@var{logmsg}
@itemx monotone commit --message-file=@var{logfile}
@itemx monotone commit @var{pathname...}
@itemx monotone commit --message=@var{logmsg} @var{pathname...} 
@itemx monotone commit --message-file=@var{logfile} @var{pathname...} 

This command looks at your workspace, decides which files have
changed, and saves the changes to your database. It does this by loading
the revision named in the @file{MT/revision} file, locating the base
manifest for your workspace, applying any changes described in the
@file{MT/work} file, and then comparing the updated base manifest to the
files it finds in your workspace, to determine which files have been
edited.

For each edited file, a delta is copied into the database. Then the
newly constructed manifest is recorded (as a delta) and finally the
new revision.  Once all these objects are recorded in you database,
@command{commit} overwrites the @file{MT/revision} file with the new
revision ID, and deletes the @file{MT/work} file.

Specifying pathnames to @command{commit} restricts the set of changes
that are visible and results in only a partial commit of the working
copy. Changes to files not included in the specified set of pathnames
will be ignored and will remain in the workspace until they are
included in a future commit. With a partial commit, only the relevant
entries in the @file{MT/work} file will be removed and other entries
will remain for future commits.

From within a subdirectory of the workspace the @command{commit}
command will, by default, include @emph{all changes} in the working
copy.  Specifying only the pathname "." will restrict @command{commit}
to files changed within the current subdirectory of the workspace.

The @option{--message} and @option{--message-file} options are mutually
exclusive.  Both provide a @var{logmsg} describing the commit. 
@option{--message-file} actually specifies the name of the file containing
the log message, while @option{--message} provides it directly.

The @file{MT/log} file can be edited by the user during their daily work
to record the changes made to the workspace. When running the
@command{commit} command without a @var{logmsg} supplied, the contents
of the @file{MT/log} file will be read and passed to the Lua hook
@code{edit_comment} as a second parameter named @var{user_log_content}.
If the commit is successful, the @file{MT/log} file is cleared of
all content making it ready for another edit/commit cycle.

If a @option{--branch} option is specified, the @command{commit} command
commits to this branch (creating it if necessary).  The branch becomes
the new default branch of the workspace.

The @command{commit} command also synthesizes a number of
certificates, which it attaches to the new manifest version and copies
into your database:
@itemize
@item 
An @code{author} cert, indicating the person responsible for the changes
leading to the new revision.  Normally this defaults to your signing key
or the return value of the @code{get_author} hook; you may override this
by passing the @option{--author} option to commit.  This is useful when
committing a patch on behalf of someone else, or when importing ``by
hand'' from another version control system.
@item 
A @code{branch} cert, indicating the branch the committed revision
belongs to.
@item
A @code{date} cert, indicating when the new revision was created.
Normally this defaults to the current time; you may override this by
passing the @option{--date} option to commit.  This is useful when
importing ``by hand'' from another version control system.
@item
A @code{changelog} cert, containing the ``log message'' for these
changes.  If you provided @var{logmsg} on the command line, this text
will be used, otherwise @command{commit} will run the Lua hook
@code{edit_comment (@var{commentary}, @var{user_log_content})}, which
typically invokes an external editor program, in which you can compose
and/or review your log message for the change.
@end itemize

@item monotone revert @var{pathname...}
@itemx monotone revert --missing @var{pathname...}
This command changes your workspace, so that changes you have made
since the last checkout or update are discarded. The command is
restricted the set of files or directories given as arguments.  To
revert the entire workspace, use @command{revert} "." in the
top-level directory. Specifying "." in a subdirectory will restrict
@command{revert} to files changed within the current subdirectory.

If the flag @option{--missing} is given it reverts (ie, restores) any
files which monotone has listed in its manifest, but which have been
deleted from the workspace.  Only missing files matching the given
file or directory arguments are reverted.

@item monotone update
@itemx monotone update --revision=@var{revision}
Without a @option{--revision} argument, this command incorporates
``recent'' changes found in your database into your workspace. It
does this by performing 3 separate stages. If any of these stages
fails, the update aborts, doing nothing. The stages are:

@itemize
@item
Examine the ancestry graph of revisions in your database, and (subject
to trust evaluation) select the set of all descendents of your working
copy's base revision. Call this set the ``candidates'' of the update.
@item
Remove any candidates which lack acceptable testresult
certificates. From the remaining candidates, select the deepest child
by ancestry and call it the ``target'' of the update.
@item 
Merge the target of the update with the workspace, in memory, and
if the merge is successful, write the result over top of the working
copy.
@end itemize

With an explicit @option{--revision} argument, the command uses that revision
as the update target instead of finding an acceptable candidate.

The effect is always to take whatever changes you have made in the
workspace, and to ``transpose'' them onto a new revision, using
monotone's 3-way merge algorithm to achieve good results.  Note that
with the explicit @option{--revision} argument, it is possible to update
``backwards'' or ``sideways'' in history --- for example, reverting to
an earlier revision, or if your branch has two heads, updating to the
other.  In all cases, the end result will be whatever revision you
specified, with your local changes (and only your local changes)
applied.

If a @option{--branch} option is specified, the @command{update} command
tries to select the revision to update to from this branch.  The branch
becomes the new default branch of the workspace (even if you also
specify an explicit @option{--revision} argument).

@item monotone refresh_inodeprints
This command puts the current workspace into @ref{Inodeprints} mode,
if it was not already, and forces a full inodeprints cache refresh.
After running this command, you are guaranteed that your workspace is
in inodeprints mode, and that the inodeprints cache is accurate and up
to date.

@item monotone [--branch @var{destination}] cvs_takeover [@var{module}]
Imports a CVS checkout into a monotone database for future editing. If files
were locally changed this creates two revisions. 
See also @xref{cvssync,,cvssync introduction}.

@item monotone pivot_root [--execute] pivot_root @var{new_root} @var{put_old}
Most users will never need this command.  It is primarily useful in
certain tricky cases where one wishes to combine several projects
into one, or split one project into several. See also @command{merge_into_dir}.

Its effect is to rename the directory whose name is currently
@var{new_root} to become the root directory of the versioned tree, and
to at the same time rename the directory that is currently the root of
the versioned tree to have the name @var{put_old}.  Conceptually, it
is equivalent to executing the following commands in the root of the
workspace:

@smallexample
@group
$ monotone rename . @var{new_root}/@var{put_old}
$ monotone rename @var{new_root} .
@end group
@end smallexample

Except, of course, that these @command{rename} commands are illegal,
because after the first command the tree has no root at all, and there
is a directory loop.  This illegality is the only reason for
@command{pivot_root}'s existence; internally, the result is treated
exactly like two renames, including with respect to merges and
updates.

The use of @option{--execute} with this command is strongly
recommended, though not required.

@end ftable

@page
@node    Network
@section Network

@ftable @command
@item monotone serve [--bind=[@var{address}][:@var{port}]] @var{glob} [...] [--exclude=@var{exclude-glob}]
@itemx monotone pull [--set-default] [@var{address}[:@var{port}] [@var{glob} [...] [--exclude=@var{exclude-glob}]]]
@itemx monotone push [--set-default] [@var{address}[:@var{port}] [@var{glob} [...] [--exclude=@var{exclude-glob}]]]
@itemx monotone sync [--set-default] [@var{address}[:@var{port}] [@var{glob} [...] [--exclude=@var{exclude-glob}]]]

These commands operate the ``netsync'' protocol built into
monotone. This is a custom protocol for rapidly synchronizing two
monotone databases using a hash tree index. The protocol is ``peer to
peer'', but requires one peer to listen for incoming connections (the
server) and the other peer (the client) to connect to the server.

The network @var{address} specified in each case should be the same: a
host name to listen on, or connect to, optionally followed by a colon
and a port number.  The default port number is 4691. The @var{glob}
parameters indicate a set of branches to exchange.  Multiple @var{glob}
and @option{--exclude} options can be specified; every branch which
matches a @var{glob} exactly, and does not match an @var{exclude-glob},
will be indexed and made available for synchronization.

For example, perhaps Bob and Alice wish to synchronize their
@code{net.venge.monotone.win32} and @code{net.venge.monotone.i18n}
branches. Supposing Alice's computer has hostname
@code{alice.someisp.com}, then Alice might run:

@smallexample
@group
$ monotone --bind=alice.someisp.com serve "net.venge.monotone*"
@end group
@end smallexample

And Bob might run

@smallexample
@group
$ monotone sync alice.someisp.com "net.venge.monotone*"
@end group
@end smallexample

When the operation completes, all branches matching
@code{net.venge.monotone*} will be synchronized between Alice and Bob's
databases.

The @command{pull}, @command{push}, and @command{sync} commands only
require you pass @var{address} and @var{glob} the first time you use one
of them; monotone will memorize this use and in the future default to
the same server and glob.  For instance, if Bob wants to @command{sync}
with Alice again, he can simply run:

@smallexample
@group
$ monotone sync
@end group
@end smallexample

Of course, he can still @command{sync} with other people and other
branches by passing an address or address plus globs on the command
line; this will not affect his default affinity for Alice.  If you ever
do want to change your defaults, simply pass the @option{--set-default}
option when connecting to the server and branch pattern that you want to
make the new default.

In the server, different permissions can be applied to each branch; see
the hooks @code{get_netsync_read_permitted} and
@code{get_netsync_write_permitted} (see @ref{Hook Reference}).

If a @option{--pid-file} option is specified, the command
@command{serve} will create the specified file and record the process
identifier of the server in the file.  This file can then be read to
identify specific monotone server processes.

The syntax for patterns is very simple.  @code{*} matches 0 or more
arbitrary characters.  @code{?} matches exactly 1 arbitrary character.
@code{@{foo,bar,baz@}} matches ``foo'', or ``bar'', or ``baz''.  These
can be combined arbitrarily.  A backslash, @code{\}, can be prefixed to
any character, to match exactly that character --- this might be useful
in case someone, for some odd reason, decides to put a ``*'' into their
branch name.

@item monotone cvs_pull [--since @var{time}] [@var{repository} @var{module} [@var{cvsbranch}]]
@itemx monotone cvs_push [@var{repository} @var{module} [@var{cvsbranch}]]
These commands communicate with a CVS server. @code{cvs_pull} works like
@code{cvs update} and @code{cvs_push} is like @code{cvs commit}.
See also @xref{cvssync,,cvssync introduction}.
@end ftable



@page
@node    Informative
@section Informative

@ftable @command
@item monotone status
@itemx monotone status @var{pathname...}

This command prints a description of the ``status'' of your workspace.
In particular, it prints:
@itemize
@item 
The ``base revision ID'' and ``base manifest ID'', which are
referenced by the file @file{MT/revision}, and which your workspace
is an in-progress descendent of.
@item
The ``current manifest ID'', which is the ID of the manifest which
results from applying @file{MT/work} to the base manifest, and
updating any @sc{sha1} values of files to reflect changes you have
made to the workspace. In other words, the current manifest ID is
the ID which would accompany any revision you would commit, if you ran
@command{monotone commit}.
@item
A list of logical changes between the base and current manifest
versions, such as adds, drops, renames, and patches.
@end itemize

Specifying optional @var{pathname...} arguments to the @command{status}
command restricts the set of changes that are visible and results in
only a partial status of the workspace. Changes to files not included
in the specified set of pathnames will be ignored.

From within a subdirectory of the workspace the @command{status}
command will, by default, include @emph{all changes} in the working
copy.  Specifying only the pathname "." will restrict @command{status}
to files changed within the current subdirectory of the workspace.

@item monotone log
@itemx monotone log [--last=@var{n}] [--next=@var{n}] [--revision=@var{id} [...]] [--brief] [--no-merges] [--no-files] [--diffs] [@var{file} [...]]

This command prints out a log, in reverse-ancestry order, of small
history summaries.  Each summary contains author, date, changelog and
comment information associated with a revision.

If @code{--brief} is given, the output consists of one line per revision
with the revision ID, the author, the date and the branches (separated
with commas).

If @code{--last=}@var{n} is given, at most @var{n} log entries will be
given.

If @code{--next=}@var{n} is given, at most @var{n} log entries towards
the current head revision will be given from the workspace's base
revision in forward-ancestry order.  This is useful to review changes
that will be applied to the workspace when @command{update} is run.

By default, the log entries for merge nodes are shown.  If
@code{--no-merges} is given, the log entries for these nodes will be
excluded.

If @code{--no-files} is given, the log output excludes the list of
files changed in each revision.

Specifying @code{--diffs} causes the log output to include a unified
diff of the changes in each revision.

If one or more revision IDs are given, the command starts tracing back
through history from these revisions, otherwise it starts from the
base revision of your workspace.

If one or more files are given, the command will only log the revisions
where those files are changed.

@item monotone annotate @var{file}
@itemx monotone annotate [--revision=@var{id}] [--brief] @var{file}

Dumps an annotated copy of the file to stdout.  In the absence of the 
@code{--brief} flag, each line of the file
is translated to <revision id>: <line> in the output, where <revision id>
is the revision in which that line of the file was last edited.

If @code{--brief} is specified, the output is in the form
<short revision id>.. by <author> <date>: <line>
Only the first 8 characters of the revision id are displayed, the  
author cert value is truncated at the first @code{@@} or space
character and the date field is truncated to remove the time of day.

@item monotone complete file @var{partial-id}
@itemx monotone complete [--brief] key @var{partial-id}
@itemx monotone complete [--brief] revision @var{partial-id}

These commands print out all known completions of a partial @sc{sha1}
value, listing completions which are @code{file}, @code{manifest} or
@code{revision} IDs depending on which variant is used. For
example, suppose you enter this command and get this result:

@smallexample
@group
$ monotone complete revision fa36
fa36deead87811b0e15208da2853c39d2f6ebe90
fa36b76dd0139177b28b379fe1d56b22342e5306
fa36965ec190bee14c5afcac235f1b8e2239bb2a
@end group
@end smallexample

Then monotone is telling you that there are 3 revisions it knows
about, in its database, which begin with the 4 hex digits
@code{fa36}. This command is intended to be used by programmable
completion systems, such as those in @command{bash} and @command{zsh}.

The complete command for keys and revisions have a @code{--verbose} option.
Programmable completion systems can use @code{--verbose} output to 
present users with additional information about each completion option.

For example, verbose output for @code{revision} looks like this:
@smallexample
@group
$ mt complete revision 01f
01f5da490941bee1f0000f0561fc62eabfb2fa23 graydon@@dub.net 2003-12-03T03:14:35
01f992577bd8bcdcade0f89e724fd5dc2d2bbe8a kinetik@@orcon.nz 2005-05-11T05:19:29
01faad191d8d0474777c70b4d606782942333a78 kinetik@@orcon.nz 2005-04-11T04:24:01
@end group
@end smallexample

@item monotone diff
@item monotone diff --context
@item monotone diff --external [--diff-args=@var{argstring}]
@itemx monotone diff @var{pathname...}
@itemx monotone diff --revision=@var{id}
@itemx monotone diff --revision=@var{id} @var{pathname...}
@itemx monotone diff --revision=@var{id1} --revision=@var{id2}
@itemx monotone diff --revision=@var{id1} --revision=@var{id2} @var{pathname...}

These commands print out GNU ``unified diff format'' textual difference
listings between various manifest versions. With no @option{--revision}
options, @command{diff} will print the differences between the
base revision and the current revision in the workspace.

With one @option{--revision} option, @command{diff} will print the
differences between the revision @var{id} and the current revision in
the workspace.  With two @option{--revision} options @command{diff}
will print the differences between revisions @var{id1} and @var{id2},
ignoring any workspace.

In all cases, monotone will print a textual summary -- identical to
the summary presented by @command{monotone status} -- of the logical
differences between revisions in lines proceeding the diff. These
lines begin with a single hash mark @code{#}, and should be ignored by
a program processing the diff, such as @command{patch}.

Specifying pathnames to the @command{diff} command restricts the set of
changes that are visible and results in only a partial diff between
two revisions. Changes to files not included in the specified set of
pathnames will be ignored.

From within a subdirectory of the workspace the @command{diff}
command will, by default, include @emph{all changes} in the working
copy.  Specifying only the pathname "." will restrict @command{diff}
to files changed within the current subdirectory of the workspace.

The output format of @command{diff} is controlled by the options
@option{--unified}, @option{--context}, and @option{--external}.
@option{--unified} requests the ``unified diff'' format, the default
(analogous to running the program @code{diff -u}).  @option{--context}
request the ``context diff'' format (analogous to running the program
@code{diff -c}).  Both of these formats are generated directly by
monotone, using its built-in diff algorithm.

Sometimes, you may want more flexibility in output formats; for these
cases, you can use @option{--external}, which causes monotone to invoke
an external program to generate the actual output.  By default, the
external program is @code{diff}, and you can use the option
@option{--diff-args} to pass additional arguments controlling
formatting.  The actual invocation of @code{diff}, default arguments
passed to it, and so on, are controlled by the hook
@code{external_diff}; see @ref{Hooks} for more details.

@item monotone list certs @var{id}

These commands will print out a list of certificates associated with
a particular revision @var{id}. Each line of the print out will
indicate:
@itemize
@item
Whether the signature on the certificate is @code{ok} or @code{bad}
@item
The key ID of the signer of the certificate
@item 
The name of the certificate
@item 
The value of the certificate
@end itemize

For example, this command lists the certificates associated with a
particular version of monotone itself, in the monotone development
branch:

@smallexample
@group
$ monotone list certs 4a96
monotone: expanding partial id '4a96'
monotone: expanded to '4a96a230293456baa9c6e7167cafb3c5b52a8e7f'
-----------------------------------------------------------------
Key   : graydon@@pobox.com
Sig   : ok
Name  : author
Value : graydon@@dub.venge.net
-----------------------------------------------------------------
Key   : graydon@@pobox.com
Sig   : ok
Name  : branch
Value : monotone
-----------------------------------------------------------------
Key   : graydon@@pobox.com
Sig   : ok
Name  : date
Value : 2003-10-17T03:20:27
-----------------------------------------------------------------
Key   : graydon@@pobox.com
Sig   : ok
Name  : changelog
Value : 2003-10-16  graydon hoare  <graydon@@pobox.com>
      :
      :         * sanity.hh: Add a const version of idx().
      :         * diff_patch.cc: Change to using idx() everywhere.
      :         * cert.cc (find_common_ancestor): Rewrite to recursive
      :         form, stepping over historic merges.
      :         * tests/t_cross.at: New test for merging merges.
      :         * testsuite.at: Call t_cross.at.
      :
@end group
@end smallexample

@item monotone list keys
@itemx monotone list keys @var{pattern}
These commands list @sc{rsa} keys held in your keystore and current database.
They do not print out any cryptographic information; they simply list the
names of public and private keys you have on hand.

If @var{pattern} is provided, it is used as a glob to limit the keys
listed. Otherwise all keys in your database are listed.

@item monotone list branches

This command lists all known branches in your database.

@item monotone list tags

This command lists all known tags in your database.

@item monotone list vars
@item monotone list vars @var{domain}

This command lists all vars in your database, or all vars within a given
@var{domain}.  See @ref{Vars} for more information.

@item monotone list known
@itemx monotone list known @var{pathname...}

This command lists all files which would become part of the manifest of
the next revision if you comitted your workspace at this point.

Specifying pathnames to the @command{list known} command restricts
the set of paths that are searched for manifest files. Files not
included in the specified set of pathnames will not be listed.

From within a subdirectory of the workspace the @command{list
known} command will, by default, search the entire workspace.
Specifying only the pathname "." will restrict the search for known
files to the current subdirectory of the workspace.

@item monotone list unknown
@itemx monotone list unknown @var{pathname...}

This command lists all files in your workspace that monotone is 
either ignoring or knows nothing about.

Specifying pathnames to the @command{list unknown} command restricts the
set of paths that are searched for unknown files. Unknown files not
included in the specified set of pathnames will not be listed.

From within a subdirectory of the workspace the @command{list
unknown} command will, by default, search the entire workspace.
Specifying only the pathname "." will restrict the search for unknown
files to the current subdirectory of the workspace.

@item monotone list ignored
@itemx monotone list ignored @var{pathname...}

This command lists all files in your workspace that monotone is
intentionally ignoring, due to the results of the @code{ignore_file
(@var{filename})} hook.

Specifying pathnames to the @command{list ignored} command restricts the
set of paths that are searched for ignored files. Ignored files not
included in the specified set of pathnames will not be listed.

From within a subdirectory of the workspace the @command{list
ignored} command will, by default, search the entire workspace.
Specifying only the pathname "." will restrict the search for ignored
files to the current subdirectory of the workspace.

@item monotone list missing
@itemx monotone list missing @var{pathname...}

This command lists all files in your workspace's base manifest,
which are not present in the workspace.

Specifying pathnames to the @command{list missing} command restricts the
set of paths that are searched for missing files. Missing files not
included in the specified set of pathnames will not be listed.

From within a subdirectory of the workspace the @command{list
missing} command will, by default, search the entire workspace.
Specifying only the pathname "." will restrict the search for missing
files to the current subdirectory of the workspace.

@item monotone list changed
@itemx monotone list changed @var{pathname...}

This command lists all files in your workspace that have changed
compared to the base revision, including files that are dropped, added
or renamed.

Specifying pathnames to the @command{list changed} command restricts
the set of paths that are checked for changes. Files not included in the
specified set of pathnames will not be listed.

From within a subdirectory of the workspace the @command{list
changed} command will, by default, search the entire workspace.
Specifying only the pathname "." will restrict the search for known
files to the current subdirectory of the workspace.

@item monotone show_conflicts @var{rev} @var{rev}

This command shows what conflicts would need to be resolved in order to merge
the given revisions.
@end ftable


@page
@node    Key and Cert
@section Key and Cert

@ftable @command
@item monotone genkey @var{keyid}

This command generates an @sc{rsa} public/private key pair, using a
system random number generator, and stores it in your keystore under
the key name @var{keyid}.

The private half of the key is stored in an encrypted form, so that anyone
who can read your keystore cannot extract your private key and use it.
You must provide a passphrase for your key when it is generated, which is used
to determine the encryption key. In the future you will need to enter this
passphrase again each time you sign a certificate, which happens every
time you @command{commit} to your database. You can tell monotone to
automatically use a certain passphrase for a given key using the
@code{get_passphrase(@var{keypair_id})}, but this significantly
increases the risk of a key compromise on your local computer. Be
careful using this hook.

@item monotone dropkey @var{keyid}

This command drops the public and/or private key. If both exist, both
are dropped, if only one exists, it is dropped. This command should
be used with caution as changes are irreversible without a backup of
the key(s) that were dropped.

@item monotone chkeypass @var{id}

This command lets you change the passphrase of the private half of the
key @var{id}.

@item monotone cert @var{id} @var{certname} 
@itemx monotone cert @var{id} @var{certname} @var{certval}

These commands create a new certificate with name @var{certname}, for
a revision with version @var{id}. If @var{certval} is provided, it is
the value of the certificate.  Otherwise the certificate value is read
from @code{stdin}.

@item monotone trusted @var{id} @var{certname} @var{certval} @var{signers}

This command lets you test your revision trust hook
@code{get_revision_cert_trust} (see @ref{Hook Reference}).  You pass it
a revision ID, a certificate name, a certificate value, and one or more
key IDs, and it will tell you whether, under your current settings,
Monotone would trust a cert on that revision with that value signed by
those keys.

@end ftable



@page
@node    Certificate
@section Certificate

@ftable @command
@item monotone approve @var{id}

This command is a synonym for @code{monotone cert @var{id} branch
@var{branchname}} where @var{branchname} is the current branch name
(either deduced from the workspace or from the @option{--branch}
option).


@item monotone comment @var{id}
@itemx monotone comment @var{id} @var{comment}

These commands are synonyms for @code{monotone cert @var{id}
comment @var{comment}}. If @var{comment} is not provided, it is read
from @code{stdin}.


@item monotone tag @var{id} @var{tagname}

This command is a synonym for @code{monotone cert @var{id} tag
@var{tagname}}.

@item monotone testresult @var{id} 0
@itemx monotone testresult @var{id} 1

These commands are synonyms for @code{monotone cert @var{id}
testresult 0} or @code{monotone cert @var{id} testresult 1}.

@end ftable



@page
@node    Packet I/O
@section Packet I/O

Monotone can produce and consume data in a convenient, portable form
called @dfn{packets}. A packet is a sequence of ASCII text, wrapped at
70-columns and easily sent through email or other transports. If you
wish to manually transmit a piece of information -- for example a
public key -- from one monotone database to another, it is often
convenient to read and write packets.

@emph{Note:} earlier versions of monotone queued and replayed packet
streams for their networking system. This older networking system is
deprecated and will be removed in a future version, as the netsync
protocol has several properties which make it advantageous as a
communication system. However, the packet i/o facility will remain in
monotone as a utility for moving individual data items around
manually.

@ftable @command
@itemx monotone certs @var{id}

This command prints out an @code{rcert} packet for each cert in your
database associated with @var{id}. These can be used to transport
certificates safely between monotone databases.

@item monotone fdata @var{id}
@itemx monotone mdata @var{id}
@itemx monotone rdata @var{id}

These commands print out an @code{fdata}, @code{mdata} or @code{rdata}
packet for the file, manifest or revision @var{id} in your database.
These can be used to transport files, manifests or revisions, in their
entirety, safely between monotone databases.


@item monotone fdelta @var{id1} @var{id2}
@itemx monotone mdelta @var{id1} @var{id2}

These commands print out an @code{fdelta} or @code{mdelta} packet for
the differences between file or manifest versions @var{id1} and
@var{id2}, in your database.  These can be used to transport file or
manifest differences safely between monotone databases.

@item monotone privkey @var{keyid}
@itemx monotone pubkey @var{keyid}

These commands print out an @code{keypair} or @code{pubkey} packet for
the @sc{rsa} key @var{keyid}. These can be used to transport public or
private keys safely between monotone databases.


@item monotone read
@item monotone read @var{file1} @var{file2...}

This command reads packets from files or @code{stdin} and stores them
in your database.

@end ftable


@page
@node    Database
@section Database

@ftable @command
@item monotone set @var{domain} @var{name} @var{value}

Associates the value @var{value} to @var{name} in domain @var{domain}.
See @ref{Vars} for more information.

@item monotone unset @var{domain} @var{name}

Deletes any value associated with @var{name} in @var{domain}.  See
@ref{Vars} for more information.

@item monotone db init --db=@var{dbfile} 

This command initializes a new monotone database at @file{dbfile}.

@item monotone db rebuild --db=@var{dbfile} 

This command rebuilds the ancestry graph of the monotone database at
@file{dbfile}, which may become necessary if future bugs in monotone
allow invalid changesets to be saved in your database.  This command is
destructive, and you should make a backup copy of your database before
running it.  It will preserve the contents of each revision, but it will
lose rename history.  Use it carefully, and only after understanding
@ref{Rebuilding ancestry}.  Note that it will make your history
incompatible with that of anyone else working on the same project!  Read
@ref{Rebuilding ancestry}.

@item monotone db info --db=@var{dbfile} 

This command prints information about the monotone database @file{dbfile},
including its schema version and various table size statistics.

@item monotone db version --db=@var{dbfile} 

This command prints out just the schema version of the monotone
database @file{dbfile}.

@item monotone db dump --db=@var{dbfile} 

This command dumps an SQL statement representing the entire state of
@file{dbfile} to the standard output stream. It is a very low-level
command, and produces the most ``recoverable'' dumps of your database
possible. It is sometimes also useful when migrating databases between
variants of the underlying sqlite database format.

@item monotone db load --db=@var{dbfile} 

This command applies a raw SQL statement, read from the standard input
stream, to the database @file{dbfile}. It is most useful when loading
a database dumped with the @command{dump} command.

Note that when reloading a dumped database, the schema of the dumped
database is @emph{included} in the dump, so you should not try to
@command{init} your database before a @command{load}.

@item monotone db migrate --db=@var{dbfile} 

This command attempts to migrate the database @file{dbfile} to the
newest schema known by the version of monotone you are currently
running.  If the migration fails, no changes should be made to the
database.

If you have important information in your database, you should back up
a copy of it before migrating, in case there is an untrapped error
during migration.

@item monotone db check --db=@var{dbfile} 

Monotone always works hard to verify the data it creates and accesses.
For instance, if you have hard drive problems that corrupt data in
monotone's database, and you attempt to retrieve this data, then
monotone will notice the problem and stop, instead of silently giving
you garbage data.

However, it's also nice to notice such problems early, and in rarely
used parts of history, while you still have backups.  That's what this
command is for.  It systematically checks the database @file{dbfile} to
ensure that it is complete and consistent. The following problems are
detected:

@itemize

@item missing files 
that are referenced by their @sc{sha1} hash from some manifest but do not
exist in the database.  This is a serious problem; it means that your
history is not fully reconstructible.  You can fix it by finding the
file with the given hash, and loading it into your database with
@command{fload}.

@item unreferenced files
that exist in the database but are not referenced by their @sc{sha1}
hash from any existing manifest.  In itself, this only indicates some
wasted space, and is not a problem; it's possible it could arise under
normal use (for instance, in some strange corner cases following an
incomplete netsync).  It could also arise, though, as a symptom of some
other more serious problem.

@item missing manifests
that are referenced by their @sc{sha1} hash from some revision but do
not exist in the database.  This is a serious problem; it means that
your history is not fully reconstructible.  You can fix it by finding a
database containing the manifest, and using @command{mdata} on that
database to create a manifest data packet, which can be loaded into your
database with @command{read}.

@item unreferenced manifests
that exist in the database but are not referenced by their @sc{sha1}
hash from any existing revision.  In itself, this only indicates some
wasted space, and is not a problem; it's possible it could arise under
normal use (for instance, if you have run @command{db kill_rev_locally},
or in some strange-but-harmless corner cases following an incomplete
netsync).  It could also arise, though, as a symptom of some other more
serious problem.

@item incomplete manifests
that exist in the database but contain references to files that do not
exist in the database.  For diagnosis and solution, see ``missing
files'' above.

@item missing revisions
that are referenced by their @sc{sha1} hash from some other revision or
revision cert but do not exist in the database.  This may be a serious
problem; it may indicate that your history is not fully reconstructible
(if the reference is from another revision) or that someone is creating
bogus certs (if the reference is from a cert).  You can fix it by
finding a database containing the revision, and using @command{rdata} on
that database to create a revision data packet, which can be loaded into
your database with @command{read}.

@item incomplete revisions
that exist in the database but contain references to missing manifests,
incomplete manifests or missing revisions.  This always occurs with some
more detailed error; see above.

@item revisions with mismatched parents
that disagree with the cached revision ancestry on their parent
revisions.  This may cause problems in using the database, and suggests
the presence of a bug in monotone's caching system, but does not involve
data loss.

@item revisions with mismatched children
that disagree with the cached revision ancestry on their child
revisions.  This may cause problems in using the database, and suggests
the presence of a bug in monotone's caching system, but does not involve
data loss.

@item revisions with bad history
that exist in the database but fail monotone's normal sanity checks for
consistent and correct history.  This is a serious problem; it indicates
that your history record is somehow malformed.  This should not be
possible, since monotone carefully checks every revision before storing
it into the database, but if it does, then please request assistance on
the monotone mailing list.  Fixing this generally means you may lose
some history --- for instance, renames may be degraded into delete/add
pairs --- but the actual contents of every revision will still be
reproducible.

@item revisions with missing certs
that exist in the database lacking at least one author, branch,
changelog or date cert. All revisions are expected to have at least one
of each of these certs.  In itself, this is not necessarily a problem,
but it is peculiar, and some operations such as netsync may behave
strangely.

@item revisions with mismatched certs
that exist in the database with differing numbers of author, changelog
and date certs. These certs are expected to appear together, as each
revision committed should have an author, changelog and date associated
with it.  In itself, this is not a problem, but it is peculiar.  All
operations should behave normally.

@item missing keys
that have been used to sign certs but do not exist in the database.  In
itself, this is not a problem, except that monotone will ignore any
certs signed by the missing key.  You can fix it by finding a database
containing the key in question, and using @command{pubkey} on that
database to create a public key packet, which can be loaded into your
database with @command{read}.

@item certs with bad signatures
that exist in the database with signatures that are invalid.  In itself,
this is not a problem, except that monotone will ignore any such certs.
You may also wish to find out who is creating certs with bad
signatures; it may indicate some kind of security attack.

@item certs with unchecked signatures
that exist in the database but cannot have their signatures checked
because the signing key is missing.  In itself, this is not a problem,
except that monotone will ignore any certs signed by the missing key.
You can fix it by finding a database containing the key in question, and
using @command{pubkey} on that database to create a public key packet,
which can be loaded into your database with @command{read}.

@end itemize

This command also verifies that the @sc{sha1} hash of every file, manifest,
and revision is correct.

@item monotone db kill_rev_locally @var{id}

This command ``kills'', i.e., deletes, a given revision, as well as any
certs attached to it.  It has an ugly name because it is a dangerous
command; it permanently and irrevocably deletes historical information
from your database.  There are a number of caveats:
@itemize
@item
It can only be applied to revisions that have no descendents.  If you
want to kill a revision that has descendents, you must kill all of the
descendents first.
@item
It only removes the revision from your local database (hence the
``locally'' in the command name).  If you have already pushed this
revision out to another database, then the next time you pull from that
database it may come back again.  There is no way to delete a revision
from somebody else's database except to ask them to delete it for you.
@item
It does not actually delete the revision's files or manifest from your
database.  If you run this command, and then run @command{db check}, it
will note that you have an ``unreferenced manifest''.  If you wish to
eliminate this data for good (and thus free up the space), you may use
netsync to @command{pull} from your current database into a new
database; this creates a copy of your old database, without the
unreferenced data.  However, having this data in your database will not
cause any problems, and acts as a safety net; if you later realize that
you do, after all, need to retrieve the data in @var{id}, then
@command{db check} will let you see which manifest it was, and with some
work you can extract @var{id}'s data.
@end itemize

@item monotone db kill_branch_certs_locally @var{branch}

This command ``kills'' a branch by deleting all branch certs with that
branch name. You should consider carefully whether you want to use it,
because it can irrevocably delete important information. It does not
modify or delete any revisions or any of the other certificates on
revisions in the branch; it simply removes the branch certificates
matching the given branch name. Because of this, it can leave
revisions without any branch certificate at all. As with @command{db
kill_rev_locally}, it only deletes the information from your local
database; if there are other databases that you sync with which have
revisions in this branch, the branch certificates will reappear when
you sync, unless the owners of those databases also delete those
certificates locally.

@item monotone db kill_tag_locally @var{tag}

This command ``kills'' a tag by deleting all tag certs with that tag
name. You should consider carefully whether you want to use it, because
it can irrevocably delete important information. It does not modify or
delete any revisions, or any of the other certificates on tagged
revisions; it simply removes all tag certificates with the given name.
As with @command{db kill_rev_locally}, it only deletes the information
from your local database; if there are other databases that you sync
with which have this tag, the tag certificates will reappear when you
sync, unless the owners of those databases also delete those
certificates locally.

@item monotone db execute @var{sql-statement}

This is a debugging command which executes @var{sql-statement} against
your database, and prints any results of the expression in a tabular
form.  It can be used to investigate the state of your database, or
help diagnose failures.

@end ftable


@page
@node    Automation
@section Automation

This section contains subcommands of the @code{monotone automate}
command, used for scripting monotone.  All give output on stdout; they
may also give useful chatter on stderr, including warnings and error
messages.


@ftable @command
@item monotone automate interface_version

@table @strong
@item Arguments:

None.

@item Added in:

0.0

@item Purpose:

Prints version of the automation interface.  Major number increments
whenever a backwards incompatible change is made to the @code{automate}
command; minor number increments whenever any change is made (but is
reset when major number increments).

@item Sample output:

@verbatim
1.2
@end verbatim

@item Output format:

A decimal number, followed by ``.'' (full stop/period), followed by a
decimal number, followed by a newline, followed by end-of-file.  The
first decimal number is the major version, the second is the minor version.

@item Error conditions:

None.

@end table


@item monotone automate heads [@var{branch}]

@table @strong
@item Arguments:

One branch name,  @var{branch}. If none is given, the current default branch is used.

@item Added in:

0.0

@item Purpose:

Prints the heads of branch @var{branch}.

@item Sample output:

@verbatim
28ce076c69eadb9b1ca7bdf9d40ce95fe2f29b61
75156724e0e2e3245838f356ec373c50fa469f1f
@end verbatim

@item Output format:

Zero or more lines, each giving the ID of one head of the given branch.
Each line consists of a revision ID, in hexadecimal, followed by a
newline.  The lines are printed in alphabetically sorted order.

@item Error conditions:

If the given branch contains no members or does not exist, then no lines are printed.

@end table


@item monotone automate ancestors @var{rev1} [@var{rev2} [...]]

@table @strong
@item Arguments:

One or more revision IDs, @var{rev1}, @var{rev2}, etc.

@item Added in:

0.2

@item Purpose:

Prints the ancestors of one or more revisions.

@item Sample output:

@verbatim
28ce076c69eadb9b1ca7bdf9d40ce95fe2f29b61
75156724e0e2e3245838f356ec373c50fa469f1f
@end verbatim

@item Output format:

Zero or more lines, each giving the ID of one ancestor of the given
revisions.  Each line consists of a revision ID, in hexadecimal,
followed by a newline.  The lines are printed in alphabetically sorted
order.

The output does not include @var{rev1}, @var{rev2}, etc., except if
@var{rev2} is itself an ancestor of @var{rev1}, then @var{rev2} will be
included in the output.

@item Error conditions:

If any of the revisions do not exist, prints nothing to stdout, prints
an error message to stderr, and exits with status 1.

@end table


@item monotone automate parents @var{rev}

@table @strong
@item Arguments:

One revision ID, @var{rev}.

@item Added in:

0.2

@item Purpose:

Prints the immediate parents of a revision.  This is like a
non-recursive version of @command{automate ancestors}.

@item Sample output:

@verbatim
28ce076c69eadb9b1ca7bdf9d40ce95fe2f29b61
75156724e0e2e3245838f356ec373c50fa469f1f
@end verbatim

@item Output format:

Zero or more lines, each giving the ID of one parent of the given
revision.  Each line consists of a revision ID, in hexadecimal,
followed by a newline.  The lines are printed in alphabetically sorted
order.

@item Error conditions:

If the given revision @var{rev} does not exist, prints nothing to
stdout, prints an error message to stderr, and exits with status 1.

@end table


@item monotone automate descendents @var{rev1} [@var{rev2} [...]]

@table @strong
@item Arguments:

One or more revision IDs, @var{rev1}, @var{rev2}, etc.

@item Added in:

0.1

@item Purpose:

Prints the descendents of one or more revisions.

@item Sample output:

@verbatim
28ce076c69eadb9b1ca7bdf9d40ce95fe2f29b61
75156724e0e2e3245838f356ec373c50fa469f1f
@end verbatim

@item Output format:

Zero or more lines, each giving the ID of one descendent of the given
revisions.  Each line consists of a revision ID, in hexadecimal,
followed by a newline.  The lines are printed in alphabetically sorted
order.

The output does not include @var{rev1}, @var{rev2}, etc., except that if
@var{rev2} is itself a descendent of @var{rev1}, then @var{rev2} will be
included in the output.

@item Error conditions:

If any of the revisions do not exist, prints nothing to stdout, prints
an error message to stderr, and exits with status 1.

@end table


@item monotone automate children @var{rev}

@table @strong
@item Arguments:

One revision ID, @var{rev}.

@item Added in:

0.2

@item Purpose:

Prints the immediate children of a revision.  This is like a
non-recursive version of @command{automate descendents}.

@item Sample output:

@verbatim
28ce076c69eadb9b1ca7bdf9d40ce95fe2f29b61
75156724e0e2e3245838f356ec373c50fa469f1f
@end verbatim

@item Output format:

Zero or more lines, each giving the ID of one child of the given
revision.  Each line consists of a revision ID, in hexadecimal,
followed by a newline.  The lines are printed in alphabetically sorted
order.

@item Error conditions:

If the given revision @var{rev} does not exist, prints nothing to
stdout, prints an error message to stderr, and exits with status 1.

@end table


@item monotone automate graph

@table @strong
@item Arguments:

None.

@item Added in:

0.2

@item Purpose:

Prints out the complete ancestry graph of this database.

@item Sample output:

@verbatim
0c05e8ec9c6af4224672c7cc4c9ef05ae8bdb794
27ebcae50e1814e35274cb89b5031a423c29f95a 5830984dec5c41d994bcadfeab4bf1bf67747b89
4e284617c80bec7da03925062a84f715c1b042bd 27ebcae50e1814e35274cb89b5031a423c29f95a 657c756d24fb65213d59f4ae07e117d830dcc95b
@end verbatim

@item Output format:

Zero or more lines, each giving ancestry information for one revision.
Each line begins with a revision ID.  Following this are zero or more
space-prefixed revision IDs.  Each revision ID after the first is a
parent (in the sense of @command{automate parents}) of the first.  For
instance, in the above sample output,
0c05e8ec9c6af4224672c7cc4c9ef05ae8bdb794 is a root node,
27ebcae50e1814e35274cb89b5031a423c29f95a has one parent, and
4e284617c80bec7da03925062a84f715c1b042bd has two parents, i.e., is a
merge node.

The output as a whole is alphabetically sorted by line; additionally,
the parents within each line are alphabetically sorted.

@item Error conditions:

None.

@end table


@item monotone automate erase_ancestors [@var{rev1} [@var{rev2} [...]]]

@table @strong
@item Arguments:

One or more revision IDs, @var{rev1}, @var{rev2}, etc.

@item Added in:

0.1

@item Purpose:

Prints all arguments, except those that are an ancestor of some other
argument.  One way to think about this is that it prints the minimal
elements of the given set, under the ordering imposed by the ``child
of'' relation.  Another way to think of it is if the arguments formed a
branch, then we would print the heads of that branch.  If there
are no arguments, prints nothing.

@item Sample output:

@verbatim
28ce076c69eadb9b1ca7bdf9d40ce95fe2f29b61
75156724e0e2e3245838f356ec373c50fa469f1f
@end verbatim

@item Output format:

Zero or more lines, each giving the ID of one descendent of the given
revisions.  Each line consists of a revision ID, in hexadecimal,
followed by a newline.  The lines are printed in alphabetically sorted
order.

@item Error conditions:

If any of the revisions do not exist, prints nothing to stdout, prints
an error message to stderr, and exits with status 1.

@end table


@item monotone automate toposort [@var{rev1} [@var{rev2} [...]]]

@table @strong
@item Arguments:

One or more revision IDs, @var{rev1}, @var{rev2}, etc.

@item Added in:

0.1

@item Purpose:

Prints all arguments, topologically sorted.  I.e., if @var{rev1} is an
ancestor of @var{rev2}, then @var{rev1} will appear before @var{rev2} in
the output; if @var{rev2} is an ancestor of @var{rev1}, then @var{rev2}
will appear before @var{rev1} in the output; and if neither is an
ancestor of the other, then they may appear in either order.  If there
are no arguments, prints nothing.

@item Sample output:

@verbatim
28ce076c69eadb9b1ca7bdf9d40ce95fe2f29b61
75156724e0e2e3245838f356ec373c50fa469f1f
@end verbatim

@item Output format:

A list of revision IDs, in hexadecimal, each followed by a newline.
Revisions are printed in topologically sorted order.

@item Error conditions:

If any of the revisions do not exist, prints nothing to stdout, prints
an error message to stderr, and exits with status 1.

@end table


@item monotone automate ancestry_difference @var{new} [@var{old1} [@var{old2} [...]]]

@table @strong
@item Arguments:

A ``new'' revision ID @var{new}, followed by zero or more ``old''
revision IDs @var{old1}, @var{old2}, etc.

@item Added in:

0.1

@item Purpose:

Prints all ancestors of the revision @var{new}, that are not also
ancestors of one of the old revisions.  For purposes of this command,
``ancestor'' is an inclusive term; for example, if @var{new} is an
ancestor of @var{old1}, it will not be printed; but if @var{new} is not
an ancestor of any of the ``old'' revisions, then it will be.
Similarly, @var{old1} will never be printed, because it is considered to
be an ancestor of itself.  The reason for the names is that if @var{new}
a new revision, and @var{old1}, @var{old2}, etc. are revisions that you
have processed before, then this command tells you which revisions are
new since then.

@item Sample output:

@verbatim
28ce076c69eadb9b1ca7bdf9d40ce95fe2f29b61
75156724e0e2e3245838f356ec373c50fa469f1f
@end verbatim

@item Output format:

A list of revision IDs, in hexadecimal, each followed by a newline.
Revisions are printed in topologically sorted order.

@item Error conditions:

If any of the revisions do not exist, prints nothing to stdout, prints
an error message to stderr, and exits with status 1.

@end table


@item monotone automate leaves

@table @strong
@item Arguments:

None.

@item Added in:

0.1

@item Purpose:

Prints the leaves of the revision graph, i.e. all revision that have no
children.  This is similar, but not identical to the functionality of
@command{heads}, which prints every revision in a branch, that has no
descendents in that branch.  If every revision in the database was in
the same branch, then they would be identical.  Generally, every leaf is
the head of some branch, but not every branch head is a leaf.

@item Sample output:

@verbatim
28ce076c69eadb9b1ca7bdf9d40ce95fe2f29b61
75156724e0e2e3245838f356ec373c50fa469f1f
@end verbatim

@item Output format:

Zero or more lines, each a leaf of the revision graph.  Each line
consists of a revision ID, in hexadecimal, followed by a newline.  The
lines are printed in alphabetically sorted order.

@item Error conditions:

None.

@end table


@item monotone automate select @var{selector}

@table @strong
@item Arguments:

One selector (or combined selector).

@item Added in:

0.2

@item Purpose:

Print all revisions that match the given selector.

@item Sample output:

@verbatim
28ce076c69eadb9b1ca7bdf9d40ce95fe2f29b61
75156724e0e2e3245838f356ec373c50fa469f1f
@end verbatim

@item Output format:

Zero or more lines, each giving the ID of one revision that matches the
given selector.  Each line consists of a revision ID, in hexadecimal,
followed by a newline.  Revision ids are printed in alphabetically
sorted order.

@item Error conditions:

None.

@end table

@item monotone automate inventory

@table @strong
@item Arguments:

None.

@item Added in:

1.0

@item Purpose:

Prints the inventory of every file found in the workspace or its
associated base manifest. Each unique path is listed on a line prefixed by
three status characters and two numeric values used for identifying
renames. 

@item Sample output:

All basic status codes:

@verbatim
  M 0 0 missing
 AP 0 0 added
D   0 0 dropped
R   1 0 renamed-from-this
 R  0 1 renamed-to-this
  P 0 0 patched
    0 0 unchanged
  U 0 0 unknown
  I 0 0 ignored
@end verbatim

Two files swapped:

@verbatim
RR  1 2 unchanged
RR  2 1 original
@end verbatim

Recorded with monotone that two files were swapped, but they were not
actually swapped in the filesystem.  Thus they both appear as patched:

@verbatim
RRP 1 2 unchanged
RRP 2 1 original
@end verbatim

Rename @file{foo} to @file{bar}; add new file @file{foo}:

@verbatim
RAP 1 0 foo
 R  0 1 bar
@end verbatim

Rotated files @file{foo} -> @file{bar} -> @file{baz} -> @file{foo}:

@verbatim
RR  1 3 foo
RR  2 1 bar
RR  3 2 baz
@end verbatim

Recorded the rotation of files @file{foo} -> @file{bar} -> @file{baz} ->
@file{foo}, but the actual files in the workspace were not
moved, so monotone interprets all files as having been patched:

@verbatim
RRP 1 3 foo
RRP 2 1 bar
RRP 3 2 baz
@end verbatim

Dropped but not removed and thus unknown:

@verbatim
D U 0 0 dropped
@end verbatim

Added a non-existent file which is thus missing:

@verbatim
 AM 0 0 added
@end verbatim

Recorded a rename, but not moved in the filesystem, and thus unknown
source and missing target:

@verbatim
R U 1 0 original
 RM 0 1 renamed
@end verbatim

Moved in the filesystem but no rename recorded, and thus missing source
and unknown target:

@verbatim
  M 0 0 original
  U 0 0 renamed
@end verbatim

Renamed and patched:

@verbatim
R   1 0 original
 RP 0 1 renamed
@end verbatim

@item Output format:

Each path is printed on its own line, prefixed by three status
characters described below. The status is followed by a single space and
two numbers, each separated by a single space, used for identifying renames.
The numbers are followed by a single space and then the pathname, which 
includes the rest of the line. Directory paths are identified as ending with
the "/" character, file paths do not end in this character.

The three status characters are as follows.

@verbatim
column 1 pre-state
      ' ' the path was unchanged in the pre-state
      'D' the path was deleted from the pre-state
      'R' the path was renamed from the pre-state name
column 2 post-state
      ' ' the path was unchanged in the post-state
      'R' the path was renamed to the post-state name
      'A' the path was added to the post-state
column 3 file-state
      ' ' the file is known and unchanged from the current manifest version
      'P' the file is patched to a new version
      'U' the file is unknown and not included in the current manifest
      'I' the file is ignored and not included in the current manifest
      'M' the file is missing but is included in the current manifest
@end verbatim

Note that there are 45 possible status code combinations, some of which
are not valid, detailed below.

@verbatim
'   ' unchanged
'  P' patched (contents changed)
'  U' unknown (exists on the filesystem but not tracked)
'  I' ignored (exists on the filesystem but excluded by lua hook)
'  M' missing (exists in the manifest but not on the filesystem)

' A ' added (invalid, add should have associated patch)
' AP' added and patched
' AU' added but unknown (invalid)
' AI' added but ignored (seems invalid, but may be possible?)
' AM' added but missing from the filesystem

' R ' rename target
' RP' rename target and patched
' RU' rename target but unknown (invalid)
' RI' rename target but ignored (seems invalid, but may be possible?)
' RM' rename target but missing from the filesystem

'D  ' dropped
'D P' dropped and patched (invalid)
'D U' dropped and unknown (still exists on the filesystem)
'D I' dropped and ignored (seems invalid, but may be possible?)
'D M' dropped and missing (invalid)

'DA ' dropped and added (invalid, add should have associated patch)
'DAP' dropped and added and patched
'DAU' dropped and added but unknown (invalid)
'DAI' dropped and added but ignored (seems invalid, but may be possible?)
'DAM' dropped and added but missing from the filesystem

'DR ' dropped and rename target
'DRP' dropped and rename target and patched
'DRU' dropped and rename target but unknown (invalid)
'DRI' dropped and rename target but ignored (invalid)
'DRM' dropped and rename target but missing from the filesystem

'R  ' rename source
'R P' rename source and patched (invalid)
'R U' rename source and unknown (still exists on the filesystem)
'R I' rename source and ignored (seems invalid, but may be possible?)
'R M' rename source and missing (invalid)

'RA ' rename source and added (invalid, add should have associated patch)
'RAP' rename source and added and patched
'RAU' rename source and added but unknown (invalid)
'RAI' rename source and added but ignored (seems invalid, but may be possible?)
'RAM' rename source and added but missing from the filesystem

'RR ' rename source and target
'RRP' rename source and target and target patched
'RRU' rename source and target and target unknown (invalid)
'RRI' rename source and target and target ignored (seems invalid, but may be possible?)
'RRM' rename source and target and target missing
@end verbatim

The two numbers are used to match up the pre-state and post-state of a
rename.  Imagine a situation where there are two renames.
@command{automate inventory} will print something like:

@verbatim
R   1 0 a
R   2 0 b
 R  0 2 c
 R  0 1 d
@end verbatim

Here the status characters tell us that @file{a} and @file{b} were
renamed, and we can tell that one was renamed to @file{c} and one was
renamed to @file{d}, but we can't tell which was renamed to which.  To
do that, we have to refer to the numbers.  The numbers do not themselves
mean anything; their only purpose is to let you match up the two
``ends'' of a rename.  The 1 in the left column by @file{a} means that
@file{a} was the source of a rename, and the 1 in the right column by
@file{d} means that @file{d} was the target of that same rename.
Similarly, the two 2's tell us that @file{b} was renamed to @file{c}.

There are two columns of numbers because the same file can
simultaneously be the target and source of a rename.  The number '0' is
used as a meaningless placeholder in all cases where a file is not a
source or target of a rename.  Any non-zero number that occurs at all
will occur exactly once in the first column and exactly once in the
second column.

Full support for versioned directories is not yet complete and the
inventory will only list entries for renamed or dropped
directories. 

@item Error conditions:

When executed from outside of a workspace directory, prints an error
message to stderr, and exits with status 1.

@end table

@item monotone automate certs @var{id}

@table @strong
@item Arguments:

A revision ID @var{id}, for which any certificates will be printed.

@item Added in:

1.0

@item Purpose:

Prints all certificates associated with the given revision ID.
Each certificate is contained in a basic IO stanza. For each certificate, 
the following values are provided:

@verbatim
'key'
      a string indicating the key used to sign this certificate.
'signature'
      a string indicating the status of the signature. Possible 
      values of this string are:
            'ok'        : the signature is correct
            'bad'       : the signature is invalid
            'unknown'   : signature was made with an unknown key
'name'
      the name of this certificate
'value'
      the value of this certificate
'trust'
      is this certificate trusted by the defined trust metric?
      Possible values of this string are:
            'trusted'   : this certificate is trusted
            'untrusted' : this certificate is not trusted
@end verbatim
 
@item Sample output:

@verbatim
      key "emile@alumni.reed.edu"
signature "ok"
     name "author"
    value "emile@alumni.reed.edu"
    trust "trusted"

      key "emile@alumni.reed.edu"
signature "ok"
     name "branch"
    value "net.venge.monotone"
    trust "trusted"

      key "emile@alumni.reed.edu"
signature "ok"
     name "changelog"
    value "propagate from branch 'net.venge.monotone.annotate' (head 76a886ef7c8ae12a4bba5fc2bd252557bf863aff)
            to branch 'net.venge.monotone' (head 2490479a4e4e99243fead6d627d78291fde592f0)
"
    trust "trusted"

      key "emile@alumni.reed.edu"
signature "ok"
     name "date"
    value "2005-05-20T20:19:25"
    trust "trusted"
@end verbatim

@item Output format:

All stanzas are formatted by basic_io. Stanzas are separated 
by a blank line. Values will be escaped, '\' to '\\' and 
'"' to '\"'.

@item Error conditions:

If a certificate is signed with an unknown public key, a 
warning message is printed to stderr. If the revision specified is unknown 
or invalid prints an error message to stderr and exits with status 1.

@end table

@item monotone automate stdio

@table @strong
@item Arguments:

none

@item Added in:

1.0

@item Purpose:

Allow multiple automate commands to be run from one instance of monotone.

@item Sample input:

@verbatim
l6:leavese
l7:parents40:0e3171212f34839c2e3263e7282cdeea22fc5378e
@end verbatim

@item Input format:

The input is a series of commands of the form 'l' <token> [<token> ...] 'e',
where <token> = <size> colon <string> . Characters between the ending 'e'
of one commad and the beginning 'l' of the next are ignored, but characters
other than '\n' should not be present as this space is reserved.

@item Sample output:

@verbatim
0:0:l:205:0e3171212f34839c2e3263e7282cdeea22fc5378
1f4ef73c3e056883c6a5ff66728dd764557db5e6
2133c52680aa2492b18ed902bdef7e083464c0b8
23501f8afd1f9ee037019765309b0f8428567f8a
2c295fcf5fe20301557b9b3a5b4d437b5ab8ec8c
1:0:l:41:7706a422ccad41621c958affa999b1a1dd644e79
@end verbatim

@item Output format:

<command number>:<err code>:<last?>:<size>:<output>

<command number> is a decimal number specifying which command this output
is from. It is 0 for the first command, and increases by one each time.

<err code> is 0 for success, 1 for a syntax error, and 2 for any other error.

<last?> is 'l' if this is the last piece of output for this command, and 'm'
if there is more output to come.

<size> is the number of bytes in the output.

<output> is the output of the command. This will never exceed 1024 bytes.
If a command produces more than 1024 bytes of output, it will be split into
multiple pieces, with all but the last having the <last?> field set to 'm'.

@item Error conditions:

If a badly formatted command is received, prints an error message to
standard error and exits with nonzero status. Errors in the commands run
through this interface do not affect the exit status. Instead, the <err code>
field in the output is set to 2, and the output of the command becomes
whatever error message would have been given. The output of an invalid
command line will have an error code of 1, and the output text will be a help
message.

@end table

@item monotone automate get_revision
@item monotone automate get_revision @var{id}

@table @strong
@item Arguments:

Specifying the option @var{id} argument outputs the changeset 
information for the specified @var{id}. Otherwise, @var{id} is 
determined from the workspace.

@item Added in:

1.0

@item Purpose:

Prints changeset information for the specified revision id.

There are several changes that are described; each of these is described by 
a different basic_io stanza. The first string pair of each stanza indicates the 
type of change represented. 

Possible values of this first value are along with an ordered list of 
basic_io formatted string pairs that will be provided are:

@verbatim
'old_revision'
      represents a parent revision.
      format: ('old_revision', revision id)
'new_manifest'
      represents the new manifest associated with the revision.
      format: ('new_manifest', manifest id)
'old_manifest'
      represents a manifest associated with a parent revision.
      format: ('old_manifest', manifest id)
'patch'
      represents a file that was modified.
      format: ('patch', filename), ('from', file id), ('to', file id)
'add_file'
      represents a file that was added.
      format: ('add_file', filename)
'delete_file'
      represents a file that was deleted.
      format: ('delete_file', filename)
'delete_dir'
      represents a directory that was deleted.
      format: ('delete_dir', filename)
'rename_file'
      represents a file that was renamed.
      format: ('rename_file', old filename), ('to', new filename)
'rename_dir'
      represents a directory that was renamed.
      format: ('rename_dir', old filename), ('to', new filename)
@end verbatim
 
@item Sample output:

@verbatim
new_manifest [bfe2df785c07bebeb369e537116ab9bb7a4b5e19]

old_revision [429fea55e9e819a046843f618d90674486695745]
old_manifest [b71855116f7049ac663102c0cb628653ffe316d1]

patch "ChangeLog"
 from [7dc21d3a46c6ecd94685ab21e67b131b32002f12]
   to [234513e3838d423b24d5d6c98f70ce995c8bab6e]

patch "std_hooks.lua"
 from [0408707bb6b97eae7f8da61af7b35364dbd5a189]
   to [d7bd0756c48ace573926197709e53eb24dae5f5f]
@end verbatim

@item Output format:

All stanzas are formatted by basic_io. Stanzas are separated 
by a blank line. Values will be escaped, '\' to '\\' and 
'"' to '\"'.

@item Error conditions:

If the revision specified is unknown or invalid prints an error message
to stderr and exits with status 1.

@end table

@item monotone automate get_manifest_of
@item monotone automate get_manifest_of @var{revid}

@table @strong
@item Arguments:

Specifying the optional @var{revid} argument outputs the manifest for the
revision with the specified ID. Otherwise, outputs the manifest for the
current workspace.  (You can think of leaving the argument blank
as meaning ``give me the manifest of THIS''.)

@item Added in:

2.0

@item Purpose:

Prints the contents of the manifest associated with the given roster.

@item Sample output:

FIXME_ROSTER

@verbatim
e3915658cb464d05f21332e03d30dca5d94fe776  .htaccess
00ff89c69e7a8f6a0f48c6503168d9b62a0cfeb0  .mt-attrs
80d8f3f75c9b517ec462233e155f7dfb93379f67  AUTHORS
fc74a48c7f73eedcbe1ea709755fbe819b29736c  ChangeLog
dfac199a7539a404407098a2541b9482279f690d  LICENSE
440eec971e7bb61ccbb61634deb2729bb25931cd  README
e0ea26c666b37c5f98ccf80cb933d021ee55c593  TODO
b28ece354969314ce996f3030569215d685973d6  branch.psp
1fdb62e05fb2a9338d2c72ddc58de3ab2b3976fe  common.py
64cb5898e3a026b4782c343ca4386585e0c3c275  config.py.example
7152c3ff110418aca5d23c374ea9fb92a0e98379  error.psp
5d8536100fdf51d505b6f20bc9c16aa78d4e86a8  fileinbranch.psp
981df124a0b5655a9f78c42504cfa8c6f02b267a  headofbranch.psp
a43d0588a69e622b2afc681678c2a5c3b3b1f342  help.psp
18a8bffc8729d7bfd71d2e0cb35a1aed1854fa74  html.py
c621827db187839e1a7c6e51d5f1a7f6e0aa560c  index.psp
708b61436dce59f47bd07397ce96a1cfabe81970  monotone.py
a02b1c161006840ea8685e461fd07f0e9bb145a3  revision.psp
027515fd4558abf317d54c437b83ec6bc76e3dd8  rss_feed.gif
638140d6823eee5844de37d985773be75707fa25  tags.psp
be83f459a152ffd49d89d69555f870291bc85311  tarofbranch.psp
fb51955563d64e628e0e67e4acca1a1abc4cd989  utility.py
8d04b3fc352a860b0e3240dcb539c1193705398f  viewmtn.css
7cb5c6b1b1710bf2c0fa41e9631ae43b03424a35  viewmtn.py
530290467a99ca65f87b74f653bf462b28c6cda9  wrapper.py
@end verbatim

@item Output format:

The output format is one line for each file in the manifest. Each line begins 
with a 40 character file ID, followed by two space characters ('  ') and then 
the filename.

@item Error conditions:

If the manifest ID specified is unknown or invalid prints an error
message to stderr and exits with status 1.

@end table

@item monotone automate get_file @var{id}

@table @strong
@item Arguments:

The  @var{id} argument specifies the file to be output.

@item Added in:

1.0

@item Purpose:

Prints the contents of the specified file.

@item Sample output:

@verbatim
If you've downloaded a release, see INSTALL for installation
instructions.  If you've checked this out, the generated files are not
included, and you must use "autoreconf --install" to create them.

"make html" for docs, or read the .info file and / or man page.
@end verbatim

@item Output format:

The file contents are output without modification.

@item Error conditions:

If the file id specified is unknown or invalid prints an error message
to stderr and exits with status 1.

@end table


@item monotone automate keys

@table @strong
@item Arguments:

None.

@item Added in:

1.1

@item Purpose:

Print all keys in basic_io format.

@item Sample output:

@verbatim
            name "tbrownaw@gmail.com"
     public_hash [475055ec71ad48f5dfaf875b0fea597b5cbbee64]
    private_hash [7f76dae3f91bb48f80f1871856d9d519770b7f8a]
 public_location "database" "keystore"
private_location "keystore"

           name "tomfa@debian.org"
    public_hash [3ac4afcd86af28413b0a23b7d22b9401e15027fc]
public_location "database"

            name "underwater@fishtank.net"
     public_hash [115fdc73d87a5e9901d018462b21a1f53eca33a1]
    private_hash [b520d2cfe7d30e4ea1725fc4f34646fc5469b13d]
 public_location "keystore"
private_location "keystore"

@end verbatim

@item Output format:

For each key, a basic_io stanza is printed. The public_location and
private_location items may have multiple values as shown above for public_location, one value for each place that the key is stored. If the
private key does not exist, then the private_hash and private_location
items will be absent. The keys are ordered alphabetically by name.

@item Error conditions:

None.

@end table

@end ftable

@page
@node    RCS
@section RCS

@ftable @command
@item monotone rcs_import @var{filename...}

This command imports all the file versions in each RCS file listed in
@var{filename...}.  These files should be raw RCS files, ending in
@code{,v}. Monotone parses them directly and inserts them into your
database.  Note that this does not do any revision reconstruction, and
is only useful for debugging.

@item monotone cvs_import @var{pathname}

This command imports all the file versions in each RCS file found in the
tree of files starting at @var{pathname}, then reconstructs the
tree-wide history of logical changes by comparing RCS time stamps and
change log entries. For each logical tree-wide change, monotone
synthesizes a manifest and revision, and commits them (along with all
associated file deltas) to your database. It also copies all change log
entries, author identifiers, and date stamps to manifest certificates.

In normal use, @var{pathname} will be a CVS module, though it is
possible to point it at a directory within a module as well.  Whatever
directory you point it at will become the root of monotone's version of
the tree.

@end ftable


@node    Hook Reference
@chapter Hook Reference

Monotone's behavior can be customized and extended by writing
@dfn{hook functions}, which are written in the
@uref{http://www.lua.org, Lua} programming language. At certain points
in time, when monotone is running, it will call a hook function to
help it make a decision or perform some action.  If you provide a hook
function definition which suits your preferences, monotone will
execute it. This way you can modify how monotone behaves.

You can put new definitions for any of these hook functions in a file
@file{$HOME/.monotone/monotonerc}, or in your workspace in
@file{MT/monotonerc}, both of which will be read every time monotone
runs. Definitions in @file{MT/monotonerc} shadow (override)
definitions made in your @file{$HOME/.monotone/monotonerc}. You can also tell
monotone to interpret extra hook functions from any other @var{file}
using the @option{--rcfile=@var{file}} option; hooks defined in files
specified on the command-line will shadow hooks from the the automatic
files.
By specifying @option{--rcfile=@var{directory}} you can automatically
load all the files contained into @var{directory}.

Monotone also makes available to hook writers a number of helper
functions exposing functionality not available with standard lua.

For the complete source of the default hooks see @ref{Default
hooks}.

@menu
* Hooks::                     All hooks called by monotone.
* Additional Lua Functions::  Extra functionality available to hook writers.
@end menu

@page
@node   Hooks
@section Hooks

This section documents the existing hook functions and their default
definitions. 

@subsection Event Notifications and Triggers

There are a number of hooks that are called when noteworthy events
occur, such as commits or new revisions arriving over the network. These
hooks can be used to feed the events into external notification systems,
such as generating email.

By default, these hooks are undefined, so no special external actions
are taken.

@ftable @code
@item note_commit (@var{new_id}, @var{revision}, @var{certs})

Called by monotone after the version @var{new_id} is committed. The
second parameter, @var{revision} is the text of the revision, what would
be given by "monotone cat revision @var{new_id}". The
third parameter, @var{certs}, is a lua table containing the set of
certificate names and values committed along with this version. There
is no default definition for this hook. 

Note that since the @var{certs} table does not contain cryptographic
or trust information, and only contains one entry per cert name, it is
an incomplete source of information about the committed version. This
hook is only intended as an aid for integrating monotone with informal
commit-notification systems such as mailing lists or news services. It
should not perform any security-critical operations.

@item note_netsync_revision_received (@var{new_id}, @var{revision}, @var{certs})

Called by monotone after the revision @var{new_id} is received through
netsync. @var{revision} is the text of the revision, what would be given
by "monotone cat revision @var{new_id}". @var{certs} is a lua table
containing one subtable for each
cert attached to the revision @var{new_id}. These subtables have fields
named "key", "name", and "value", containing the signing key for the cert,
the name of the cert, and the value of the cert. There is no default
definition for this hook. 

@item note_netsync_cert_received (@var{rev_id}, @var{key}, @var{name}, @var{value})

Called by monotone after a cert is received through netsync, iff the revision
that the cert is attached to was not also received in the same netsync
operation. @var{rev_id} is the revision id that the cert is attached to,
@var{key} is the key that the cert is signed with, @var{name} is the name
of the cert, and @var{value} is the cert value. There is no default
definition for this hook. 

@item note_netsync_pubkey_received (@var{keyname})

Called by monotone after a pubkey is received through netsync. @var{keyname}
is the name of the key received. There is no default definition for this hook. 

@end ftable

@subsection User Defaults

These are hooks that can be used to provide smart, context-sensitive
default values for a number of parameters the user might otherwise be
prompted for.

@ftable @code
@item get_branch_key (@var{branchname})

Returns a string which is the name of an @sc{rsa} private key used to sign
certificates in a particular branch @var{branchname}. There is no
default definition for this hook. The command-line option
@option{--key=@var{keyname}} overrides any value returned from this
hook function. If you have only one private key in your database, you
do not need to define this function or provide a
@option{--key=@var{keyname}} option; monotone will guess that you want
to use the unique private key.

@item get_passphrase (@var{keypair_id})

Returns a string which is the passphrase used to encrypt the private
half of @var{keypair_id} in your database, using the @sc{arc4} symmetric
cipher.  @var{keypair_id} is a Lua string containing the label that you
used when you created your key --- something like
@code{"nicole@@example.com"}.  This hook has no default definition. If
this hook is not defined or returns false, monotone will prompt you for
a passphrase each time it needs to use a private key.

@item get_author (@var{branchname})

Returns a string which is used as a value for automatically generated
@code{author} certificates when you commit changes to
@var{branchname}.  Generally this hook remains undefined, and monotone
selects your signing key name for the author certificate. You can use
this hook to override that choice, if you like.

This hook has no default definition, but a possible definition might be:
@smallexample
@group
function get_author(branchname)
        local user = os.getenv("USER")
        local host = os.getenv("HOSTNAME")
        if ((user == nil) or (host == nil)) then return nil end
        return string.format("%s@@%s", user, host)
end
@end group
@end smallexample

@item edit_comment (@var{commentary}, @var{user_log_message})

Returns a log entry for a given set of changes, described in
@var{commentary}.  The commentary is identical to the output of
@command{monotone status}. This hook is intended to interface with
some sort of editor, so that you can interactively document each
change you make. The result is used as the value for a
@code{changelog} certificate, automatically generated when you commit
changes.

The contents of @file{MT/log} are read and passed as
@var{user_log_message}. This allows you to document your changes as
you proceed instead of waiting until you are ready to commit. Upon
a successful commit, the contents of @file{MT/log} are erased setting
the system up for another edit/commit cycle.

For the default definition of this hook, see @ref{Default hooks}.

@item persist_phrase_ok ()

Returns @code{true} if you want monotone to remember the passphrase of
a private key for the duration of a single command, or @code{false} if
you want monotone to prompt you for a passphrase for each certificate
it generates. Since monotone often generates several certificates in 
quick succession, unless you are very concerned about security you
probably want this hook to return @code{true}.

The default definition of this hook is:
@smallexample
@group
function persist_phrase_ok()
        return true
end
@end group
@end smallexample

@item use_inodeprints ()

Returns @code{true} if you want monotone to automatically enable
@ref{Inodeprints} support in all workspaces.  Only affects working
copies created after you modify the hook.

The default definition of this hook is:
@smallexample
@group
function use_inodeprints()
        return false
end
@end group
@end smallexample

@item ignore_file (@var{filename})

Returns @code{true} if @var{filename} should be ignored while adding,
dropping, or moving files. Otherwise returns @code{false}. This is
most important when performing recursive actions on directories, which
may affect multiple files simultaneously. 

The default definition of this hook recognises a number of common file
types and extensions for temporary and generated file types that users
typically don't want to track. If the file @file{.mt-ignore} exists,
this hook will read a list of regular expressions from the file, one per
line, and ignore all files matching one of these expressions. For the
default definition of this hook, see @ref{Default hooks}.

@item ignore_branch (@var{branchname})

Returns @code{true} if @var{branchname} should be ignored while listing
branches. Otherwise returns @code{false}. This hook has no default
definition, therefore the default behavior is to list all branches.

@end ftable

@subsection Netsync Permission Hooks

These hooks are used when running a netsync server, via
@command{monotone serve}. They are evaluated by the server for each new
connection, based on the certificate used for authentication by the
client.  Note that a long-running server will need to be restarted in
order to reload the hook definitions if the @file{montonerc} file is
changed.

@ftable @code
@item get_netsync_read_permitted (@var{branch}, @var{identity})

Returns @code{true} if a peer authenticated as key @var{identity}
should be allowed to read from your database certs, revisions,
manifests, and files associated with @var{branch}; otherwise @code{false}.
The default definition of this hook reads a file @file{read-permissions} in
the configuration directory. This file looks like
@smallexample
@group
pattern "net.example.project.@{private,security@}*"
allow "joe@@example.net"
allow "jim@@example.net"

comment "everyone can read these branches"
pattern "net.example.@{public,project@}*"
allow "*"
@end group
@end smallexample
This example allows everyone access to branches @code{net.example.project} and
@code{net.example.public} and their sub-branches, except for the branches in
@code{net.example.project.security} and @code{net.example.project.private},
which are only readable by Joe and Jim.

The file is divided into stanzas of one @code{pattern} line followed by any
number of @code{allow} and @code{deny} lines, and possibly a @code{continue}
line. Anything from the unquoted word @code{comment} until the next unquoted
word is ignored. A stanza is processed if the argument to
@code{pattern} is a glob that matches @var{branch}. Any keys which match an
@code{allow} line are given access, and any keys which match a @code{deny} line
are denied access. If there is a @code{continue "true"} line, then if the key
is not granted or denied access in this stanza the next matching stanza will be
processed. If there is not a @code{continue "true"} line, then any key which
has not been given access will be denied access even if it doesn't match any
@code{deny} lines. Thus, deny lines are redundant unless there is also a
@code{continue "true"} line.


If a client connects anonymously, this hook will be called with a
@var{identity} of @code{nil}.

Note that the @var{identity} value is a key ID (such as
``@code{graydon@@pobox.com}'') but will correspond to a @emph{unique}
key fingerprint (hash) in your database. Monotone will not permit two
keys in your database to have the same ID. Make sure you confirm the
key fingerprints of each key in your database, as key ID strings are
``convenience names'', not security tokens.

@item get_netsync_write_permitted (@var{identity})

Returns @code{true} if a peer authenticated as key @var{identity} should
be allowed to write into your database certs, revisions, manifests, and
files; otherwise @code{false}. The default definition of this hook reads a file
@file{write-permissions} in the configuration directory which contains a list
of keys, one per line, which are allowed write access. The special value
@code{*} means to allow access to anyone whose public key we already have.

If a client connects anonymously, it will be unconditionally denied
write access; this hook will @emph{not} be called with a @var{identity}
of @code{nil}.

Note that the @var{identity} value is a key ID (such as
``@code{graydon@@pobox.com}'') but will correspond to a @emph{unique}
key fingerprint (hash) in your database. Monotone will not permit two
keys in your database to have the same ID. Make sure you confirm the
key fingerprints of each key in your database, as key ID strings are
``convenience names'', not security tokens.

Note also that, unlike the equivalent read permission hook, the write
permission hook does not take a @var{branch} name as an argument.  There
is presently no way to selectively grant write access to different
branches via netsync, for a number of reasons. Contributions in the
database from different authors can be selectively trusted using the
@ref{Trust Evaluation Hooks} instead.

@end ftable

@anchor{Trust Evaluation Hooks}
@subsection Trust Evaluation Hooks

Monotone makes heavy use of certs to provide descriptive information
about revisions. In many projects, not all developers should have the
same privileges, or be trusted for the same purposes (indeed, some
signers might be automated robots, with very specific purposes).

These hooks allow the user to configure which signers will be trusted to
make which kinds of assertions using certs. Monotone these certs when
selecting available revisions for commands such as @command{update}.

Each user, or even each workspace, can have their own
implementation of these hooks, and thus a different filtered view of
valid revisions, according to their own preferences and purposes.

@ftable @code
@item get_revision_cert_trust (@var{signers}, @var{id}, @var{name}, @var{val})

Returns whether or not you @emph{trust} the assertion
@var{name}=@var{value} on a given revision @var{id}, given a valid
signature from all the keys in @var{signers}. The @var{signers}
parameter is a table containing all the key names which signed this
cert, the other three parameters are strings.

The default definition of this hook simply returns @code{true}, which
corresponds to a form of trust where every key which is defined in
your database is trusted. This is a @emph{weak} trust setting; you
should change it to something stronger. A possible example of a
stronger trust function (along with a utility function for computing
the intersection of tables) is the following:

@smallexample
@group
function intersection(a,b)
   local s=@{@}
   local t=@{@}
   for k,v in pairs(a) do s[v] = 1 end
   for k,v in pairs(b) do if s[v] ~= nil then table.insert(t,v) end end
   return t
end

function get_revision_cert_trust(signers, id, name, val)
   local trusted_signers = @{ "bob@@happyplace.example.com", 
                             "friend@@trustedplace.example.com", 
                             "myself@@home.example.com" @}
   local t = intersection(signers, trusted_signers)

   if t == nil then return false end

   if    (name ~= "branch" and table.getn(t) >= 1)
      or (name == "branch" and table.getn(t) >= 2)
   then
      return true
   else
      return false
   end
end
@end group
@end smallexample

In this example, any revision certificate is trusted if it is signed
by at least one of three ``trusted'' keys, unless it is an
@code{branch} certificate, in which case it must be signed by
@emph{two} or more trusted keys. This is one way of requiring that
the revision has been approved by an extra ``reviewer'' who used the
@code{approve} command.

@item accept_testresult_change (@var{old_results}, @var{new_results})

This hook is used by the update algorithm to determine whether a
change in test results between update source and update target is
acceptable. The hook is called with two tables, each of which maps a
signing key -- representing a particular testsuite -- to a boolean
value indicating whether or not the test run was successful. The
function should return @code{true} if you consider an update from the
version carrying the @var{old_results} to the version carrying the
@var{new_results} to be acceptable.

The default definition of this hook follows:

@smallexample
@group
function accept_testresult_change(old_results, new_results)
   for test,res in pairs(old_results)
   do
      if res == true and new_results[test] ~= true
      then
	 return false
      end
   end
   return true
end
@end group
@end smallexample

This definition accepts only those updates which preserve the set of
@code{true} test results from update source to target. If no rest
results exist, this hook has no affect; but once a @code{true} test
result is present, future updates will require it. If you want a more
lenient behavior you must redefine this hook.

@end ftable

@subsection External Diff Tools

Differences between files can be shown in a number of ways, varying
according to user preference and file type. This hook allows
customisation of the way file differences are shown.

@ftable @code
@item external_diff (@var{file_path}, @var{old_data}, @var{new_data}, @var{is_binary},
                     @var{diff_args}, @var{old_rev}, @var{new_rev})

Called for each file when @command{diff} is given the
@option{--external} command.  @var{file_path} is the pathname of the
file that is being diffed.  @var{old_data} and @var{new_data} are the
data contents of the old and the new file.  If the data is binary,
@var{is_binary} will be true, otherwise false.  @var{old_rev} and
@var{new_rev} are the revision IDs of the old and new data.

If an extra arguments are given via @option{--diff-args}, the string
will be passed in as @var{diff_args}.  Otherwise @var{diff_args} will
be nil.

The default implementation of this hook calls the program @code{diff},
and if @option{--diff-args} were not passed, takes default arguments
from the lua variable @code{external_diff_default_args}.  You can
override this variable in your configuration file, without overriding
the whole hook.

@end ftable


@subsection External Merge Tools

Monotone often needs to merge together the work of multiple distributed
developers, and uses these hooks to help this process when the merge
does not automatcally succeed.  Often these hooks will be used to invoke
an external interactive merge tool.  

The @ref{Default hooks} include helper functions used by the hooks below
to invoke a number of external merge tools known to monotone, and you
can override or extend these hooks if you have a preferred tool, or if
you have a tool specific to certain file types.

@ftable @code
@anchor{merge2}
@item merge2 (@var{left_path}, @var{right_path}, @var{merged_path}, @var{left_text}, @var{right_path})

This hook is called to resolve merges that monotone could not resolve
automatically.  The left and right contents of the file are passed in
the @var{left_text}, and @var{right_text} strings.  In addition, the
hook is given the names that this file had in left (@var{left_path}
and right (@var{right_path}) trees, and the name it will end up having
in the merged tree (@var{merged_path}).  These paths are useful for
merge tools that can display the names of files in their GUI, since
the actual path names are likely more meaningful than the temporary
file names the merge tool will actually be working on.

Returns a string, which should be the merger of the given texts.  The
default definition of this hook delegates the actual merge to the
result of @ref{get_preferred_merge2_command}.  For the default
definition of this hook, see @ref{Default hooks}.


@anchor{get_preferred_merge2_command}
@item get_preferred_merge2_command(@var{tbl})

Returns the results of running an external merge on two strings.
@var{tbl} wraps up the various arguments for each merge command and 
is always provided by @ref{merge2}. If there is a particular editor
that you would like to use to perform merge2 operations, override
this hook to specify it.


@anchor{merge3}
@item merge3 (@var{ancestor_path}, @var{left_path}, @var{right_path}, @var{merged_path}, @var{ancestor_text}, @var{left_text}, @var{right_text})

This hook is called to resolve merges that monotone could not resolve
automatically.  The actual ancestor, left, and right contents of the
file are passed in the @var{ancestor_text}, @var{left_text}, and
@var{right_text} strings.  In addition, the hook is given the names
that this file had in the ancestor (@var{ancestor_path}), left
(@var{left_path}), and right (@var{right_path}) trees, and the name it
will end up having in the merged tree (@var{merged_path}).  These
paths are useful for merge tools that can display the names of files
in their GUI, since the actual path names are likely more meaningful
than the temporary file names the merge tool will actually be working
on.

Returns a string, which should be the merger of the given texts.  The
default definition of this hook delegates the actual merge to the
result of @ref{get_preferred_merge3_command}.  For the default
definition of this hook, see @ref{Default hooks}.


@anchor{get_preferred_merge3_command}
@item get_preferred_merge3_command(@var{tbl})

Returns the results of running an external merge on three strings.
@var{tbl} wraps up the various arguments for each merge command and 
is always provided by @ref{merge3}. If there is a particular editor
that you would like to use to perform merge3 operations, override
this hook to specify it. 

@end ftable

@subsection Selector Expansion

Monotone's selectors are a powerful mechanism used to refer to revisions
with symbolic names or groupings. Thanks to the hooks described in this
section, it is possible to use various forms of shorthand in selection
strings; these hooks are designed to recognise shorthand patterns and
expand them to their full form.

For more detail on the use of selectors, see @ref{Selectors}.  

@ftable @code
@item expand_selector (@var{str})

Attempts to expand @var{str} as a selector. Expansion generally means
providing a type prefix for the selector, such as @code{a:} for authors
or @code{d:} for dates. This hook is called once for each element of a
combined selector string (between @code{/} separators) prior to
evaluation of the selector. For the default definition of this hook, see
@ref{Default hooks}.

@item expand_date (@var{str})

Attempts to expand @var{str} as a date expression. Expansion means
recognizing and interpreting special words such as @code{yesterday} or
@code{6 months ago} and converting them into well formed date
expressions. For the default definition of this hook, see @ref{Default
hooks}.

@end ftable

@subsection System Line and Character Conversions

Different operating systems vary in the character(s) used as line
separators for text files, and in the character set (locale) used for
filenames. These differences can become annoying when multiple
developers on a project use different operating systems. Because so much
of monotone depends on cryptographic checksums, it is often desirable
that these differences are removed so that files are considered
identical regardless of platform-specific representations. The hooks in
this section allow the user to specify these equivalence and conversion
rules.

@ftable @code
@item get_system_linesep ()

Returns a string which defines the default system line separator.
This should be one of the strings @code{CR}, @code{LF}, or
@code{CRLF}. The system line separator may be used when reading or
writing data to the terminal, or otherwise interfacing with the user.
The system line separator is not used to convert files in the working
copy; use @code{get_linesep_conv} for converting line endings in the
workspace.

This hook has no default definition. For more information on line
ending conversion, see the section on @ref{Internationalization}.

@item get_linesep_conv (@var{filename})

Returns a table which contains two strings. The first string in the
return value is the name of a line ending convention to use for the
``internal'' representation of @var{filename}. The second string in
the return value is the name of a line ending convention to use for
the ``external'' representation of @var{filename}. Line ending
conventions should be one of the strings @code{CR}, @code{LF}, or
@code{CRLF}. 

When @var{filename} is read from the workspace, it is run through
line ending conversion from the external form to the internal
form. When @var{filename} is written to the workspace, it is run
through line ending conversion from the internal form to the external
form. @sc{sha1} values are calculated from the internal form of
@var{filename}. It is your responsibility to decide which line ending
conversions your work will use.

This hook has no default definition; monotone's default behavior is to
keep external and internal forms byte-for-byte identical. For more
information on line ending conversion, see the section on
@ref{Internationalization}.

@item get_charset_conv (@var{filename})

Returns a table which contains two strings. The first string in the
return value is the name of a character set to use for the
``internal'' representation of @var{filename}. The second string in
the return value is the name of a character set to use for the
``external'' representation of @var{filename}.  

When @var{filename} is read from the workspace, it is run through
character set conversion from the external form to the internal
form. When @var{filename} is written to the workspace, it is run
through character set conversion from the internal form to the
external form. @sc{sha1} values are calculated from the internal
form of @var{filename}. It is your responsibility to decide which
character set conversions your work will use. 

This hook has no default definition; monotone's default behavior is to
keep external and internal forms byte-for-byte identical. For more
information on character set conversion, see the section on
@ref{Internationalization}.

@end ftable

@subsection Attribute Handling

Some files in a project are special; they may require different handling
(such as binary or structured files that should always be manually
merged -- see @ref{Merging}), or they may represent executable scripts
or programs.

Monotone allows each file in a repository to carry arbitrary @ref{File
Attributes}. Persistent attributes are stored in the @file{.mt-attrs},
in your workspace and manifest. The hooks in this section allow files
to be automatically recognised as having certain attributes at the time
they're added, and for custom triggers to be invoked on each file
according to its attributes when the workspace is changed.

@ftable @code
@item attr_functions [@var{attribute}] (@var{filename}, @var{value})

This is not a hook function, but a @emph{table} of hook
functions. Each entry in the table @code{attr_functions}, at table
entry @var{attribute}, is a function taking a file name @var{filename}
and a attribute value @var{value}. The function should ``apply'' the 
attribute to the file, possibly in a platform-specific way.

Hook functions from this table are called for each triple found in the
@file{.mt-attrs} file, after any command which modifies the working
copy. This facility can be used to extend monotone's understanding of
files with platform-specific attributes, such as permission bits, access
control lists, or special file types.

By default, there is only one entry in this table, for the @code{execute}
attribute. Its definition is:

@smallexample
@group
attr_functions["execute"] = 
  function(filename, value) 
        if (value == "true") then
         make_executable(filename)
      end
   end
@end group
@end smallexample

@item attr_init_functions [@var{attribute}] (@var{filename})

This is not a hook function, but a @emph{table} of hook
functions. Each entry in the table @code{attr_init_functions}, at table
entry @var{attribute}, is a function taking a file name
@var{filename}. Each function defines the attributes that should be
stored in @file{.mt-attrs} for the given @var{filename}. This table of
hook functions is called once for each file during an @dfn{add}.

By default, there are only two entries in this table, for the
@code{execute} and @code{manual_merge} attributes. Their definition is:

@smallexample
@group
attr_init_functions["execute"] = 
   function(filename)
      if (is_executable(filename)) then 
        return "true" 
      else 
        return nil 
        end
  end
attr_init_functions["manual_merge"] = 
   function(filename)
      if (binary_file(filename)) then 
        return "true" -- binary files must merged manually
      else 
        return nil
      end 
   end
@end group
@end smallexample

The @code{binary_file} function is also defined as a lua hook. See
@ref{Default hooks}. 

@end ftable

@subsection Validation Hooks

If there is a policy decision to make, Monotone defines certain hooks to
allow a client to validate or reject certain behaviors.

@ftable @code
@item validate_commit_message (@var{message}, @var{changeset_text})

This hook is called after the user has entered his/her commit message.
@var{message} is the commit message that the user has entered and 
@var{changeset_text} is the full text of the changes for this revision,
which can be parsed with the parse_basic_io function. If the hook finds the
commit message satisfactory, it can return @code{true, ""}. If it finds
fault, then it can return @code{false, reason} where @var{reason} is the
reason the message was rejected. By default, this hook rejects empty log
messages.

@end ftable

@page
@node   Additional Lua Functions
@section Additional Lua Functions

This section documents the additional lua functions made available to
hook writers. 

@ftable @code

@item existonpath(@var{possible_command})

This function receives a string containing the name of an external
program and returns 0 if it exists on path and is executable, -1
otherwise. 
As an example, @code{existonpath("xxdiff")} returns 0 if the
program xxdiff is available.
On windows, this function automatically appends ``.exe'' to the
program name. In the previous example, @code{existonpath} would search
for ``xxdiff.exe''.

@item guess_binary(@var{filespec})

Returns true if the file appears to be binary, i.e. contains one or
more of the following characters:
@smallexample
@group
0x00 thru 0x06
0x0E thru 0x1a
0x1c thru 0x1f
@end group
@end smallexample

@item include(@var{scriptfile}) 

This function tries to load and execute the script contained into
scriptfile.  It returns true for success and false if there is an
error. 

@item includedir(@var{scriptpath})

This function loads and executes in alphabetical order all the scripts
contained into the directory scriptpath.
If one of the scripts has an error, the functions doesn't process the
remaining scripts and immediately returns false.

@item is_executable(@var{filespec})

This function returns true if the file is executable, false
otherwise.  On windows this function returns always false.

@item kill(@var{pid} [, @var{signal}])

This function calls the kill() C library function on posix systems and
TerminateProcess on Win32 (in that case @var{pid} is the process
handle).  If the optional @var{signal} parameter is missing, SIGTERM
will be used. 
Returns 0 on succes, -1 on error.

@item make_executable(@var{filespec})

This function marks the named file as executable.  On windows has no
effect. 

@item mkstemp(@var{template})

Like its C library counterpart,  mkstemp creates a unique name and
returns a file descriptor for the newly created file. 
The value of template should be a pointer to a character buffer loaded
with a null-terminated string that consists of contiguous, legal file
ad path name characters followed by six Xs. 
The function mkstemp replaces the Xs by an alpha-numeric sequence
that is chosen to ensure that no file in the chosen directory has that
name. 
Furthermore, subsequent calls to mkstemp within the same process
each yield different file names. 
Unlike other implementations, monotone mkstemp allows the template
string to contain a complete path, not only a filename, allowing users
to create temporary files outside the current directory.

@strong{Important notice:}@*
To create a temporary file, you must use the @code{temp_file()}
function, unless you need to run monotone with the @option{--nostd}
option.  @code{temp_file()} builds on @code{mkstemp()} and creates a
file in the standard TMP/TEMP directories.
For the definition of @code{temp_file()}, see @ref{Default hooks}.

@item sleep(@var{seconds})

Makes the calling process sleep for the specified number of seconds.

@item spawn(@var{executable} [, @var{args ...}])

Starts the named executable with the given arguments.  Returns the
process pid on Posix systems, the process handle on Win32 or -1 if
there was an error.
Calls fork/execvp on Posix, CreateProcess on Win32.

@strong{Important notice:}@*
To spawn a process and wait for its completion, use the @code{execute()}
function, unless you need to run monotone with the @option{--nostd}
option.  @code{execute()} builds on @code{spawn()} and @code{wait()}
in a standardized way.

@item wait(@var{pid})

Wait until the process with given pid (process handle on Win32) exits.
Returns two values: a result value and the exit code of the waited-for
process.
The exit code is meaningful only if the result value is 0.

@item parse_basic_io(@var{data})

Parse the string @var{data}, which should be in basic_io format. It returns nil
if it can't parse the string; otherwise it returns a table. This will be a list
of all statements, with each entry being a table having a "name" element that is
the symbol beginning the statement and a "values" element that is a list of all
the arguments.

For example, given this as input:

@smallexample
@group
thingy "foo" "bar"
thingy "baz"
spork
frob "oops"
@end group
@end smallexample

The output table will be:
@smallexample
@group
@{
   1 = @{ name = "thingy", args = @{ 1 = "foo", 2 = "bar" @} @},
   2 = @{ name = "thingy", args = @{ 1 = "baz" @} @},
   3 = @{ name = "spork", args = @{ @} @},
   4 = @{ name = "frob", args = @{ 1 = "oops" @} @}
@}
@end group
@end smallexample

@end ftable


@node    Special Topics
@chapter Special Topics

This chapter describes some ``special'' issues which are not directly
related to monotone's @emph{use}, but which are occasionally of
interest to people researching monotone or trying to learn the
specifics of how it works. Most users can ignore these sections.

@menu
* Internationalization::   Using monotone in non-English locales.
* Hash Integrity::         Notes on probability and failure.
* Rebuilding ancestry::    In case of corruption.
@end menu

@page
@node    Internationalization
@section Internationalization

Monotone initially dealt with only ASCII characters, in file path
names, certificate names, key names, and packets. Some
conservative extensions are provided to permit internationalized
use. These extensions can be summarized as follows:

@itemize

@item
Monotone uses GNU gettext to provide localized progress and error
messages. Translations may or may not exist for your locale, but the
infrastructure is present to add them.

@item
All command-line arguments are mapped from your local character set to
UTF-8 before processing. This means that monotone can @emph{only}
handle key names, file names and certificate names which map cleanly
into UTF-8.

@item
Monotone's control files are stored in UTF-8. This includes: revisions
and manifests, both inside the database and when written to the
@file{MT/} directory of the workspace; the @file{MT/options} and
@file{MT/work} files; and the @file{.mt-attrs} file. Converting these
files to any other character set will cause monotone to break; do not
do so.

@item
File path names in the workspace are converted to the locale's
character set (determined via the LANG or CHARSET environment
variables) before monotone interacts with the file system. If you are
accustomed to being able to use file names in your locale's character
set, this should ``just work'' with monotone.

@item
Key and cert names, and similar ``name-like'' entities are subject to
some cleaning and normalization, and conversion into network-safe
subsets of ASCII (typically ACE). Generally, you should be able to use
``sensible'' strings in your locale's character set as names, but they
may appear mangled or escaped in certain contexts such as network
transmission.

@item
Monotone's transmission and storage forms are otherwise
unchanged. Packets and database contents are 7-bit clean ASCII.

@end itemize

The remainder of this section is a precise specification of monotone's
internationalization behavior.

@heading General Terms

@table @asis
@item Character set conversion
The process of mapping a string of bytes representing wide characters
from one encoding to another. Per-file character set conversions are
specified by a Lua hook @code{get_charset_conv} which takes a filename
and returns a table of two strings: the first represents the
"internal" (database) charset, the second represents the "external"
(file system) charset.

@item Line ending conversion
The process of converting platform-dependent end-of-line codes
(@code{0x0D}, @code{0x0A}, or the pair @code{0x0D 0x0A}) from one
convention to another. Per-file line ending conversion is specified by
a Lua hook @code{get_linesep_conv} which takes a filename and returns
a table of two strings: the first represents the "internal" (database)
line ending convention, the second represents the "external"
(file system) line ending convention. each string should be one of the
three strings "CR", "LF", or "CRLF".

Note that Line ending conversion is always performed on the internal
character set, when both character set and line ending conversion are
enabled; this behavior is meant to encourage the use of the monotone's
``normal form'' (UTF-8, '\n') as an internal form for your source
files, when working with multiple external forms. Also note that line
ending conversion only works on character encodings with the specific
code bytes described above, such as ASCII, ISO-8859x, and UTF-8.

@item Normal form conversion
Character set and line ending conversions done between a "system form"
and a "normal form". The system character set form is inferred from
the environment, using the various locale environment variables. The
system line ending form can be additionally specialized using the
@code{get_system_linesep} hook. No hooks exist for adjusting the
system character set, since the system character set must be known
during command-line argument processing, before any Lua hooks are
loaded.

Monotone's normal form is the UTF-8 character set and the @code{0x0A}
(LF) line ending form. This form is used in any files monotone needs
to read, write, and interpret itself, such as: @file{MT/revision},
@file{MT/work}, @file{MT/options}, @file{.mt-attrs}

@item LDH
Letters, digits, and hyphen: the set of ASCII bytes @code{0x2D},
@code{0x30..0x39}, @code{0x41..0x5A}, and @code{0x61..0x7A}.

@item stringprep
RFC 3454, a general framework for mapping, normalizing, prohibiting
and bidirectionality checking for international names prior to use in
public network protocols.

@item nameprep
RFC 3491, a specific profile of stringprep, used for preparing
international domain names (IDNs)

@item punycode
RFC 3492, a "bootstring" encoding of unicode into ASCII. 

@item IDNA
RFC 3490, international domain names for applications, a combination
of the above technologies (nameprep, punycoding, limiting to LDH
characters) to form a specific "ASCII compatible encoding" (ACE) of
unicode, signified by the presence of an "unlikely" ACE prefix string
"xn--". IDNA is intended to make it possible to use unicode relatively
"safely" over legacy ASCII-based applications. the general picture of
an IDNA string is this:

@smallexample
@group     
      @{ACE-prefix@}@{LDH-sanitized(punycode(nameprep(UTF-8-string)))@}
@end group
@end smallexample

It is important to understand that IDNA encoding does @emph{not}
preserve the input string: it both prohibits a wide variety of
possible strings and normalizes non-equal strings to supposedly
"equivalent" forms.

By default, monotone does @emph{not} decode IDNA when printing to the
console (IDNA names are ASCII, which is a subset of UTF-8, so this
normal form conversion can still apply, albeit oddly). this behavior
is to protect users against security problems associated with
malicious use of "similar-looking" characters. If the hook
@code{display_decoded_idna} returns true, IDNA names are decoded for
display.

@end table
  
@heading Filenames

@itemize

@item
Filenames are subject to normal form conversion. 

@item
Filenames are subject to an additional normal form stage which adjusts
for platform name semantics, for example changing the Windows
@code{0x5C} '\' path separator to @code{0x2F} '/'. This extra
processing is performed by boost::filesystem.

@item
FIXME: Monotone does not properly handle case insensitivity on windows.

@item
A filename (in normal form) is constrained to be a nonempty sequence
of path components, separated by byte @code{0x2F} (ASCII / ), and
without a leading or trailing @code{0x2F}.

@item
A path component is a nonempty sequence of any UTF-8 character codes
except the path separator byte @code{0x2F} and any ASCII "control codes"
(@code{0x00..0x1F} and @code{0x7F}).

@item
The path components "." and ".." are prohibited.

@item
Manifests and revisions are constructed from the normal form
(UTF-8). The LC_COLLATE locale category is @emph{not} used to sort
manifest or revision entries.

@end itemize

@heading File contents

@itemize
@item
Files are subject to character set conversion and line ending
conversion.

@item
File SHA1 values are calculated from the internal form of the
conversions. If the external form of a file differs from the internal
form, running a 3rd party program such as @code{sha1sum} will produce
different results than those entries shown in a corresponding manifest.

@end itemize

@heading UI messages

UI messages are displayed via calls to @code{gettext()}. 

@heading Host names

Host names are read on the command-line and subject to normal form
conversion. Host names are then split at @code{0x2E} (ASCII '.'), each
component is subject to IDNA encoding, and the components are
rejoined.

After processing, host names are stored internally as ASCII. The
invariant is that a host name inside monotone contains only sequences
of LDH separated by @code{0x2E}.

@heading Cert names

Read on the command line and subject to normal form conversion and
IDNA encoding as a single component. The invariant is that a cert name
inside monotone is a single LDH ASCII string.

@heading Cert values

Cert values may be either text or binary, depending on the return
value of the hook @code{cert_is_binary}. If binary, the cert value is
never printed to the screen (the literal string "<binary>" is
displayed, instead), and is never subjected to line ending or
character conversion. If text, the cert value is subject to normal
form conversion, as well as having all UTF-8 codes corresponding to
ASCII control codes (@code{0x0..0x1F} and @code{0x7F}) prohibited in
the normal form, except @code{0x0A} (ASCII LF).

@heading Var domains

Read on the command line and subject to normal form conversion and IDNA
encoding as a single component. The invariant is that a var domain
inside monotone is a single LDH ASCII string.

@heading Var names and values

Var names and values are assumed to be text, and subject to normal form
conversion.

@heading Key names

Read on the command line and subject to normal form conversion and
IDNA encoding as an email address (split and joined at '.' and '@@'
characters). The invariant is that a key name inside monotone contains
only LDH, @code{0x2E} (ASCII '.') and @code{0x40} (ASCII '@@')
characters.

@heading Packets

Packets are 7-bit ASCII. The characters permitted in packets are
the union of these character sets:

@itemize
@item
The 65 characters of base64 encoding (64 coding + "=" pad).
@item
The 16 characters of hex encoding.
@item
LDH, '@@' and '.' characters, as required for key and cert names.
@item
'[' and ']', the packet delimiters.
@item
ASCII codes 0x0D (CR), 0x0A (LF), 0x09 (HT), and 0x20 (SP). 
@end itemize

@heading The @file{.mt-attrs} file

Now uses 0x0A (ASCII LF) as a delimiter, to permit 0x20 in
filenames. This may change in the future.


@page
@node    Hash Integrity
@section Hash Integrity

Some proponents of a competing, proprietary version control system
have suggested, in a
@uref{http://www.usenix.org/events/hotos03/tech/full_papers/henson/henson_html/,
usenix paper}, that the use of a cryptographic hash function such as
@sc{sha1} as an identifier for a version is unacceptably unsafe. This
section addresses the argument presented in that paper and describes
monotone's additional precautions.

To summarize our position:
@itemize
@item
the analysis in the paper is wrong,
@item
even if it were right, monotone is sufficiently safe.
@end itemize

@heading The analysis is wrong

The paper displays a fundamental lack of understanding about what a
@emph{cryptographic} hash function is, and how it differs from a
normal hash function. Furthermore it confuses accidental collision
with attack scenarios, and mixes up its analysis of the risk involved
in each. We will try to untangle these issues here.

A cryptographic hash function such as @sc{sha1} is more than just a
uniform spread of inputs to an output range. Rather, it must be
designed to withstand attempts at:

@itemize
@item 
reversal: deriving an input value from the output
@item 
collision: finding two different inputs which hash to the same output
@end itemize

Collision is the problem the paper is concerned with. Formally, an
n-bit cryptographic hash should cost @math{2^n} work units to collide
against a given value, and @math{sqrt(2^n)} tries to find a random
pair of colliding values. This latter probability is sometimes called
the hash's ``birthday paradox probability''.

@subheading Accidental collision 

One way of measuring these bounds is by measuring how single-bit
changes in the input affect bits in the hash output. The @sc{sha1}
hash has a strong @emph{avalanche property}, which means that flipping
@emph{any one bit} in the input will cause on average half the 160
bits in the output code to change. The fanciful @sc{val1} hash
presented in the paper does not have such a property --- flipping its
first bit when all the rest are zero causes @emph{no change} to any of
the 160 output bits --- and is completely unsuited for use as a
@emph{cryptographic hash}, regardless of the general shape of its
probability distribution.

The paper also suggests that birthday paradox probability cannot be
used to measure the chance of accidental @sc{sha1} collision on ``real
inputs'', because birthday paradox probability assumes a uniformly
random sample and ``real inputs'' are not uniformly random. The paper
is wrong: the inputs to @sc{sha1} are not what is being measured (and
in any case can be arbitrarily long); the collision probability being
measured is of @emph{output space}. On output space, the hash is
designed to produce uniformly random spread, even given nearly
identical inputs. In other words, it is @emph{a primary design
criterion} of such a hash that a birthday paradox probability is a
valid approximation of its collision probability.

The paper's characterization of risk when hashing ``non-random
inputs'' is similarly deceptive. It presents a fanciful case of a
program which is @emph{storing} every possible 2kb block in a
file system addressed by @sc{sha1} (the program is trying to find a
@sc{sha1} collision). While this scenario @emph{will} very likely
encounter a collision @emph{somewhere} in the course of storing all
such blocks, the paper neglects to mention that we only expect it to
collide after storing about @math{2^{80}} of the @math{2^{16384}} possible
such blocks (not to mention the requirements for compute time to
search, or disk space to store @math{2^{80}} 2kb blocks).

Noting that monotone can only store @math{2^{41}} bytes in a database,
and thus probably some lower number (say @math{2^{32}} or so) active
rows, we consider such birthday paradox probability well out of
practical sight. Perhaps it will be a serious concern when
multi-yottabyte hard disks are common.


@subheading Collision attacks

Setting aside accidental collisions, then, the paper's underlying
theme of vulnerability rests on the assertion that someone will break
@sc{sha1}. Breaking a cryptographic hash usually means finding a way
to collide it trivially. While we note that @sc{sha1} has in fact
resisted attempts at breaking for 8 years already, we cannot say that
it will last forever. Someone might break it. We can say, however,
that finding a way to trivially collide it only changes the resistance
to @emph{active attack}, rather than the behavior of the hash on
benign inputs.

Therefore the vulnerability is not that the hash might suddenly cease
to address benign blocks well, but merely that additional security
precautions might become a requirement to ensure that blocks are
benign, rather than malicious. The paper fails to make this
distinction, suggesting that a hash becomes ``unusable'' when it is
broken. This is plainly not true, as a number of systems continue to
get useful low collision hashing behavior --- just not good security
behavior --- out of ``broken'' cryptographic hashes such as MD4.

@heading Monotone is probably safe anyways

Perhaps our arguments above are unconvincing, or perhaps you are the
sort of person who thinks that practice never lines up with
theory. Fair enough. Below we present @emph{practical} procedures you
can follow to compensate for the supposed threats presented in the
paper.

@subheading Collision attacks

A successful collision attack on @sc{sha1}, as mentioned, does not
disrupt the @emph{probability} features of @sc{sha1} on benign
blocks. So if, at any time, you believe @sc{sha1} is ``broken'', it
does @emph{not} mean that you cannot use it for your work with
monotone. It means, rather, that you cannot base your @emph{trust} on
@sc{sha1} values anymore. You must trust who you communicate with.

The way around this is reasonably simple: if you do not trust
@sc{sha1} to prevent malicious blocks from slipping into your
communications, you can always augment it by enclosing your
communications in more security, such as tunnels or additional
signatures on your email posts. If you choose to do this, you will
still have the benefit of self-identifying blocks, you will simply
cease to trust such blocks unless they come with additional
authentication information.

If in the future @sc{sha1} (or, indeed, @sc{rsa}) becomes accepted as
broken we will naturally upgrade monotone to a newer hash or public
key scheme, and provide migration commands to recalculate existing
databases based on the new algorithm. 

Similarly, if you do not trust our vigilance in keeping up to date
with cryptography literature, you can modify monotone to use any
stronger hash you like, at the cost of isolating your own
communications to a group using the modified version. Monotone is free
software, and runs atop @code{botan}, so it is both legal and
relatively simple to change it to use some other algorithm.

@page
@node    Rebuilding ancestry
@section Rebuilding ancestry

As described in @ref{Historical records}, monotone revisions contain the
@sc{sha1} hashes of their predecessors, which in turn contain the
@sc{sha1} hashes of @emph{their} predecessors, and so on until the
beginning of history.  This means that it is @emph{mathematically
impossible} to modify the history of a revision, without some way to
defeat @sc{sha1}.  This is generally a good thing; having immutable
history is the point of a version control system, after all, and it
turns out to be very important to building a @emph{distributed} version
control system like monotone.

It does have one unfortunate consequence, though.  It means that in the
rare occasion where one @emph{needs} to change a historical revision, it
will change the @sc{sha1} of that revision, which will change the text
of its children, which will change their @sc{sha1}s, and so on;
basically the entire history graph will diverge from that point
(invalidating all certs in the process).

In practice there are two situations where this might be necessary:
@itemize
@item
bugs: monotone has occasionally allowed nonsense, uninterpretable
changesets to be generated and stored in the database, and this was not
detected until further work had been based off of them.
@item
advances in crypto: if or when @sc{sha1} is broken, we will need to
migrate to a different secure hash.
@end itemize
Obviously, we hope neither of these things will happen, and we've taken
lots of precautions against the first recurring; but it is better to be
prepared.

If either of these events occur, we will provide migration commands
and explain how to use them for the situation in question; this much
is necessarily somewhat unpredictable.  In the past we've used the
@code{db rebuild} command, which extracts the ancestry graph from the
database and then recreates revisions from the manifests only --- this
preserves the contents of each snapshot, but breaks tracking of file
identity across renames --- and then reissues all existing certs that
you trust, signed with your key.@footnote{Regardless of who originally
signed the certs, after the rebuild they will be signed by you.  This
means you should be somewhat careful when rebuilding, but it is
unavoidable --- if you could sign with other people's keys, that would
be a rather serious security problem!}

While the @code{db rebuild} command can reconstruct the ancestry graph
in @emph{your} database, there are practical problems which arise when
working in a distributed work group.  For example, suppose our group
consists of the fictional developers Jim and Beth, and they need to
rebuild their ancestry graph. Jim performs a rebuild, and sends Beth
an email telling her that he has done so, but the email gets caught by
Beth's spam filter, she doesn't see it, and she blithely syncs her
database with Jim's. This creates a problem: Jim and Beth have
combined the pre-rebuild and post-rebuild databases.  Their databases
now contain two complete, parallel (but possibly overlapping) copies
of their project's ancestry.  The ``bad'' old revisions that they were
trying to get rid of are still there, mixed up with the ``good'' new
revisions.

To prevent such messy situations, monotone keeps a table of branch
@dfn{epochs} in each database. An epoch is just a large bit string
associated with a branch. Initially each branch's epoch is zero. Most
monotone commands ignore epochs; they are relevant in only two
circumstances:

@itemize

@item 
When monotone rebuilds ancestry, it generates a new @emph{random}
epoch for each branch in the database.

@item 
When monotone runs netsync between databases, it checks to make sure
that all branches involved in the synchronization have the same
epochs. If any epochs differ, the netsync is aborted with no changes
made to either database. If either side is seeing a branch for the
first time, it adopts the epoch of the other side.

@end itemize

Thus, when a user rebuilds their ancestry graph, they select a new
epoch and thus effectively disassociate with the group of colleagues
they had previously been communicating with. Other members of that
group can then decide whether to follow the rebuild user into a new
group --- by pulling the newly rebuilt ancestry --- or to remain
behind in the old group.

In our example, if Jim and Beth have epochs, Jim's rebuild creates a
new epoch for their branch, in his database.  This causes monotone to
reject netsync operations between Jim and Beth; it doesn't matter if
Beth loses Jim's email. When she tries to synchronize with him, she
receives an error message indicating that the epoch does not
match. She must then discuss the matter with Jim and settle on a new
course of action --- probably pulling Jim's database into a fresh
database on Beth's end -- before future synchronizations will succeed.

@heading Best practices

The previous section described the theory and rationale behind rebuilds
and epochs.  Here we discuss the practical consequences of that
discussion.

If you decide you must rebuild your ancestry graph --- generally by
announcement of a bug from the monotone developers --- the first thing
to do is get everyone to sync their changes with the central server;
if people have unshared changes when the database is rebuilt, they
will have trouble sharing them afterwards.

Next, the project should pick a designated person to take down the
netsync server, rebuild their database, and put the server back up
with the rebuilt ancestry in it.  Everybody else should then pull this
history into a fresh database, check out again from this database, and
continue working as normal.

In complicated situations, where people have private branches, or
ancestries cross organizational boundaries, matters are more complex.
The basic approach is to do a local rebuild, then after carefully
examining the new revision IDs to convince yourself that the rebuilt
graph is the same as the upstream subgraph, use the special @code{db
epoch} commands to force your local epochs to match the upstream ones.
(You may also want to do some fiddling with certs, to avoid getting
duplicate copies of all of them; if this situation ever arises in real
life we'll figure out how exactly that should work.)  Be very careful
when doing this; you're explicitly telling monotone to let you shoot
yourself in the foot, and it will let you.

Fortunately, this process should be extremely rare; with luck, it will
never happen at all.  But this way we're prepared.

@node    Man Page
@chapter Man Page
@c DEBUG: print_menu("Top")

@ifnottex
@menu
* NAME::
* SYNOPSIS::
* DESCRIPTION::
* OPTIONS::
* ENVIRONMENT::
* FILES::
* NOTES::
* SEE ALSO::
* BUGS::
* AUTHOR::

@end menu
@end ifnottex


@comment TROFF INPUT: .SH NAME

@node NAME

@section NAME
@c DEBUG: print_menu("NAME")

monotone @minus{} distributed version control system
@comment TROFF INPUT: .SH SYNOPSIS

@node SYNOPSIS

@section SYNOPSIS
@c DEBUG: print_menu("SYNOPSIS")

@ifnottex
@menu
* Note::
* Commands::

@end menu
@end ifnottex


@b{monotone} @i{[options] <command> [parameters]}
@comment TROFF INPUT: .P
@comment .P

Options, which affect global behavior or set default values, come
first in the argument list. A single command must follow, indicating
the operation to perform, followed by parameters which vary depending
on the command.
@comment TROFF INPUT: .SS Note

@node Note

@subsection Note

This man page is a summary of some of the features and commands of
@b{monotone}, but it is not the most detailed source of information
available. For a complete discussion of the concepts and a tutorial on
its use, please refer to the texinfo manual (via the @b{info
monotone} command, or online).
@comment TROFF INPUT: .SS Commands

@node Commands

@subsection Commands

@comment TROFF INPUT: .TP

@c ---------------------------------------------------------------------
@table @code
@item @b{comment} @i{<id>}
Write a comment cert for a revision.
@comment TROFF INPUT: .TP

@item @b{approve} @i{<id>}
Make a ``branch'' cert approving of a revision's membership in a branch.
@comment TROFF INPUT: .TP

@item @b{disapprove} @i{<id>}
Disapprove of a revision, committing the inverse changes as as a
descendent of the disapproved revision.
@comment TROFF INPUT: .TP

@item @b{tag} @i{<id> <tagname>}
Put a symbolic tag cert on a revision.
@comment TROFF INPUT: .TP

@item @b{testresult} @i{<id> (0|1|true|false|yes|no|pass|fail)}
Indicate a passing or failing test result on a revision.
@comment TROFF INPUT: .TP

@item @b{diff} @i{[--revision=<id1> [--revision=<id2>] ] [<pathname>...]}
Show diffs between workspace and database.
@comment TROFF INPUT: .TP

@item @b{status} @i{[<pathname>...]}
Show status of workspace.
@comment TROFF INPUT: .TP

@item @b{log} @i{[id]}
Show historical log of revisions, starting from workspace
base revision, or @i{[id]} if given.
@comment TROFF INPUT: .TP

@item @b{cert} @i{<id> <certname> [certval]}
Create a custom cert for a revision. Reads cert value
from stdin if no value given on command line.
@comment TROFF INPUT: .TP

@item @b{genkey} @i{<keyid>}
Generate an @sc{rsa} key-pair and store it in the database.
@comment TROFF INPUT: .TP

@item @b{dropkey} @i{<keyid>}
Drop a public and/or private key.
@comment TROFF INPUT: .TP

@item @b{chkeypass} @i{<keyid>}
Change passphrase of the private half of a key.
@comment TROFF INPUT: .TP

@item @b{list certs} @i{<id>}
@itemx @b{ls certs} @i{ <id>}
List certs associated with revision.
@comment TROFF INPUT: .TP

@item @b{list keys} @i{[partial-id]}
@itemx @b{ls keys} @i{[partial-id]}
List keys matching glob, or list all keys if no glob given.
@comment TROFF INPUT: .TP

@item @b{list branches}
@itemx @b{ls branches}
List all branches.
@comment TROFF INPUT: .TP

@item @b{list tags}
@itemx @b{ls tags}
List all tags.
@comment TROFF INPUT: .TP

@item @b{list known} @i{[<pathname>...]}
@itemx @b{ls known} @i{[<pathname>...]}
List files which are in revision's manifest, or are on the work list of
the workspace.
@comment TROFF INPUT: .TP

@item @b{list unknown} @i{[<pathname>...]}
@itemx @b{ls unknown} @i{[<pathname>...]}
List files in workspace, but not in revision's manifest or
work list.
@comment TROFF INPUT: .TP

@item @b{list ignored} @i{[<pathname>...]}
@itemx @b{ls ignored} @i{[<pathname>...]}
List files intentionally ignored due to the ignore_file hook.
@comment TROFF INPUT: .TP

@item @b{list missing} @i{[<pathname>...]}
@itemx @b{ls missing} @i{[<pathname>...]}
List files in revision's manifest, but not in workspace.
@comment TROFF INPUT: .TP

@item @b{list changed} @i{[<pathname>...]}
@itemx @b{ls changed} @i{[<pathname>...]}
List files in workspace that have changed compared to the base
revision.
@comment TROFF INPUT: .TP

@item @b{fdata} @i{<id>}
Write file data packet to stdout.
@comment TROFF INPUT: .TP

@item @b{fdelta} @i{<oldid> <newid>}
Write file delta packet to stdout.
@comment TROFF INPUT: .TP
 
@item @b{mdata} @i{<id>}
Write manifest data packet to stdout.
@comment TROFF INPUT: .TP

@item @b{mdelta} @i{<oldid> <newid>}
Write manifest delta packet to stdout.
@comment TROFF INPUT: .TP

@item @b{rcerts} @i{<id>}
Write revision cert packets to stdout.
@comment TROFF INPUT: .TP

@item @b{rdata} @i{<id>}
Write revision data packet to stdout.
@comment TROFF INPUT: .TP

@item @b{privkey} @i{<id>}
Write private key packet to stdout.
@comment TROFF INPUT: .TP

@item @b{pubkey} @i{<id>}
Write public key packet to stdout.
@comment TROFF INPUT: .TP

@item @b{read} @i{[<file1> [<file2> [...]]]}
Read packets from files or stdin.
@comment TROFF INPUT: .TP

@item @b{cvs_import} @i{<cvsroot>/<module>}
Import all versions in a CVS module. Reconstructs revisions and converts
metadata to certificates. A private signing key must already exist in
the database.
@comment TROFF INPUT: .TP

@item @b{rcs_import} @i{<rcsfile> ...}
Import all file versions in RCS files. Does not reconstruct revisions
across the entire tree.  You do not want this command, it is for
debugging; use cvs_import.
@comment TROFF INPUT: .TP

@item @b{cvs_pull} @i{[--since=time]} @i{[repository module [cvsbranch]]}
Import revisions from a CVS server (check out or update)

@item @b{cvs_push} @i{[repository module [cvsbranch]]}
Commit revisions to a CVS server

@item @b{cvs_takeover} @i{[module]}
Put a CVS working directory under monotone's control.

@item @b{checkout} @i{[--revision=revision-id]} @i{[<directory>]}
@itemx @b{co} @i{[--revision=revision-id]} @i{[<directory>]}
Check out revision from database, into directory.
@comment TROFF INPUT: .TP

@item @b{cat} @i{(file <id>|manifest [<id>]|revision [<id>])}
Write file, manifest or revision from database to stdout.
@comment TROFF INPUT: .TP

@item @b{heads}
Show unmerged heads of branch, or report when branch is merged.
@comment TROFF INPUT: .TP

@item @b{merge}
Merge unmerged heads of branch.
@comment TROFF INPUT: .TP

@item @b{add} @i{[--unknown] [<pathname>...]}
Add files to workspace. adding a file does not copy it into the
database, merely adds it to the work list. You must @b{commit} your
changes in order to copy added files to the database.  The missing 
flag causes those files that @command{monotone ls unknown} would
display to be added to the project.
@comment TROFF INPUT: .TP

@item @b{drop} @i{[--missing] [--execute] [<pathname>...]}
Drop files from workspace. Files are not deleted from workspace,
merely noted as removals in the work list, unless the @option{--execute}
flag is given.  If the @option{--missing} flag is given any files that
monotone is tracking but which are not present in the workspace
(ie. the output that @command{monotone ls missing} would give) are
dropped.
@comment TROFF INPUT: .TP

@item @b{rename} @i{<src> <dst>}
Rename files from @i{<src>} to @i{<dst>} in workspace.
@comment TROFF INPUT: .TP

@item @b{commit} @i{[--message=log message | --message-file=log message file] [<pathname>...]}
Commit workspace to database.  Each commit has a changelog message
associated with it.  If @option{--message} is provided on the command
line, it is used; if @option{--message-file} is provided, the content of
the named file will be used as a commit message.  If the filename is '-'
the commit message will be read from standard input.  Otherwise a log
message editor will be invoked.  If the file @file{MT/log} exists and is
non-empty, its content is used to prefill the editor.  You cannot
specify both @option{--message} and @option{--message-file} at the same
time, and if @file{MT/log} exists and is non-empty, you can cannot
specify either of them at all.
@comment TROFF INPUT: .TP

@item @b{update} @i{[--revision=revision]}
Update workspace.
@comment TROFF INPUT: .SH DESCRIPTION

@item @b{refresh_inodeprints}
Turn on inodeprints mode, and force a cache refresh.

@item @b{push} @i{<host> <glob>}
Push contents of branches matching @i{<glob>} to database on @i{<host>}
@comment TROFF INPUT: .SH DESCRIPTION

@item @b{pull} @i{<host> <glob>}
Pull contents of branches matching @i{<glob>} from database on @i{<host>}
@comment TROFF INPUT: .SH DESCRIPTION

@item @b{sync} @i{<host> <glob>}
Sync contents of branches matching @i{<glob>} with database on @i{<host>}
@comment TROFF INPUT: .SH DESCRIPTION

@item @b{serve} @i{<host> <glob>}
Serve contents of branches matching @i{<glob>} at network address @i{<host>}
@comment TROFF INPUT: .SH DESCRIPTION

@item @b{automate} @i{(interface_version|heads|ancestors|attributes|parents|descendents|children|graph|erase_ancestors|toposort|ancestry_difference|leaves|inventory|stdio|certs|select)}
Scripting interface.

@item @b{db} @i{(init|info|version|dump|load|migrate|execute <sql>)}
Manipulate database state.
@comment TROFF INPUT: .SH DESCRIPTION

@end table

@c ---------------------------------------------------------------------

@node DESCRIPTION

@section DESCRIPTION
@c DEBUG: print_menu("DESCRIPTION")

Monotone is a version control system, which allows you to keep old
versions of files, as well as special @i{revisions} and @i{manifests}
which describe the edit history, location, and content of files in a
tree. Unlike other systems, versions in monotone are @i{identified} by
cryptographic hash, and operations are authenticated by individual
users' evaluating cryptographic signatures on meta-data, rather than
any central authority.

Monotone keeps a collection of versions in a single-file relational
database. It is essentially serverless, using network servers only as
untrusted communication facilities. A monotone database is a regular
file, which contains all the information needed to extract previous
versions of files, verify signatures, merge and modify versions, and
communicate with network servers.
@comment TROFF INPUT: .SH OPTIONS

@node OPTIONS

@section OPTIONS
@c DEBUG: print_menu("OPTIONS")

@comment TROFF INPUT: .TP

@c ---------------------------------------------------------------------
@table @code
@item @b{--help}
Print help message.
@comment TROFF INPUT: .TP

@item @b{--debug}
Turn on debugging log on standard error stream. This is very
verbose. Default is to be silent, unless an error occurs, in which
case failure log is dumped.
@comment TROFF INPUT: .TP

@item @b{--quiet}
Turn off normal progress messages.
@comment TROFF INPUT: .TP

@item @b{--dump=}@i{<file>}
Dump debugging log to @i{<file>} on failure.
@comment TROFF INPUT: .TP

@item @b{--log=}@i{<file>}
Redirect the log lines to to @i{<file>}.
@comment TROFF INPUT: .TP

@item @b{--nostd}
Do not evaluate "standard" Lua hooks compiled into @b{monotone}.
@comment TROFF INPUT: .TP

@item @b{--norc}
Do not load Lua hooks from user's @b{~/.monotone/monotonerc} or the
workspace's @b{MT/monotonerc} file.
@comment TROFF INPUT: .TP

@item @b{--rcfile=}@i{<file>}
Load extra Lua hooks from @i{file} (may be given multiple times).
@comment TROFF INPUT: .TP

@item @b{--db=}@i{<file>}
Use database in @i{file}.
@comment TROFF INPUT: .TP

@item @b{--key=}@i{<keyid>}
@itemx @b{-k} @i{<keyid>}
Use @i{keyid} for operations which produce @sc{rsa}
signatures. Default is inferred from presence of unique private key in
database. Can also be customized on a per-branch basis with hook
function @b{get@t{_}branch@t{_}key(branchname)}.
@comment TROFF INPUT: .TP

@item @b{--branch=}@i{<branchname>}
@itemx @b{-b} @i{<branchname>}
Use @i{branchname} for operations on a branch. Default is inferred
in operations on existing branches (commit, update, etc). 
@comment TROFF INPUT: .TP

@item @b{--ticker=}[@b{dot}|@b{count}|@b{none}]
Use the given method to print tickers.  The @b{count} method prints
the count for each ticker on one line, incrementing the numbers in
place, while the @b{dot} method prints a continuous string of
characters (like some programs provide a progress line of dots).
@b{none} prints nothing.  The default is @b{count}.

@item @b{--revision=}@i{<id>}
@itemx @b{-r} @i{<id>}
Use the given revision with the current command. The revision id could be specified as a selector. @ref{Selectors}.

@item @b{--message-file=}@i{<log message file>}
Use the content of the given file as the changelog when committing a new
revision rather than invoking the log message editor.  If the filename
is '-' the changelog is read from standard input.  Currently this option
only applies to the commit command, but it may also apply to the comment
command in the future.

@item @b{--message=}@i{<log message>}
@itemx @b{-m} @i{<log message>}
Use the given message as the changelog when committing a new revision
rather than invoking the log message editor. Currently this option only
applies to the commit command but it may also apply to the comment
command in the future.

@item @b{--author=}@i{<author email>}
Use the given author as the value of the @code{author} cert when committing
a new revision, rather than the default author.  Useful when
committing a patch on behalf of someone else, or when importing
history from another version control system.

@item @b{--date=}@i{<date and time>}
Use the given given date and time as value of the @code{date} cert when
committing a new revision, rather than the current time.  Useful when
importing history from another version control system.

@item @b{--root=}@i{<root dir>}
Stop the search for a workspace (containing the @file{MT} directory)
at the specified root directory rather than at the physical root of the
filesystem.

@item @b{--xargs=}@i{<file>}
Inject the contents of the file in place among the command line
arguments.  This may be useful in case the command line would otherwise
become too long for your system.  This option can be used more than once
if needed.

@item @b{-@@} @i{<file>}
An alias for @b{--xargs=}@i{<file>}.

@comment TROFF INPUT: .SH ENVIRONMENT

@end table

@c ---------------------------------------------------------------------

@node ENVIRONMENT

@section ENVIRONMENT
@c DEBUG: print_menu("ENVIRONMENT")

@comment TROFF INPUT: .TP

@c ---------------------------------------------------------------------
@table @code

@item @b{EDITOR}
Used to edit comments, log messages, etc.
@comment TROFF INPUT: .TP

@item @b{VISUAL}
Used in preference to @b{EDITOR}, if set.
@comment TROFF INPUT: .SH FILES

@end table

@c ---------------------------------------------------------------------

@node FILES

@section FILES
@c DEBUG: print_menu("FILES")

@comment TROFF INPUT: .TP

@c ---------------------------------------------------------------------
@table @code
@item @b{$HOME/.monotone/monotonerc}
A Lua script, used as a customization file.
@comment TROFF INPUT: .SH NOTES

@end table

@c ---------------------------------------------------------------------

@node NOTES

@section NOTES
@c DEBUG: print_menu("NOTES")

@comment TROFF INPUT: .IP \(bu

Command line options override environment variables and
settings in Lua scripts (such as @b{monotonerc})

@comment TROFF INPUT: .SH "SEE ALSO"

@node SEE ALSO

@section SEE ALSO
@c DEBUG: print_menu("SEE ALSO")

@b{info monotone}
@comment TROFF INPUT: .SH BUGS

@node BUGS

@section BUGS
@c DEBUG: print_menu("BUGS")

see http://savannah.nongnu.org/bugs/?group=monotone
@comment TROFF INPUT: .SH AUTHOR

@node AUTHOR

@section AUTHOR
@c DEBUG: print_menu("AUTHOR")

graydon hoare <graydon@@pobox.com>

@node Default hooks
@appendix Default hooks

This section contains the entire source code of the standard hook file,
that is built in to the monotone executable, and read before any user
hooks files (unless @option{--nostd} is passed).  It contains the
default values for all hooks.

@verbatiminclude std_hooks.lua

@node Index
@unnumbered Index
     
@printindex cp

@bye
