#!/usr/bin/perl
##############################################################################
#
#   File Name    - linux-installer
#
#   Description  - Perl Linux installer for mtn-browse
#
#   Author       - A.E.Cooper.
#
#   Legal Stuff  - Copyright (c) 2008 Anthony Edward Cooper
#                  <aecooper@coosoft.plus.com>.
#
#                  This program is free software; you can redistribute it
#                  and/or modify it under the terms of the GNU General Public
#                  License as published by the Free Software Foundation;
#                  either version 3 of the License, or (at your option) any
#                  later version.
#
#                  This program is distributed in the hope that it will be
#                  useful, but WITHOUT ANY WARRANTY; without even the implied
#                  warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
#                  PURPOSE. See the GNU General Public License for more
#                  details.
#
#                  You should have received a copy of the GNU General Public
#                  License along with this software; if not, write to the Free
#                  Software Foundation, Inc., 59 Temple Place - Suite 330,
#                  Boston, MA 02111-1307 USA.
#
##############################################################################
#
##############################################################################
#
#   Global Data For This Module
#
##############################################################################



# ***** DIRECTIVES *****

require 5.008005;

use lib "installer-files";
use strict;
use warnings;

# ***** REQUIRED PACKAGES *****

# Standard Perl and CPAN modules.

use Getopt::Long;
use IO::Dir;
use IO::File;
use Pod::Usage;

# Modules specific to this application.

use DependencyChecker;
use Installer;
#
##############################################################################
#
#   Routine      - Main Body Of Code
#
#   Description  - This is the main body of code for the install script.
#
#   Data         - @_           : The command line arguments.
#                  Return Value : Unix exit code.
#
##############################################################################



{

    my($confirm,
       $dep_level,
       $dest_dir,
       $dir,
       $file,
       $globs_file,
       $help,
       $infile,
       $input,
       $installer,
       $interactive,
       $lib_dest_dir,
       $lib_dir,
       $lib_prefix_dir,
       $locale,
       $man,
       $mas_path,
       $outfile,
       $parser,
       $prefix_dir,
       $prefix_dest_dir,
       $quiet,
       $use_dists_mas_lib);

    # Assign defaults.

    $dep_level = 2;
    $dest_dir = "";
    $globs_file = "/usr/share/mime/globs";
    $prefix_dir = "/usr";
    $lib_dir = "/lib/mtn-browse";
    $use_dists_mas_lib = 1;

    # Process any command line options.

    $parser = Getopt::Long::Parser->new();
    $parser->configure("bundling");
    if (! $parser->getoptions("confirm|c"       => \$confirm,
			      "dep-level=i"     => \$dep_level,
			      "destdir|d=s"     => \$dest_dir,
			      "globs-file|g=s"  => \$globs_file,
			      "interactive|i"   => \$interactive,
			      "libdir|l=s"      => \$lib_dir,
			      "prefix|p=s"      => \$prefix_dir,
			      "quiet|q"         => \$quiet,
			      "use-dists-mas!"  => \$use_dists_mas_lib,
			      "help|?"          => \$help,
			      "man|m"           => \$man))
    {
	pod2usage(1);
    }
    pod2usage(0) if ($help);
    pod2usage(-exitstatus => 0, -verbose => 2) if ($man);

    # Do dependency checks if required.

    if ($dep_level > 0)
    {

	my(%deps,
	   $err_msg,
	   $met);

	# Build up the dependency list.

	%deps = ("Glib"               => 1.144,
		 "Gnome2"             => 1.042,
		 "Gnome2::Canvas"     => 1.002,
		 "Gnome2::Print"      => 1.000,
		 "Gnome2::VFS"        => 1.080,
		 "Gtk2"               => 1.146,
		 "Gtk2::GladeXML"     => 1.006,
		 "Gtk2::SourceView"   => 1.000,
		 "Locale::TextDomain" => 1.16);
	$deps{"Monotone::AutomateStdio"} = 0.02 if (! $use_dists_mas_lib);

	# Do the check.

	$met = DependencyChecker::check(\%deps, \$err_msg);

	# Deal with the result depending upon what the user wants.

	if (! $met)
	{
	    printf(STDERR "%s: %s\n",
		   ($dep_level == 2) ? "Error" : "Warning",
		   $err_msg);
	    exit(1) if ($dep_level < 3);
	}
	exit(0) if ($dep_level == 1);

    }

    # Do interactive stuff and validate options.

    print("Linux installer for mtn-browse\n\n") if ($interactive);
    while (1)
    {
	if ($interactive)
	{
	    print("Where is your MIME globs file? [" . $globs_file . "]: ");
	    chomp($input = <STDIN>);
	    ($input) = ($input =~ m/^\s*(.*)\s*$/);
	    $globs_file = $input if ($input ne "");
	}
	if (! -f $globs_file)
	{
	    print("Error: File `" . $globs_file . "' is unreadable.\n");
	    exit(1) if (! $interactive);
	    next;
	}

	if ($interactive)
	{
	    print("Where will it be run from (PREFIX_DIR)? [" . $prefix_dir
		  . "]: ");
	    chomp($input = <STDIN>);
	    ($input) = ($input =~ m/^\s*(.*)\s*$/);
	    $prefix_dir = $input if ($input ne "");
	}
	if (-e $prefix_dir && ! -d $prefix_dir)
	{
	    print("Error: Directory `" . $prefix_dir . "' is not a "
		  . "directory.\n");
	    exit(1) if (! $interactive);
	    next;
	}

	if ($interactive)
	{
	    print("Where do you want to copy it to (DEST_DIR)? [" . $dest_dir
		  . "]: ");
	    chomp($input = <STDIN>);
	    ($input) = ($input =~ m/^\s*(.*)\s*$/);
	    $dest_dir = $input if ($input ne "");
	}
	$prefix_dest_dir = $dest_dir . $prefix_dir;
	if (-e $prefix_dest_dir
	    && (! -d $prefix_dest_dir || ! -w $prefix_dest_dir))
	{
	    print("Error: Directory `" . $prefix_dest_dir . "' is unwritable "
		  . "or not a directory.\n");
	    exit(1) if (! $interactive);
	    next;
	}

	if ($interactive)
	{
	    print("Where should the libraries go (LIB_DIR)? [<PREFIX_DIR>"
		  . $lib_dir . "]: ");
	    chomp($input = <STDIN>);
	    ($input) = ($input =~ m/^\s*(.*)\s*$/);
	    $lib_dir = $input if ($input ne "");
	}
	$lib_prefix_dir = $prefix_dir . "/" . $lib_dir;
	$lib_prefix_dir =~ s/\/\//\//g;
	$lib_dest_dir = $dest_dir . $prefix_dir. "/" . $lib_dir;
	$lib_dest_dir =~ s/\/\//\//g;
	if (-e $lib_dest_dir && (! -d $lib_dest_dir || ! -w $lib_dest_dir))
	{
	    print("Error: Directory `" . $lib_dest_dir . "' is unwritable or "
		  . "not a directory.\n");
	    exit(1) if (! $interactive);
	    next;
	}

	if ($interactive)
	{
	    print("Use the Monotone::AutomateStdio (MAS) library that came "
		  . "with this package? [Y]: ");
	    chomp($input = <STDIN>);
	    if ($input =~ m/^\s*[nN]\s*$/)
	    {
		$use_dists_mas_lib = 0;
	    }
	    else
	    {
		$use_dists_mas_lib = 1;
	    }
	}

	if ($confirm || $interactive || ! $quiet)
	{
	    print("\nInstallation options are:\n");
	    print("GLOBS_FILE = " . $globs_file . "\n");
	    print("PREFIX_DIR = " . $prefix_dir . "\n");
	    print("DEST_DIR   = " . $dest_dir . "\n");
	    print("LIB_DIR    = <PREFIX_DIR>/" . $lib_dir . "\n");
	    print("Use my MAS = " . ($use_dists_mas_lib ? "Yes" : "No")
		  . "\n");
	}
	if ($interactive)
	{
	    print("\nAccept these? [N]: ");
	    chomp($input = <STDIN>);
	    if ($input =~ m/^\s*[yY]\s*$/)
	    {
		last;
	    }
	}
	elsif ($confirm)
	{
	    print("\nPress <Return> to continue: ");
	    <STDIN>;
	    last;
	}
	else
	{
	    last;
	}
    }

    print("Installing...\n") if (! $quiet);
    $installer = Installer->new(0, 0, 0755, 0755, 0644);

    # Install `executable'.

    die("IO::File failed with $!")
	if (! defined($infile = IO::File->new("mtn-browse", "r")));
    die("IO::File failed with $!")
	if (! defined($outfile = IO::File->new("mtn-browse.out", "w")));
    while (defined($input = $infile->getline()))
    {
	$input =~ s/\@INST:LIB_DIR\@/$lib_prefix_dir/g;
	$input =~ s/\@INST:GLOBS_FILE\@/$globs_file/g;
	$input =~ s/\@INST:PREFIX_DIR\@/$prefix_dir/g;
	$outfile->print($input);
    }
    $infile->close();
    $outfile->close();
    $infile = $outfile = undef;
    $installer->install("mtn-browse.out",
			"${prefix_dest_dir}/bin/mtn-browse",
			0755);
    unlink("mtn-browse.out");

    # Install modules and libraries.

    die("IO::Dir failed with $!")
	if (! defined($dir = IO::Dir->new("lib/perl")));
    while (defined($file = $dir->read()))
    {
	$installer->install("lib/perl/$file",  "${lib_dest_dir}/perl/$file")
	    if ($file =~ m/.*\.pm$/);
    }
    $dir->close();
    if ($use_dists_mas_lib)
    {
	my $mas_dir;
	if (-r "lib/perl/Monotone/AutomateStdio.pm")
	{
	    $mas_dir = "lib/perl/Monotone";
	}
	elsif (-r "../automate-stdio/lib/Monotone/AutomateStdio.pm")
	{
	    $mas_dir = "../automate-stdio/lib/Monotone";
	}
	else
	{
	    die("Been asked to use my MAS library but cannot find it.");
	}
	die("IO::Dir failed with $!")
	    if (! defined($dir = IO::Dir->new($mas_dir)));
	while (defined($file = $dir->read()))
	{
	    $installer->install("${mas_dir}/$file",
				"${lib_dest_dir}/perl/Monotone/$file")
		if ($file =~ m/.*\.pm$/ || $file =~ m/.*\.pod$/);
	}
	$dir->close();
    }

    # Install GUI components.

    $installer->install("lib/ui/mtn-browse.glade",
			"${lib_dest_dir}/ui/mtn-browse.glade");
    die("IO::Dir failed with $!")
	if (! defined($dir = IO::Dir->new("lib/ui/pixmaps")));
    while (defined($file = $dir->read()))
    {
	$installer->install("lib/ui/pixmaps/$file", "${lib_dest_dir}/ui/$file")
	    if ($file =~ m/.*\.png$/);
    }
    $dir->close();

    # Install translation files.

    die("IO::Dir failed with $!")
	if (! defined($dir = IO::Dir->new("locale")));
    while (defined($file = $dir->read()))
    {
	if ($file =~ m/(.*)\.po$/)
	{
	    my $locale = $1;
	    system("msgfmt --output-file=locale/${locale}.mo locale/$file");
	    $installer->install("locale/${locale}.mo",
				"${prefix_dest_dir}/share/locale/${locale}/"
				    . "LC_MESSAGES/mtn-browse.mo");
	}
    }
    $dir->close();

    # Install help files.

    die("IO::Dir failed with $!")
	if (! defined($dir = IO::Dir->new("locale/help")));
    while (defined($locale = $dir->read()))
    {
	next if ($locale eq "." || $locale eq "..");
	my($figures_dir,
	   $img_file);
	$installer->install("locale/help/${locale}/mtn-browse.xml",
			    "${prefix_dest_dir}/share/gnome/help/mtn-browse/"
			        . "${locale}/mtn-browse.xml");
	die("IO::Dir failed with $!")
	    if (! defined($figures_dir =
			  IO::Dir->new("locale/help/${locale}/figures")));
	while (defined($img_file = $figures_dir->read()))
	{
	    next if ($img_file eq "." || $img_file eq "..");
	    $installer->install("locale/help/${locale}/figures/$img_file",
				"${prefix_dest_dir}/share/gnome/help/"
				    . "mtn-browse/${locale}/figures/"
				    . "$img_file");
	}
    }
    $dir->close();

    exit(0);

}
#
##############################################################################
#
#   Embedded Documentation For This Module
#
##############################################################################



__END__

=head1 linux-installer

linux-installer - Linux installer for the mtn-browse application

=head1 SYNOPSIS

linux-installer [options]

  Options:
    --confirm            -c           Print out what will happen first
    --dep-level=             LEVEL    Specify type of dependency checking
    --destdir=           -d  DIR      Specify temp installation location
    --globs-file=        -g  FILE     Location of MIME globs file
    --interactive        -i           Ask questions interactively
    --libdir=            -l  DIR      Library dir relative to PREFIX_DIR
    --prefix=            -p  DIR      Installation location
    --quiet              -q           Keep quiet
    --(no)-use-dists-mas              Use/don't use MAS within distro
    --help               -?           Print this help text
    --man                -m           Print full help text

=head1 OPTIONS

=over 8

=item B<--confirm or -c>

Print out what will be done before actually doing it.

=item B<--dep-level=LEVEL>

Specify type of dependency checking. Valid values are:

    0 - No dependency checking at all.
    1 - Do dependency checking only.
    2 - Do dependency checking and exit with an error code if
        they are not met. This is the default.
    3 - Do dependency checking and continue with the installation
        regardless.

=item B<--destdir=DIR or -d DIR>

Specify the destination directory for the installation process. In effect this
path is prepended onto the PREFIX_DIR path. Normally this is blank. Any
directory paths in the application will still assume that it is installed in
the PREFIX_DIR directory. This option is particularly useful for package
maintainers.

=item B<--globs-file=FILE or -g FILE>

Specify the location of the system's MIME globs file. The default is
/usr/share/mime/globs.

=item B<--interactive or -i>

Ask for all of the installation options interactively rather than getting
settings from the command line.

=item B<--libdir=DIR or -l DIR>

Specify the library directory, relative to <PREFIX_DIR>, for the the mtn-browse
application. The default is (<PREFIX_DIR>)/lib/mtn-browse.

=item B<--prefix=DIR or -p DIR>

Specify the final base installation directory. mtn-browse will assume it is
running from the <PREFIX_DIR>/bin directory and its libraries are located in
<PREFIX_DIR>/<LIB_DIR>.

=item B<--quiet or -q>

Do not output anything to the screen.

=item B<--(no)-use-dists-mas>

Select whether to use the Monotone::AutomateStdio library that shipped with
mtn-browse or use one already installed on your system. The default is to use
the one that comes with mtn-browse.

=item B<-help>

Print a brief help message and exit.

=item B<-man or -m>

Prints the manual page and exit.

=back

=head1 DESCRIPTION

This program is the installer for the mtn-browse application. It is assumed
that this script will be run in the top level directory of the hierarchy made
by unpacking the tar file that mtn-browse was shipped in.

=cut
