.TH "monotone" 1
.SH NAME
monotone \- distributed version control system
.SH SYNOPSIS
\fBmonotone\fP \fI[options] <command> [parameters]\fP
.P
Options, which affect global behavior or set default values, come
first in the argument list. A single command must follow, indicating
the operation to perform, followed by parameters which vary depending
on the command.
.SS Note
This manpage is a summary of some of the features and commands of
\fBmonotone\fP, but it is not the most detailed source of information
available. For a complete discussion of the concepts and a tutorial on
its use, please refer to the texinfo manual (via the \fBinfo
monotone\fP command, or online).
.SS Commands
.TP 
\fBcomment\fP \fI<id>\fP
Write a comment cert for a revision.
.TP
\fBapprove\fP \fI<id>\fP
Make a "branch" cert approving of a revision's membership in a branch.
.TP
\fBdisapprove\fP \fI<id1>\fP
Disapprove of a revision, committing the inverse changes as as a
descendant of the disapproved revision.
.TP
\fBtag\fP \fI<id> <tagname>\fP
Put a symbolic tag cert on a revision.
.TP
\fBtestresult\fP \fI<id> (0|1|true|false|yes|no|pass|fail)\fP
Indicate a passing or failing test result on a revision.
.TP
\fBagraph\fP
Dump revision graph to stdout.
.TP
\fBdiff \fI[--revision=<id1> [--revision=<id2>] ] [<pathname>...]\fP
Show diffs between working copy and database.
.TP
\fBstatus \fI[<pathname>...]\fP
Show status of working copy.
.TP
\fBlog\fP \fI[id] \fP
Show historical log of revisions, starting from working copy
base revision, or \fI[id]\fP if given.
.TP
\fBcert\fP \fI<id> <certname> [certval]\fP
Create a custom cert for a revision. Reads cert value
from stdin if no value given on command line.
.TP
\fBgenkey\fP \fI<keyid>\fP
Generate an RSA key-pair and store it in the database.
.TP
\chkeypass\fP \fI<keyid>\fP
Change passphrase of the private half of a key.
.TP
\fBlist certs\fP \fI<id>\fP
List certs associated with revision.
.TP
\fBlist keys\fP \fI[partial-id]\fP
List keys matching glob, or list all keys if no glob given.
.TP
\fBlist branches\fP
List all branches.
.TP
\fBlist tags\fP
List all tags.
.TP
\fBlist unknown \fI[<pathname...]\fP
List files in working directory, but not in revision's manifest or
work list.
.TP
\fBlist ignored \fI[<pathname...]\fP
List files intentionally ignored due to the ignore_file hook.
.TP
\fBlist missing \fI[<pathname...]\fP
List files in revision's manifest, but not in working directory.
.TP
\fBfdata\fP \fI<id>\fP
Write file data packet to stdout.
.TP
\fBfdelta\fP \fI<oldid> <newid>\fP
Write file delta packet to stdout.
.TP
\fBmdata\fP \fI<id>\fP
Write manifest data packet to stdout.
.TP
\fBmdelta\fP \fI<oldid> <newid>\fP
Write manifest delta packet to stdout.
.TP
\fBcerts\fP \fI<id>\fP
Write revision cert packets to stdout.
.TP
\fBrdata\fP \fI<id>\fP
Write revision data packet to stdout.
.TP
\fBprivkey\fP \fI<id>\fP
Write private key packet to stdout.
.TP
\fBpubkey\fP \fI<id>\fP
Write public key packet to stdout.
.TP
\fBread\fP
Read packets from stdin. 
.TP
\fBcvs_import\fP \fI<cvsroot>\fP
Import all versions in CVS repository. Reconstructs revisions and
converts metadata to certificates. A private signing key must already
exist in the database.
.TP
\fBrcs_import\fP \fI<rcsfile> ...\fP
Import all file versions in RCS files. Does not reconstruct revisions
across the entire tree.
.TP
\fBcheckout\fP \fI[manifest-id]\fP \fI<directory\fP
Check out tree state from database.
.TP
\fBco\fP \fI[manifest-id]\fP \fI<directory\fP
Check out tree state from database; an alias for \fBcheckout\fP.
.TP
\fBcat\fP \fI(file|manifest) <id>\fP
Write file or manifest from database to stdout.
.TP
\fBheads\fP
Show unmerged heads of branch, or report when branch is merged.
.TP
\fBmerge\fP
Merge unmerged heads of branch.
.TP
\fBadd\fP \fI<pathname> [...]\fP
Add files to working copy. adding a file does not copy it into the database,
merely adds it to the work list. You must \fBcommit\fP your changes in order
to copy added files to the database.
.TP
\fBdrop\fP \fI<pathname> [...]\fP
Drop files from working copy. Files are not deleted from working copy, 
merely noted as removals in the work list.
.TP
\fBrename\fP \fI<src> \fI<dst>\fP
Rename files from \fI<src> \fP to \fI<dst> \fP in working copy.
.TP
\fBcommit\fP \fI[--message=<log message>] [<pathname>...]\fP 
Commit working copy to database. If a --message option is provided on
the command ine, it is used; otherwise a log message editor will be
invoked.
.TP
\fBupdate\fP 
Update working copy.
.TP
\fBpush\fP \fI<host> <collection>\fP 
Push contents of \fI<collection>\fP to database on \fI<host>\fP 
.TP
\fBpull\fP \fI<host> <collection>\fP 
Push contents of \fI<collection>\fP from database on \fI<host>\fP 
.TP
\fBsync\fP \fI<host> <collection>\fP 
Sync contents of \fI<collection>\fP with database on \fI<host>\fP 
.TP
\fBserve\fP \fI<host> <collection>\fP 
Serve contents of \fI<collection>\fP at network address \fI<host>\fP 
.TP
\fBautomate\fP \fI(interface_version|heads)\fP
Scripting interface.
.TP
\fBdb\fP \fI(init|info|version|dump|load|migrate|check)\fP
Manipulate database state.
.SH DESCRIPTION
Monotone is a version control system, which allows you to keep old
versions of files, as well as special \fImanifest files\fP which
describe the location of files in a tree. Unlike other systems,
versions in monotone are \fIidentified\fP by cryptographic hash, and
operations are authenticated by individual users' evaluating
cryptographic signatures on meta-data, rather than any central
authority.

Monotone keeps a collection of versions in a single-file relational
database. It is essentially serverless, using network servers only as
untrusted communication facilities. A monotone database is a regular
file, which contains all the information needed to extract previous
versions of files, verify signatures, merge and modify versions, and
communicate with network servers.
.SH OPTIONS
.TP
\fB--help\fP
Print help message.
.TP
\fB--debug\fP
Turn on debugging log on standard error stream. This is very
verbose. Default is to be silent, unless an error occurs, in which
case failure log is dumped.
.TP
\fB--quiet\fP
Turn off normal progress messages.
.TP
\fB--dump=\fP\fI<file>\fP
Dump debugging log to \fIfile\fP on failure.
.TP
\fB--nostd\fP
Do not evaluate "standard" lua hooks compiled into \fBmonotone\fP.
.TP
\fB--norc\fP
Do not load lua hooks from user's \fB~/.monotonerc\fP file.
.TP
\fB--rcfile=\fP\fI<file>\fP
Load extra lua hooks from \fIfile\fP (may be given multiple times).
.TP
\fB--db=\fP\fI<file>\fP
Use database in \fIfile\fP.
.TP
\fB--key=\fP\fI<keyid>\fP
Use \fIkeyid\fP for operations which produce RSA signatures. Default
is inferred from presence of unique private key in database. Can also
be customized on a per-branch basis with hook function 
\fBget_branch_key(branchname)\fP.
.TP
\fB--branch=\fP\fI<branchname>\fP
Use \fIbranchname\fP for operations on a branch. Default is inferred
in operations on existing branches (commit, update, etc).
.TP
\fB--ticket=\fP\fIdot|count\fP
Use the given method to print tickers.  The \fBcount\fP method prints
the count for each ticker on one line, incrementing the numbers in
place, while the \fBdot\fP method prints a continuous string of
characters (like some programs provide a progress line of dots).
The default is \fBcount\fP.
.TP
\fB--revision=<id>\fP
Currently this option only applies to the diff command where it may be
used to compare a working copy with a specific revision or to compare
two specific revisions. It will likely apply to other commands in the
future.
.TP
\fB--message=\fI<log message>\fP
Use the given message as the changelog when committing a new revision
rather than invoking the log message editor. Currently this option only
applies to the commit command but it may also apply to the comment
command in the future.
.TP
\fB--root=\fI<root dir>\fP
Stop the search for a working copy (containing the @file{MT} directory)
at the specified root directory rather than at the physical root of the
filesystem.

.SH ENVIRONMENT
.TP
\fBEDITOR\fP
Used to edit comments, log messages, etc.
.TP
\fBVISUAL\fP
Used in preference to \fBEDITOR\fP, if set.
.SH FILES
.TP
\fB$HOME/.monotonerc\fP
A lua script, used as a customization file.
.SH NOTES
.IP \(bu
Command line options override environment variables and
settings in lua scripts (such as \fB.monotonerc\fP)
.SH "SEE ALSO"
\fBinfo monotone\fP
.SH BUGS
see http://savannah.nongnu.org/bugs/?group=monotone
.SH AUTHOR
graydon hoare <graydon@pobox.com>
