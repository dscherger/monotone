This directory contains various things that we're not quite sure what
to do with, but that someone may find useful.

Unlike the rest of monotone, the code in this directory is _not_ tested,
and may not even work with the current version of monotone.

See individual files for licenses.

  -- monotone.bash_completion: command line completion code for bash.
  -- monotone.zsh_completion: command line completion code for zsh.

  -- monotone.el, monotone-nav.el: An Emacs interface.

  -- ciabot_monotone.py: A python script to watch a repository and
     send notifications of commits to CIA (http://cia.navi.cx).

  -- mtbrowse.sh: An interactive text-mode history browser

  -- monotone-notify.pl: a Perl hack to create email logs with recent
     changes in a repository database.  It's designed to be run at regular
     intervals, for example from a cron script.  It uses database
     variables (those handled with 'monotone set/unset') in the domain
     domain 'notify' to keep track of the last revisions that have
     already been sent out.
     For a manual, do `perl Notify.pl --man'.
     To get a help text, do `perl Notify.pl --help'.

  -- Monotone.pm: A Perl module to access a 'mtn automate stdio' subprocess.

  -- monoprof.sh: A simple monotone profiling script.

  -- Log2Gxl.java: Removed. Now in branch net.venge.monotone.contrib.monotree

  -- mtn_cheat_sheet.svg: A SVG image inspired by Mercurial's QuickStart Guides
     (http://people.type-z.org/seb/mercurial/v1.0/)

  -- ext_hooks.lua.in, ext_hooks_expand.pl: run ext_hooks_expand.pl and you
     will get ext_hooks.lua, a hooks system that allows loading several
     implementations of the same hooks from a bunch of .lua files stored in
     a directory pointed at by $MTN_LUAHOOKSDIR.  Hooks are commonly added
     using the function add_hook().  There is simple documentation at the
     top of ext_hooks.lua.in.

  -- monotone-mirror.sh: script to mirror another (remote) database and to
     perform actions after mirroring, all according to a specification file.
     monotone-mirror-postaction-update.sh: a post action script that updates
     directories after a database has been mirrored according to a
     specification file.
     Both files has comments in the beginning, explaining how the specification
     files should be written.

  -- monotone-run-script-post-netsync.lua: run a script after revs or certs
     for a particular branch have arrived via netsync

  -- mtn_makepermissions: creates read-permissions and write-permissions from
     files in the subdirectories read-permissions.d and write-permissions.d,
     Debian-style.

  -- monotone-cluster-push.lua: A simple script to push changes to other
     servers upon receiving them.  This will only work on a server instance.

  -- extra-commands.lua: Some simple lua user commands to automate common
     command sequences.  The lua code should be copied to a monotonerc file
     for use.

  -- monotone-mail-notify.lua: a mail notification script which offers an
     individual per-branch recipient configuration with a syntax similar
     to the one found in ~/.monotone/read-permissions.
     It writes out details of each revision received to files which are then
     picked up by the monotone-mail-notify.sh script which requires bash,
     source-highlight and mime-construct to build nicely structured emails
     with summaries of the revision and its diffs.

  -- ciabot_monotone_hookversion.lua / ciabot_monotone_hookversion.py:
     Two scripts that work together to send commit notifications to
     http://CIA.cv/.  The main configuration is done in the file
     ciabot.conf, found in the monotone configuration directory.
     Before including ciabot_monotone_hookversion.lua, you need to assign
     the path (as a string) to ciabot_monotone_hookversion.py to the
     variable ciabot_python_script.
     For further documentation on the configuration, see the comments
     in ciabot_monotone_hookversion.py.

  -- display_branches.lua: A simple Lua script that hooks into the netsync
     notifiers.  After a pull, it will display what branches are being
     filled with new revisions, and how many.  Easy to include from your
     monotonerc.

  -- dump-test-logs.sh: Dump the detailed logs for all tests with an
     unexpected outcome to stdout.  This is intended for use in super-
     automated build environments, e.g. the Debian build daemons, where
     the easiest way to recover detailed test logs for a failed build
     is to embed them in the overall 'make' output.  Run, with no
     arguments, from the top level of a monotone build tree.

  -- get_passphrase_from_file.lua: This creates a version of the function
     get_passphrase() that reads passphrases from a file in the monotone
     configuration directory called "passphrases".  This is useful for
     automated startup of servers.

