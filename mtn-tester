#!/usr/bin/perl -w

use lib "/home/aecoope/perl";

use strict;
use integer;
use Carp;
use File::Basename;
use POSIX qw(strftime);
use Storable;
use Data::Dumper;
use GDBM_File;
use IO::File;
use IO::Handle;
use Monotone::AutomateStdio qw(:capabilities :severities);
use Data::Dumper;

my($data,
   %hash,
   @list,
   $mtn);

Monotone::AutomateStdio->register_error_handler
    (MTN_SEVERITY_ALL,
     sub
     {
	 my($severity, $message) = @_;
	 printf(STDERR "PROBLEM (%s): %s\n", $severity, $message);
	 die() if ($severity eq "error");
     });
# Monotone::AutomateStdio::register_error_handler("both");

$mtn = Monotone::AutomateStdio->new("/home/aecoope/perl/test.mtn");
# $mtn = Monotone::AutomateStdio->new();
if (0)
{
    if (! $mtn->branches(\@list))
    {
	printf(STDERR "OOPS: %s\n", $mtn->get_error_message());
    }
    else
    {
	print Dumper(\@list);
    }
    if (! $mtn->certs(\@list, "ae65e53a3beca7841a87eb4525f39e3369107b82"))
    {
	printf(STDERR "OOPS: %s\n", $mtn->get_error_message());
    }
    else
    {
	print Dumper(\@list);
    }
    if (! $mtn->cert("ae65e53a3beca7841a87eb4525f39e3369107b82", "status",
		     "EXTERMINATE"))
    {
	printf(STDERR "OOPS: %s\n", $mtn->get_error_message());
    }
    if (! $mtn->children(\@list, "78bfd27c26a0c8ac249f30293e6ef6d5f44e6084"))
    {
	printf(STDERR "OOPS: %s\n", $mtn->get_error_message());
    }
    else
    {
	print Dumper(\@list);
	printf("Largest valid index = %d\n", $#list);
    }
    if (! $mtn->children(\@list, "ae65e53a3beca7841a87eb4525f39e3369107b82"))
    {
	printf(STDERR "OOPS: %s\n", $mtn->get_error_message());
    }
    else
    {
	print Dumper(\@list);
    }
    if (! $mtn->ancestry_difference(\@list,
				    "ed89ce366c3316f189f01229adc863b3285130e2",
				    "65e51cd2a00b4ee60b9fcc356e8e503d1e690414"))
    {
	printf(STDERR "OOPS: %s\n", $mtn->get_error_message());
    }
    else
    {
	print "DIFF\n";
	print Dumper(\@list);
    }
    if (! $mtn->common_ancestors(\@list,
				 "ae65e53a3beca7841a87eb4525f39e3369107b82",
				 "78bfd27c26a0c8ac249f30293e6ef6d5f44e6084",
				 "ff7e085fab7385fbaabc57c1f53a9bbea59bf132"))
    {
	printf(STDERR "OOPS: %s\n", $mtn->get_error_message());
    }
    else
    {
	print Dumper(\@list);
    }
    if (! $mtn->content_diff(\$data,
			     "ae65e53a3beca7841a87eb4525f39e3369107b82",
			     "d612b1ed732ea565085eede32bb2a1fae2ca8804"))
    {
	printf(STDERR "OOPS: %s\n", $mtn->get_error_message());
    }
    else
    {
	print Dumper(\$data);
    }
    if (! $mtn->content_diff(\$data,
			     "ae65e53a3beca7841a87eb4525f39e3369107b82",
			     "d612b1ed732ea565085eede32bb2a1fae2ca8804",
			     "Makefile"))
    {
	printf(STDERR "OOPS: %s\n", $mtn->get_error_message());
    }
    else
    {
	print Dumper(\$data);
    }
    if (! $mtn->descendents(\@list, "d612b1ed732ea565085eede32bb2a1fae2ca8804"))
    {
	printf(STDERR "OOPS: %s\n", $mtn->get_error_message());
    }
    else
    {
	print Dumper(\@list);
    }
    if (! $mtn->erase_ancestors(\@list,
				"ae65e53a3beca7841a87eb4525f39e3369107b82",
				"d612b1ed732ea565085eede32bb2a1fae2ca8804"))
    {
	printf(STDERR "OOPS: %s\n", $mtn->get_error_message());
    }
    else
    {
	print Dumper(\@list);
    }
    if (! $mtn->get_base_revision_id(\$data))
    {
	printf(STDERR "OOPS: %s\n", $mtn->get_error_message());
    }
    else
    {
	print Dumper(\$data);
    }
    if (! $mtn->get_content_changed(\@list,
				    "ae65e53a3beca7841a87eb4525f39e3369107b82",
				    "Makefile"))
    {
	printf(STDERR "OOPS: %s\n", $mtn->get_error_message());
    }
    else
    {
	print Dumper(\@list);
    }
    if (! $mtn->get_corresponding_path
	(\$data,
	 "ae65e53a3beca7841a87eb4525f39e3369107b82",
	 "Makefile",
	 "d612b1ed732ea565085eede32bb2a1fae2ca8804"))
    {
	printf(STDERR "OOPS: %s\n", $mtn->get_error_message());
    }
    else
    {
	print Dumper(\$data);
    }
    if (! $mtn->get_current_revision_id(\$data))
    {
	printf(STDERR "OOPS: %s\n", $mtn->get_error_message());
    }
    else
    {
	print Dumper(\$data);
    }
    if (! $mtn->get_file(\$data, "f7bec98218953adbb833865ccc52ea74d410b24e"))
    {
	printf(STDERR "OOPS: %s\n", $mtn->get_error_message());
    }
    else
    {
	print $data;
    }
    if (! $mtn->get_file_of(\$data, "Makefile"))
    {
	printf(STDERR "OOPS: %s\n", $mtn->get_error_message());
    }
    else
    {
	print $data;
    }
    if (! $mtn->get_option(\$data, "database"))
    {
	printf(STDERR "OOPS: %s\n", $mtn->get_error_message());
    }
    else
    {
	print $data;
    }
}

if (! $mtn->get_attributes(\$data, "script2"))
{
    printf(STDERR "OOPS: %s\n", $mtn->get_error_message());
}
else
{
    print $data;
}

if (! $mtn->get_attributes(\@list, "script2"))
{
    printf(STDERR "OOPS: %s\n", $mtn->get_error_message());
}
else
{
    print Dumper(\@list);
}

if (! $mtn->branches(\@list))
{
    printf(STDERR "OOPS: %s\n", $mtn->get_error_message());
}
else
{
    print Dumper(\@list);
}

if (! $mtn->get_option(\$data, "database"))
{
    printf(STDERR "OOPS: %s\n", $mtn->get_error_message());
}
else
{
    print $data . "\n";
}

if (! $mtn->get_revision(\$data, "d83907887a2a35229ef361a74e98bd296d84e60c"))
{
    printf(STDERR "OOPS: %s\n", $mtn->get_error_message());
}
else
{
    print $data;
}

if (! $mtn->get_revision(\$data,))
{
    printf(STDERR "OOPS: %s\n", $mtn->get_error_message());
}
else
{
    print $data;
}

if (! $mtn->get_manifest_of(\@list))
{
    printf(STDERR "OOPS: %s\n", $mtn->get_error_message());
}
else
{
    print Dumper(\@list);
}

if (! $mtn->get_manifest_of(\$data))
{
    printf(STDERR "OOPS: %s\n", $mtn->get_error_message());
}
else
{
    print Dumper(\$data);
}

if (! $mtn->certs(\@list, "d83907887a2a35229ef361a74e98bd296d84e60c"))
{
    printf(STDERR "OOPS: %s\n", $mtn->get_error_message());
}
else
{
    print Dumper(\@list);
}

if (! $mtn->certs(\$data, "d83907887a2a35229ef361a74e98bd296d84e60c"))
{
    printf(STDERR "OOPS: %s\n", $mtn->get_error_message());
}
else
{
    print Dumper(\$data);
}

if (! $mtn->db_set("database", "default-server", "www.test.com"))
{
    printf(STDERR "OOPS: %s\n", $mtn->get_error_message());
}

if (! $mtn->db_get(\$data, "database", "default-server"))
{
    printf(STDERR "OOPS: %s\n", $mtn->get_error_message());
}
else
{
    print Dumper(\$data);
}

if (! $mtn->graph(\@list))
{
    printf(STDERR "OOPS: %s\n", $mtn->get_error_message());
}
else
{
    print Dumper(\@list);
}

if (! $mtn->graph(\$data))
{
    printf(STDERR "OOPS: %s\n", $mtn->get_error_message());
}
else
{
    print Dumper(\$data);
}

if (! $mtn->heads(\@list, "net.venge.monotone.www"))
{
    printf(STDERR "OOPS: %s\n", $mtn->get_error_message());
}
else
{
    print Dumper(\@list);
}

if (! $mtn->identify(\$data, "Makefile.am"))
{
    printf(STDERR "OOPS: %s\n", $mtn->get_error_message());
}
else
{
    print Dumper(\$data);
}

if (! $mtn->interface_version(\$data))
{
    printf(STDERR "OOPS: %s\n", $mtn->get_error_message());
}
else
{
    print Dumper(\$data);
}

if (! $mtn->inventory(\$data))
{
    printf(STDERR "OOPS: %s\n", $mtn->get_error_message());
}
else
{
    print Dumper(\$data);
}

if (! $mtn->inventory(\@list))
{
    printf(STDERR "OOPS: %s\n", $mtn->get_error_message());
}
else
{
    print Dumper(\@list);
}

if (! $mtn->keys(\$data))
{
    printf(STDERR "OOPS: %s\n", $mtn->get_error_message());
}
else
{
    print Dumper(\$data);
}

if (! $mtn->keys(\@list))
{
    printf(STDERR "OOPS: %s\n", $mtn->get_error_message());
}
else
{
    print Dumper(\@list);
}

if (! $mtn->leaves(\@list))
{
    printf(STDERR "OOPS: %s\n", $mtn->get_error_message());
}
else
{
    print Dumper(\@list);
}

if (! $mtn->parents(\@list, "d83907887a2a35229ef361a74e98bd296d84e60c"))
{
    printf(STDERR "OOPS: %s\n", $mtn->get_error_message());
}
else
{
    print Dumper(\@list);
}

if (! $mtn->roots(\@list))
{
    printf(STDERR "OOPS: %s\n", $mtn->get_error_message());
}
else
{
    print Dumper(\@list);
}

if (! $mtn->select(\@list, "l:2007-01-01/b:net.venge.monotone"))
{
    printf(STDERR "OOPS: %s\n", $mtn->get_error_message());
}
else
{
    print Dumper(\@list);
}

if (! $mtn->tags(\$data, "net.venge.monotone"))
{
    printf(STDERR "OOPS: %s\n", $mtn->get_error_message());
}
else
{
    print Dumper(\$data);
}

if (! $mtn->tags(\@list, "net.venge.monotone"))
{
    printf(STDERR "OOPS: %s\n", $mtn->get_error_message());
}
else
{
    print Dumper(\@list);
}

if (! $mtn->get_revision(\$data, "492d55d26d09e8358bc239eaf2bf422350bf2d13"))
{
    printf(STDERR "OOPS: %s\n", $mtn->get_error_message());
}
else
{
    print Dumper(\$data);
}

if (! $mtn->get_revision(\@list, "492d55d26d09e8358bc239eaf2bf422350bf2d13"))
{
    printf(STDERR "OOPS: %s\n", $mtn->get_error_message());
}
else
{
    print Dumper(\@list);
}

if (! $mtn->packet_for_fdata(\$data,
			     "38d8ad417471d7ac2724e477eaafd1a59581ca8a"))
{
    printf(STDERR "OOPS: %s\n", $mtn->get_error_message());
}
else
{
    print Dumper(\$data);
}

if (! $mtn->packet_for_fdelta(\$data,
			      "a152991b3936bd8b49e9392fd908e882a7c13c4b",
			      "38d8ad417471d7ac2724e477eaafd1a59581ca8a"))
{
    printf(STDERR "OOPS: %s\n", $mtn->get_error_message());
}
else
{
    print Dumper(\$data);
}

if (! $mtn->packet_for_rdata(\$data,
			      "d7cfaacc152a049d004587192cc5a8979d051c14"))
{
    printf(STDERR "OOPS: %s\n", $mtn->get_error_message());
}
else
{
    print Dumper(\$data);
}

if (! $mtn->packets_for_certs(\$data,
			      "d7cfaacc152a049d004587192cc5a8979d051c14"))
{
    printf(STDERR "OOPS: %s\n", $mtn->get_error_message());
}
else
{
    print Dumper(\$data);
}

if (1 == 0)
{
    if (! $mtn->genkey(\%hash, 'whinnie@the.pooh', "bear of little brain"))
    {
	printf(STDERR "OOPS: %s\n", $mtn->get_error_message());
    }
    else
    {
	print Dumper(\%hash);
    }
}

my $data_file = IO::File->new("../mtn-tester", "r");
my $fdata;
$data_file->sysread($fdata, 64000);
$data_file = undef;
if (! $mtn->put_file(\$data, undef, $fdata))
{
    printf(STDERR "OOPS: %s\n", $mtn->get_error_message());
}
else
{
    print Dumper(\$data);
}
my $base_rev;
$mtn->get_base_revision_id(\$base_rev);
$fdata = "format_version \"1\"\n\n"
    . "new_manifest [0000000000000000000000000000000000000000]\n\n"
    . "old_revision [" . $base_rev . "]\n\n"
    . "add_file \"mtn-tester\"\n"
    . " content [" . $data . "]\n";
print $fdata;
if (! $mtn->put_revision(\$data, $fdata))
{
    printf(STDERR "OOPS: %s\n", $mtn->get_error_message());
}
else
{
    print Dumper(\$data);
}
$mtn->cert($data, "author", "aecooper\@coosoft.plus.com");
$mtn->cert($data, "branch", "net.venge.monotone");
$mtn->cert($data, "changelog", "Automated checkin.");
$mtn->cert($data, "date", "2008-08-31T18:42:30");

printf("Last error message `%s'\n", $mtn->get_error_message());
print Dumper (\$mtn);

printf("Destroying object.\n");
$mtn = undef;

exit(0);
