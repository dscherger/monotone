[[tag migration-auto]]


Monotone should have a refcard like [this](http://www.cs.put.poznan.pl/csobaniec/edu/svn-refcard.pdf).

Also, the work started on an SVG-based cheat-sheet in the contrib/ directory named [mtn\_cheat\_sheet.svg](http://mtn-host.prjek.net/viewmtn/monotone/revision/downloadfile/e45bd38d526fa88be934e052943541f7cffa2167/contrib/mtn\_cheat\_sheet.svg).

# Quick Start
|| `mtn db init --db=~/DbName.mtn` ||  initialize database *Db*''*Name.mtn* ||
|| `mtn genkey yourname@somplace.com` || generate key for user *yourname*''*@somplace.com*||
|| `mtn --db=[[DbName]].mtn --branch=com.someplace.myproject setup myproject` || start project *myproject* ||
|| `mtn add [[SomeFile]].c [[SomeDir]]/ ` || start version control for `[[SomeFile]].c` and all contents of `[[SomeDir]]/` ||
|| `mtn status` || show rough changes since last commit ||
|| `mtn diff` || show detailed changes since last commit ||
|| `mtn revert` *filename* || revert changes made to working copy of *filename* ||
|| `mtn drop` *filename* || stop keeping track of *filename* ||
|| `mtn commit` || commit changes ||
|| `mtn --db ~/DbName.mtn  --branch=com.someplace.myproject checkout` || checkout  com.someplace.myproject ||

# Subcommands
|| list / ls || list contents of database ||
|| serve    || serve database to network ||

# Share
(Note, this requires the same version of monotone on both hosts.)

|| `mtn sync ssh://username@example.com/absolute/path/to/database/DbName.mtn "my.branch"` || sync repository using ssh||
|| `mtn --db ~/DbName.mtn sync ssh://user@example.com/~/OtherDb.mtn "my.branch*"` || relative paths also work in a URI ||


# Common Options
|| `--db` || local database to use ||

# Naming Conventions
Derive public visible names from domain-names you control. Project names are usually in reverse order.

# Files
|| _MTN/  || monotone control directory within project||
