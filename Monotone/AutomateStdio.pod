=pod

=head1 NAME

Monotone::AutomateStdio - Perl interface to Monotone via automate stdio

=head1 VERSION

0.7

=head1 SYNOPSIS

  use Monotone::AutomateStdio qw(:capabilities :severities);
  my(@manifest,
     $mtn,
     @revs);
  $mtn = Monotone::AutomateStdio->new("/home/fred/venge.mtn");
  $mtn->select(\@revs, "h:net.venge.monotone");
  $mtn->get_manifest_of(\@manifest, $revs[0])
      or die("mtn: " . $mtn->get_error_message());

=head1 DESCRIPTION

The Monotone::AutomateStdio class gives a Perl developer access to Monotone's
automate stdio facility via an easy to use interface. All command, option and
output formats are handled internally by this class. Any structured information
returned by Monotone is parsed and returned back to the caller as lists of
records for ease of access (detailed below). One also has the option of
accessing Monotone's output as one large string should you prefer.

The mtn automate stdio subprocess is also controlled by this class. A new
subprocess is started, if necessary, when anything that requires it is
called. The subprocess is terminated on object destruction or when
$mtn-E<gt>closedown() is called.

All 0.35 automate commands have been implemented in this class except for the
`stdio' command, which hopefully is obvious. :-) I am currently working on
supporting versions of Monotone from 0.35 onwards (0.40 works with this
library, it is just that you will not be able to use the new features).

=head1 CONSTRUCTORS

=over 4

=item B<$mtn = Monotone::AutomateStdio-E<gt>new()>

Creates a new Monotone::AutomateStdio object, using the current workspace's
database.

=item B<$mtn = Monotone::AutomateStdio-E<gt>new($db)>

Creates a new Monotone::AutomateStdio object, using the database named in $db.

=back

=head1 CLASS METHODS

=over 4

=item B<Monotone::AutomateStdio-E<gt>register_error_handler($severity[,
$handler[, $client_data]])>

Registers the handler specified as a subroutine reference in $handler for
errors of a certain severity as specified by $severity. $severity can be one of
MTN_SEVERITY_WARNING, MTN_SEVERITY_ERROR or MTN_SEVERITY_ALL. The value of
$client_data is simply passed to the handler and can be used by the caller to
provide a context. This is a class method rather than an object one as errors
can be raised when calling a constructor. If no handler is given then the error
handling is reset to the default behaviour for that severity level.

The handler subroutine is given three arguments, the first one is a severity
string that indicates the severity of the error being handled (either
MTN_SEVERITY_WARNING or MTN_SEVERITY_ERROR), the second one is the error
message and the third is the value passed in as $client_data when the hander
was registered.

Please note:

=over 4

=item 1)

Warnings can be generated internally or whenever a message is received from an
mtn subprocess that is flagged as being in error. For example, this occurs when
an invalid selector is given to the $mtn-E<gt>select() method. The subprocess
does not exit under these conditions. Errors, however, are generated whenever
this class detects abnormal behaviour such as output that is formatted in an
unexpected manor or output appearing on the mtn subprocess's STDERR file
descriptor. Under these circumstances it is expected that the application
should exit or at least destroy any Monotone::AutomateStdio objects that are in
error.

=item 2)

Whilst warnings result in false being returned by those methods that return a
boolean success indicator, errors always result in an exception being thrown.

=item 3)

If the severity is MTN_SEVERITY_ERROR then it is expected that croak or die
will be called by the handler, if this is not the case then this class will
call croak() upon return. If you need to trap errors and prevent program exit
then use an eval block to protect yourself in the calling code.

=item 4)

If a warning handler is registered then this can be used to report problems via
one routine rather than checking the boolean success indicator returned by most
methods in this class.

=item 5)

In order to get the severity constants into your namespace you need to use the
following to load in this library.

    use Monotone::AutomateStdio qw(:severities);

=back

=item B<Monotone::AutomateStdio-E<gt>register_db_locked_handler([$handler[,
$client_data]])>

Registers the handler specified as a subroutine reference in $handler for
database locked conditions. The value of $client_data is simply passed to the
handler and can be used by the caller to provide a context. This is both a
class method as well as an object one. When used as a class method, the
specified database locked handler is used for all Monotone::AutomateStdio
objects that do not specify their own handlers. If no handler is given then the
database locked condition handling is reset to the default behaviour.

The handler subroutine is given two arguments, the first one is the
Monotone::AutomateStdio object that encountered the locked database and the
second is the value passed in as $client_data when the hander was
registered. If the handler returns true then the request that failed is
retried, if false is returned (undef) then the default behaviour is performed,
which is to treat it like any other error.

Typically one would register a database locked handler when you are using this
class in a long running application where it is quite possible that a user
might do an mtn sync in the background. For example, mtn-browse uses this
handler to display a `Database is locked, please retry...' dialog window.

=item B<Monotone::AutomateStdio-E<gt>register_io_wait_handler([$handler,
$timeout[, $client_data]])>

Registers the handler specified as a subroutine reference in $handler for I/O
wait conditions. This class will call the handler after waiting $timeout
seconds for data to come from the mtn subprocess. The value of $client_data is
simply passed to the handler and can be used by the caller to provide a
context. This is both a class method as well as an object one. When used as a
class method, the specified I/O wait handler is used for all
Monotone::AutomateStdio objects that do not specify their own handlers. If no
handler is given then I/O wait handling is reset to the default behaviour.

The handler subroutine is given two arguments, the first one is the
Monotone::AutomateStdio object that is waiting for output from the mtn
subprocess and the second is the value passed in as $client_data when the
handler was registered.

Typically one would register an I/O wait handler when you are using this class
in an interactive application where it may be necessary to do some periodic
background processing whilst waiting for the mtn subprocess to do
something. For example, mtn-browse uses this handler to process any outstanding
Gtk2 events so that the application can keep its windows up to date.

=back

=head1 OBJECT METHODS

See http://monotone.ca/monotone.html for a complete description of the mtn
automate commands.

Methods that return data from the mtn subprocess do so via their first
argument. This argument is a reference to either a scalar or a list depending
upon whether the data returned by the method is raw data or a list of items
respectively. Methods that return lists of records also provide the option of
returning the data as one raw chunk if the reference points to a scalar rather
than a list. Therefore:

    $mtn->get_manifest_of(\$buffer);

would simply put the output from the `get_manifest_of' command into the
variable named $buffer, whereas:

    $mtn->get_manifest_of(\@list);

would return the output as a list of records (actually anonymous hashes to be
precise). However:

    $mtn->get_file(\$buffer, $file_id);

will always need a reference to a scalar and:

    $mtn->select(\@list, $selector);

will always need a reference to a list (each item is just a string containing a
revision id rather than a record).

The one exception to the above is the $mtn-E<gt>genkey() method, which expects
a reference to either a scalar or a hash as it only ever returns one record's
worth of information.

The remaining arguments depend upon the mtn command being used.

The following methods are provided:

=over 4

=item B<$mtn-E<gt>ancestors(\@list, @revision_ids)>

Get a list of ancestors for the specified revisions.

=item B<$mtn-E<gt>ancestry_difference(\@list, $new_revision_id
[, $old_revision_id ...])>

Get a list of ancestors for the specified revision, that are not also
ancestors for the specified old revisions.

=item B<$mtn-E<gt>branches(\@list)>

Get a list of branches.

=item B<$mtn-E<gt>can($feature)>

Determine whether a certain feature is available with the version of Monotone
that is currently being used by this object. The list of valid features are:

    MTN_IGNORE_SUSPEND_CERTS
    MTN_INVENTORY_IO_STANZA_FORMAT
    MTN_P_SELECTOR

In order to get these constants into your namespace you need to use the
following to load in this library.

    use Monotone::AutomateStdio qw(:capabilities);

Please note that if you see (feature: ...) then this means that whatever is
being discussed is only available if $mtn-E<gt>can() returns true for the
specified feature.

=item B<$mtn-E<gt>cert($revision_id, $name, $value)>

Add the specified certificate to the specified revision.

=item B<$mtn-E<gt>certs(\$buffer | \@list, $revision_id)>

Get all the certificates for the specified revision. If \$buffer is passed then
the output from the command is simply placed into the variable. However if
\@list is passed then the output is returned as a list of anonymous hashes,
each one containing the following fields:

    key       - The signer of the cert.
    signature - Signer status. Values can be one of "ok", "bad" or
                "unknown".
    name      - The cert name.
    value     - Its value.
    trust     - Its trust status. Values can be one of "trusted" or
                "untrusted".

=item B<$mtn-E<gt>children(\@list, $revision_id)>

Get a list of children for the specified revision.

=item B<$mtn-E<gt>closedown()>

If started then stop the mtn subprocess. Please note that the mtn subprocess is
automatically stopped when the related object is destroyed. This method is
provided so that application developers can conveniently control when the
subprocess is active.

=item B<$mtn-E<gt>common_ancestors(\@list, $revision_id ...)>

Get a list of revisions that are all ancestors of the specified revision(s).

=item B<$mtn-E<gt>content_diff(\$buffer, $revision_id1, $revision_id2
[, $file_name ...])>

Get the difference between the two specified revisions, optionally limiting
it to the specified list of files. If the second revision id is undefined
then the workspace's revision is used. If both revision ids are undefined
then the workspace's and base revisions are used. If no file names are
listed then differences in all files are reported.

=item B<$mtn-E<gt>db_get(\$buffer, $domain, $name)>

Get the value of a database variable.

=item B<$mtn-E<gt>db_set($domain, $name, $value)>

Set the value of a database variable.

=item B<$mtn-E<gt>descendents(\@list, $revision_id ...)>

Get a list of descendants for the specified revision(s).

=item B<$mtn-E<gt>erase_ancestors(\@list, $revision_id ...)>

For a given list of revisions, weed out those that are ancestors to other
revisions specified within the list.

=item B<$mtn-E<gt>genkey(\$buffer | \%hash, $key_id, $pass_phrase)>

Generate a new key for use within the database. If \$buffer is passed then the
output from the command is simply placed into the variable. However if \%hash
is passed then the output is returned as one anonymous hash containing the
following fields:

    name              - The name of the key.
    public_hash       - The public hash code.
    private_hash      - The private hash code.
    public_locations  - A list of locations for the public hash code.
                        Values can be one of "database" or
                        "keystore".
    private_locations - A list of locations for the private hash
                        code. Values can be one of "database" or
                        "keystore".

=item B<$mtn-E<gt>get_attributes(\$buffer, $file_name)>

Get the attributes of the specified file. If \$buffer is passed then the output
from the command is simply placed into the variable. However if \@list is
passed then the output is returned as a list of anonymous hashes, each one
containing the following fields:

    attribute - The name of the attribute.
    value     - The value of the attribute.
    state     - The status of the attribute. Values can be one of
                "added", "changed", "dropped" or "unchanged".

=item B<$mtn-E<gt>get_base_revision_id(\$buffer)>

Get the revision upon which the workspace is based.

=item B<$mtn-E<gt>get_content_changed(\@list, $revision_id, $file_name)>

Get a list of revisions in which the content was most recently changed,
relative to the specified revision.

=item B<$mtn-E<gt>get_corresponding_path(\$buffer, $source_revision_id,
$file_name, $target_revision_id)>

For the specified file name in the specified source revision, return the
corresponding file name for the specified target revision.

=item B<$mtn-E<gt>get_current_revision_id(\$buffer)>

Get the revision that would be created if an unrestricted commit was done
in the workspace.

=item B<$mtn-E<gt>get_db_name()>

Return the the file name of the Monotone database as given to the
constructor. If no such name was given then undef is returned.

=item B<$mtn-E<gt>get_error_message()>

Return the last error message received from the mtn subprocess. An empty string
is returned if no error has occurred yet.

=item B<$mtn-E<gt>get_file(\$buffer, $file_id)>

Get the contents of the file referenced by the specified file id.

=item B<$mtn-E<gt>get_file_of(\$buffer, $file_name[, $revision_id])>

Get the contents of the specified file under the specified revision. If the
revision id is undefined then the current workspace revision is used.

=item B<$mtn-E<gt>get_manifest_of(\$buffer | \@list, $revision_id)>

Get the manifest for the current or specified revision. If \$buffer is
passed then the output from the command is simply placed into the
variable. However if \@list is passed then the output is returned as a list
of anonymous hashes, each one containing the following fields:

    type    - The type of entry. Values can be one of "file" or
              "directory".
    name    - The name of the directory or file.
    file_id - The id of the file. This field is only present if type
              is set to "file".

=item B<$mtn-E<gt>get_option(\$buffer, $option_name)>

Get the value of an option stored in a workspace's _MTN directory.

=item B<$mtn-E<gt>get_pid()>

Return the process id of the mtn subprocess spawned by this class. Zero is
returned if no subprocess is thought to exist. Also if the subprocess should
exit unexpectedly then this method will carry on returning its process id until
the $mtn-E<gt>closedown() method is called.

=item B<$mtn-E<gt>get_revision(\$buffer | \@list, $revision_id)>

Get the revision information for the current or specified revision. If \$buffer
is passed then the output from the command is simply placed into the
variable. However if \@list is passed then the output is returned as a list of
anonymous hashes, each one containing a variety of fields depending upon the
type of entry:

    type - The type of entry. Values can be one of "add_dir",
           "add_file", "clear", "delete", "new_manifest",
           "old_revision", "patch", "rename" or "set".

    add_dir:
        name - The name of the directory that was added.

    add_file:
        name    - The name of the file that was added.
        file_id - The id of the file.

    clear:
        name      - The name of the file to which the attribute
                    applied.
        attribute - The name of the attribute that was cleared.

    delete:
        name - The name of the directory or file that was deleted.

    new_manifest:
        manifest_id - The id of the revision's new manifest.

    old_revision:
        revision_id - The id of the parent revision.

    patch:
        name         - The name of the file that was changed.
        from_file_id - The file's old id.
        to_file_id   - The file's new id.

    rename:
        from_name - The name of the file before the rename.
        to_name   - The name of the file after the rename.

    set:
        name      - The name of the file that had an attribute set.
        attribute - The name of the attribute that was set.
        value     - The value that the attribute was set to.

=item B<$mtn-E<gt>graph(\$buffer | \@list)>

Get a complete ancestry graph of the database. If \$buffer is passed then the
output from the command is simply placed into the variable. However if \@list
is passed then the output is returned as a list of anonymous hashes, each one
containing the following fields:

    revision_id - The id of a revision.
    parent_ids  - A list of parent revision ids.

=item B<$mtn-E<gt>heads(\@list[, $branch_name])>

Get a list of revision ids that are heads on the specified branch. If no branch
is given then the workspace's branch is used.

=item B<$mtn-E<gt>identify(\$buffer, $file_name)>

Get the file id, i.e. hash, of the specified file.

=item B<$mtn-E<gt>ignore_suspend_certs($ignore)>

Determine whether revisions with a suspend certificate are to be ignored or
not. If $ignore is true then suspend certificates are ignored, otherwise they
are honoured (in which case any suspended revisions and branches that only have
suspended revisions on their heads will not be listed). The default behaviour
is to honour suspend certificates. (feature: MTN_IGNORE_SUSPEND_CERTS)

=item B<$mtn-E<gt>interface_version(\$buffer)>

Get the version of the mtn automate interface.

=item B<$mtn-E<gt>inventory(\$buffer | \@list)>

Get the inventory for the current workspace. If \$buffer is passed then the
output from the command is simply placed into the variable. However if \@list
is passed then the output is returned as a list of anonymous hashes, each one
containing the following fields:

    Prior to version 0.37 of Monotone:
        status       - The three inventory status characters for the
                       file or directory.
        crossref_one - The first cross-referencing number.
        crossref_two - The second cross-referencing number.
        name         - The name of the file or directory.

    From version 0.37 of Monotone onwards
    (feature: MTN_INVENTORY_IO_STANZA_FORMAT):
        path     - The name of the file or directory.
        old_type - The type of the entry in the base manifest. Values
                   can be one of "directory", "file" or "none".
        new_type - The type of the entry in the revision manifest.
                   Values can be one of "directory", "file" or
                   "none".
        fs_type  - The type of the entry on the file system. Values
                   can be one of "directory", "file" or "none".
        old_path - The old name of the file or directory if it has
                   been renamed in the revision manifest.
        new_path - The new name of the file or directory if it has
                   been renamed in the revision manifest.
        status   - A list of status flags. Values can be one of
                   "added", "dropped", "ignored", "invalid", "known",
                   "missing", "rename_source", "rename_target" or
                   "unknown".
        changes - A list of change flags. Values can be one of
                  "attrs" or "content".

        Please note that some fields are not used by all entries, in
        which case they are set to undef.

=item B<$mtn-E<gt>keys(\$buffer | \@list)>

Get a list of all the keys known to mtn. If \$buffer is passed then the output
from the command is simply placed into the variable. However if \@list is
passed then the output is returned as a list of anonymous hashes, each one
containing the following fields:

    type              - The type of entry. Values can be one of
                        "public" or "public-private".
    name              - The name of the key.
    public_hash       - The public hash code.
    private_hash      - The private hash code. This field is only
                        present if type is set to "public-private".
    public_locations  - A list of locations for the public hash code.
                        Values can be one of "database" or
                        "keystore".
    private_locations - A list of locations for the private hash
                        code. Values can be one of "database" or
                        "keystore". This field is only present if
                        type is set to "public-private".

=item B<$mtn-E<gt>leaves(\@list)>

Get a list of leaf revisions.

=item B<$mtn-E<gt>packet_for_fdata(\$buffer, $file_id)>

Get the contents of the file referenced by the specified file id in packet
format.

=item B<$mtn-E<gt>packet_for_fdelta(\$buffer, $from_file_id, $to_file_id)>

Get the file delta between the two files referenced by the specified file ids
in packet format.

=item B<$mtn-E<gt>packet_for_rdata(\$buffer, $revision_id)>

Get the contents of the revision referenced by the specified revision id in
packet format.

=item B<$mtn-E<gt>packets_for_certs(\$buffer, $revision_id)>

Get all the certs for the revision referenced by the specified revision id in
packet format.

=item B<$mtn-E<gt>parents(\@list, $revision_id)>

Get a list of parents for the specified revision.

=item B<$mtn-E<gt>put_file(\$buffer, $base_file_id, \$contents)>

Put the specified file contents into the database, optionally basing it on the
specified file id (this is used for delta encoding). The file id is returned.

=item B<$mtn-E<gt>put_revision(\$buffer, \$contents)>

Put the specified revision data into the database. The revision id is
returned. Please note that any newly created revisions have no certificates
associated with them and so these have to be added using the $mtn-E<gt>cert()
method.

=item B<$mtn-E<gt>register_db_locked_handler([$handler[, $client_data]])>

Registers a database locked handler for the object rather than the class. For
further details please see the description of the class method.

=item B<$mtn-E<gt>register_io_wait_handler([$handler, $timeout
[, $client_data]])>

Registers an I/O wait handler for the object rather than the class. For further
details please see the description of the class method.

=item B<$mtn-E<gt>roots(\@list)>

Get a list of root revisions, i.e. revisions with no parents.

=item B<$mtn-E<gt>select(\@list, $selector)>

Get a list of revision ids that match the specified selector.

=item B<$mtn-E<gt>tags(\$buffer | \@list[, $branch_pattern])>

Get all the tags attached to revisions on branches that match the specified
branch pattern. If no pattern is given then all branches are searched. If
\$buffer is passed then the output from the command is simply placed into the
variable. However if \@list is passed then the output is returned as a list of
anonymous hashes, each one containing the following fields:

    tag         - The name of the tag.
    revision_id - The id of a revision that the tag is attached to.
    signer      - The name of the key used to sign the tag cert.
    branches    - A list of all branches that contain this revision.

=item B<$mtn-E<gt>toposort(\@list[, $revision_id ...])>

Sort the specified revisions such that the ancestors come out first.

=back

=head1 RETURN VALUE

Except for the constructor and the
Monotone::AutomateStdio-E<gt>register_db_locked_handler(),
Monotone::AutomateStdio-E<gt>register_error_handler(),
Monotone::AutomateStdio-E<gt>register_io_wait_handler(), $mtn-E<gt>closedown(),
$mtn-E<gt>get_db_name(), $mtn-E<gt>get_error_message() and $mtn-E<gt>get_pid()
methods, all remaining methods return a boolean success indicator, true for
success or false for failure (where true is 1 and false is undef). The
constructor returns a newly created object, $mtn-E<gt>get_db_name() returns a
string or undef, $mtn-E<gt>get_error_message() returns a string,
$mtn-E<gt>get_pid() returns an integer and
Monotone::AutomateStdio-E<gt>register_db_locked_handler(),
Monotone::AutomateStdio-E<gt>register_error_handler(),
Monotone::AutomateStdio-E<gt>register_io_wait_handler() and
$mtn-E<gt>closedown() do not return anything.

=head1 NOTES

There are situations where this class does legitimately terminate or even
restart the mtn subprocess (for example when a database locked condition is
detected). Therefore if you wish to detect and handle SIGCHLD signals in your
application then please make sure that any process ids that you reap are
checked against the $mtn-E<gt>get_pid() method. If the process id does not
match anything returned from $mtn-E<gt>get_pid() and is unknown to your
application then it is likely that the exited child process was an old mtn
subprocess that has been restarted.

In order to reliably shutdown the mtn subprocess, the alarm() routine is used
and will consequently reset any SIGALRM timers. In C I would obviously use
setitimer() to set up any timeout timers and then restore their previous state,
however to do this in Perl one has to use the Time::HiRes CPAN module. I felt
that on balance it would be nicer not to introduce this dependency and use
alarm(). Anyway if you want to do something periodically it is usually better
to have a thread do that for you rather than use signals. If you have different
opinions on this then please let me know.

When the output of a command from the automate stdio interface changes
dramatically, it will probably not be possible to protect Perl applications
from those changes. This class is a convenience wrapper rather than something
that will totally divorce you from the automate stdio interface. Also the
chances are you will want the new type of output anyway.

=head1 SEE ALSO

http://monotone.ca

=head1 BUGS

Your mileage may vary if this class is used with versions of Monotone older
than 0.35 (automate stdio interface version 4.3).

No doubt other bugs will crawl out of the wood-work.

=head1 HISTORY

An original by Anthony Cooper <aecooper@coosoft.plus.com>.

=cut
