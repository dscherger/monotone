<%

import mimetypes
import datetime
import monotone
import common
import config
import urllib
import pipes
import time
import os
from enscriptlangs import enscript_langs
from html import get_icon, TableWriter
from utility import run_command
from common import colourise_code, get_branch_links

# file.psp ; provide information about a file
# if possible, display it (with syntax highlighting, etc.)
# provide a download link

psp.set_error_page("error.psp")

if not form.has_key('id'):
    raise Exception("No revision ID specified.")

id = form['id']
if not monotone.is_valid_id(id):
    raise Exception("Specified revision ID is not valid.")

if not form.has_key('path'):
    raise Exception("No path specified.")
path = form['path']

certs = mt.certs(id)
branches = common.extract_cert_from_certs(certs, "branch", as_list=True)

revision = mt.revision(id)
if not revision.has_key('new_manifest'):
    raise Exception("There is no manifest in this revision ID.")
manifest_id = revision['new_manifest'][0][1]
manifest = mt.manifest(manifest_id)

matching_file_id = None
for file_id, filename in manifest:
    if filename == path:
        matching_file_id = file_id
        break
if matching_file_id == None:
    raise Exception("File not found in this revision.")

link_components = ""
components = ['']
components += path.split('/')
for idx, component in enumerate(components[:-1]):
    link_components += link("manifest", [id, '/'.join(components[:idx+1])], component + '/')
link_components += components[-1]
branch_links = get_branch_links(mt, branches)

info = {
    'title' : "File '%s' in revision %s of %s" % (link_components, 
						  link("revision", id), 
						  branch_links)
    }
req.write(template.header(info))

req.write('<p>For more information about the revision containing this file, see its %s page. For other files contained in this revision, see the %s.</p>' % \
	  (link("revision", id, "revision"), 
	   link("manifest", id, "manifest")))

req.write('<p>You can also %s the file verbatim. In addition, this %s will always download the latest revision of the file.</p>' \
	  % (link("download", [matching_file_id, path], "download"),
	     link("fileinbranch", [branches[0], path], "link")))

### FIXME FIXME
### this means having _the entire file_ in memory
### which is pointless and dumb.
contents = mt.file(matching_file_id)
colourise_code(req, hq, path, contents)

req.write(template.footer(info))

%>
