#! /bin/sh
# postinst script for monotone-server
#
# see: dh_installdeb(1)

set -e

# summary of how this script can be called:
#        * <postinst> `configure' <most-recently-configured-version>
#        * <old-postinst> `abort-upgrade' <new version>
#        * <conflictor's-postinst> `abort-remove' `in-favour' <package>
#          <new-version>
#        * <deconfigured's-postinst> `abort-deconfigure' `in-favour'
#          <failed-install-package> <version> `removing'
#          <conflicting-package> <version>
# for details, see http://www.debian.org/doc/debian-policy/ or
# the debian-policy package
#

# source debconf stuff
. /usr/share/debconf/confmodule

MONOTONE=/usr/bin/monotone

case "$1" in
    configure)

       MTN_DB=/var/lib/monotone/default.db
       MTN_HOME=/var/lib/monotone
       MTN_CONFDIR=/etc/monotone
       MTN_KEYDIR=$MTN_HOME/keys

       db_get monotone-server/manage
       if [ -z "$RET" ]; then
           exit 0
       fi

       # read our passphrase from a file
       if [ -e "$MTN_HOME/$MTN_KEY.passphrase" ]; then
          db_set monotone-server/passphrase "`cat $MTN_HOME/$MTN_KEY.passphrase`"
       fi

       db_get monotone-server/key 
       MTN_KEY=$RET

       db_get monotone-server/passphrase
       MTN_KEY_PASSWD=$RET

       MTN_VERSION="$2"
       
       # Since we are configuring, we should check if we are upgrading.  If we are
       # upgrading, we should run the proper db migrate commands if necessary.

       if [ -z "$2" ]; then
          # not upgrading, fresh install
          # create monotone user and fix permissions of files
          if [ -z "`id -u monotone 2> /dev/null`" ]; then
              /usr/sbin/adduser --system --group --home $MTN_HOME --no-create-home --disabled-password --quiet monotone --gecos "Monotone"
              chown monotone:monotone $MTN_HOME
              chown monotone:monotone $MTN_CONFDIR
              chown monotone:monotone $MTN_KEYDIR
              chmod 0740 $MTN_HOME
              chmod 0740 $MTN_CONFDIR
              chmod 0740 $MTN_KEYDIR
          fi

          # if there is no database, create one
          if [ ! -e $MTN_DB ]; then
              echo "Creating Monotone database..." >&2
              $MONOTONE --db $MTN_DB db init
              chmod 0600 $MTN_DB
              echo "Creating Monotone server keypair..." >&2

              yes "$MTN_KEY_PASSWD" | 
                 $MONOTONE --db $MTN_DB genkey $MTN_KEY \
                 --norc --keydir $MTN_KEYDIR --confdir $MTN_CONFDIR > /dev/null

              $MONOTONE --db $MTN_DB pubkey $MTN_KEY \
                 --norc --keydir $MTN_KEYDIR --confdir $MTN_CONFDIR > $MTN_HOME/$MTN_KEY.pubkey

              echo "Monotone database created successfully." >&2
          fi
       elif [ dpkg --compare-versions "$MTN_VERSION" lt 0.17 ]; then 
          # monotone version to old to automatically upgrade
          echo "Cannot automatically upgrade from monotone version $2." >&2
          echo -e "Please see UPGRADE and README.changesets in /usr/share/doc/monotone for\n \
                   information on upgrading." >&2
       elif [ dpkg --compare-versions "$MTN_VERSION" lt 0.22 ]; then 
          # upgradable version of monotone
          echo "Attempting to migrate monotone database..." >&2
          echo "A backup will be created in $MTN_HOME." >&2

          cp $MTN_DB $MTN_DB~
          (yes "$MTN_KEY_PASSWD" |
             $MONOTONE --db $MTN_DB db migrate \
             --norc --keydir $MTN_KEYDIR --confdir $MTN_CONFDIR &&
             echo "Database successfully migrated." >&2) || 
          (echo "*** Error migrating database. ***" >&2 &&
              echo -e "Please see UPGRADE and README.changesets in /usr/share/doc/monotone for\n \
                       information on manually upgrading your database." >&2)
       fi

       echo "$MTN_KEY_PASSWD" > $MTN_HOME/$MTN_KEY.passphrase
       chmod 0600 $MTN_HOME/$MTN_KEY.passphrase
       db_set monotone-server/passphrase ""

    ;;

    abort-upgrade|abort-remove|abort-deconfigure)

    ;;

    *)
        echo "postinst called with unknown argument \`$1'" >&2
        exit 1
    ;;
esac

# dh_installdeb will replace this with shell code automatically
# generated by other debhelper scripts.

#DEBHELPER#

exit 0


